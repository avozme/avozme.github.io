I"…1<h1 class="no_toc" id="8-orientaci√≥n-a-objetos">8. Orientaci√≥n a objetos</h1>

<ul id="markdown-toc">
  <li><a href="#81-conceptos-b√°sicos-de-programaci√≥n-orientada-a-objetos" id="markdown-toc-81-conceptos-b√°sicos-de-programaci√≥n-orientada-a-objetos">8.1. Conceptos b√°sicos de programaci√≥n orientada a objetos</a>    <ul>
      <li><a href="#811-un-ejemplo-sencillo-para-entender-el-concepto-de-objeto" id="markdown-toc-811-un-ejemplo-sencillo-para-entender-el-concepto-de-objeto">8.1.1. Un ejemplo sencillo para entender el concepto de ‚Äúobjeto‚Äù</a></li>
      <li><a href="#812-m√©todos" id="markdown-toc-812-m√©todos">8.1.2. M√©todos</a></li>
      <li><a href="#813-atributos" id="markdown-toc-813-atributos">8.1.3. Atributos</a></li>
      <li><a href="#814-herencia" id="markdown-toc-814-herencia">8.1.4. Herencia</a></li>
    </ul>
  </li>
  <li><a href="#82-los-objetos-en-javascript" id="markdown-toc-82-los-objetos-en-javascript">8.2. Los objetos en Javascript</a>    <ul>
      <li><a href="#821-creaci√≥n-de-objetos-con-javascript" id="markdown-toc-821-creaci√≥n-de-objetos-con-javascript">8.2.1. Creaci√≥n de objetos con Javascript</a></li>
      <li><a href="#822-el-objeto-this" id="markdown-toc-822-el-objeto-this">8.2.2. El objeto ‚Äúthis‚Äù</a></li>
      <li><a href="#823-las-clases-en-javascript" id="markdown-toc-823-las-clases-en-javascript">8.2.3. Las clases en Javascript</a></li>
      <li><a href="#824-herencia-en-javascript" id="markdown-toc-824-herencia-en-javascript">8.2.4. Herencia en Javascript</a></li>
      <li><a href="#825-el-objeto-super" id="markdown-toc-825-el-objeto-super">8.2.5. El objeto ‚Äúsuper‚Äù</a></li>
      <li><a href="#826-algunos-aspectos-avanzados" id="markdown-toc-826-algunos-aspectos-avanzados">8.2.6. Algunos aspectos avanzados</a></li>
      <li><a href="#827-objetos-predefinidos-de-javascript" id="markdown-toc-827-objetos-predefinidos-de-javascript">8.2.7. Objetos predefinidos de Javascript</a></li>
    </ul>
  </li>
  <li><a href="#83-un-ejemplo-completo" id="markdown-toc-83-un-ejemplo-completo">8.3. Un ejemplo completo</a>    <ul>
      <li><a href="#lo-que-queremos-hacer" id="markdown-toc-lo-que-queremos-hacer">Lo que queremos hacer</a></li>
      <li><a href="#nuestra-implementaci√≥n" id="markdown-toc-nuestra-implementaci√≥n">Nuestra implementaci√≥n</a></li>
    </ul>
  </li>
</ul>

<p>En este cap√≠tulo vamos a introducir las t√©cnicas de <strong>programaci√≥n orientada a objetos</strong> y su implementaci√≥n en Javascript.</p>

<p>La programaci√≥n orientada a objetos es una forma de programar (un <em>paradigma</em>, dicen los te√≥ricos) que implica organizar el c√≥digo fuente de una determinada manera. Desde que este paradigma se impuso con fuerza en la d√©cada de 1990, se ha comprobado que las aplicaciones orientadas a objetos son m√°s f√°ciles de dise√±ar y de mantener que las aplicaciones que usan t√©cnicas de programaci√≥n m√°s anticuadas (lo que se llama <strong>programaci√≥n estructurada cl√°sica</strong>).</p>

<p>Javascript es un lenguaje orientado a objetos, aunque hace una interpretaci√≥n un poco peculiar de lo que significa este concepto. En este cap√≠tulo, veremos primero qu√© es la programaci√≥n orientada a objetos y luego nos centraremos en c√≥mo aplicar esas ideas a Javascript.</p>

<h2 id="81-conceptos-b√°sicos-de-programaci√≥n-orientada-a-objetos">8.1. Conceptos b√°sicos de programaci√≥n orientada a objetos</h2>

<p>Los p√°rrafos que vienen a continuaci√≥n se basan en un texto <strong>Yukihiro Matsumoto</strong>, el creador del lenguaje Ruby. La raz√≥n es sencilla: me parece una explicaci√≥n insuperable (gracias a Matsumoto, claro, no a m√≠).</p>

<p>Para entender qu√© significa exactamente <strong>programaci√≥n orientada a objetos</strong>, primero tenemos que comprender en qu√© consiste la <strong>programaci√≥n tradicional</strong> o no orientada a objetos.</p>

<p>En programaci√≥n tradicional, cualquier problema inform√°tico se resuelve codificando un conjunto de algoritmos que trabajan sobre un conjunto de datos. Es decir, los datos son elementos pasivos: es el c√≥digo el que se encarga de hacer todo el trabajo por ellos.</p>

<p>A medida que los proyectos crecen, el c√≥digo tambi√©n lo hace, y llega un momento en el que es imposible saber c√≥mo funciona todo el sistema. Surgen interacciones imprevistas e impredecibles entre distintas partes del programa. El fallo m√°s tonto, como un error tipogr√°fico, puede convertirse en una pesadilla cuya localizaci√≥n puede suponer muchas horas de trabajo (y, en consecuencia, mucho dinero).</p>

<p>Como dice Matsumoto, el mantenimiento de estos programas se convierte en algo parecido a <strong>transportar un calamar gigante intentado que ninguno de sus tent√°culos te alcance la cara</strong>.</p>

<p>Lo que hace la programaci√≥n orientada a objetos es cambiar esta forma de trabajar. No supone una revoluci√≥n con los m√©todos anteriores, sino un cambio en la forma en la que se hacen las mismas cosas de siempre.</p>

<p>La mayor√≠a del trabajo se delega a los propios datos, de modo que <strong>los datos ya no son est√°ticos</strong>, sino que se encargan de mantenerse en forma a s√≠ mismos. De nuevo en palabras de Matsumoto: <em>dejamos de tratar cada pieza de dato como una caja en la que se puede abrir su tapa y arrojar cosas en ella y empezamos a tratarlos como m√°quinas funcionales cerradas con unos pocos interruptores y diales bien definidos</em>.</p>

<p>Un dato en programaci√≥n orientada a objetos (es decir, una caja con interruptores, botoncitos y diales) puede tener, en sus tripas, algo muy simple o muy complejo. No se puede saber desde el exterior y no se nos permite abrir la m√°quina (excepto cuando estamos completamente seguros de que algo est√° mal en su dise√±o), por lo que se nos obliga a utilizar los interruptores y leer los diales para interactuar con los datos. Una vez construida una de esas m√°quinas, no queremos tener que volver a pensar en c√≥mo funciona internamente.</p>

<h3 id="811-un-ejemplo-sencillo-para-entender-el-concepto-de-objeto">8.1.1. Un ejemplo sencillo para entender el concepto de ‚Äúobjeto‚Äù</h3>

<p>Seguimos con Matsumoto para ilustrar con un ejemplo sencillo qu√© es eso de una ‚Äúm√°quina con unos pocos interruptores y diales‚Äù.</p>

<p>Seguramente en tu cocina tienes un horno microondas (aunque, en realidad, para este ejemplo podr√≠as elegir cualquier electrodom√©stico). El horno consta, entre otros muchos subsistemas, de un temporizador. Su trabajo consiste en mantener el horno encendido durante un tiempo determinado por el usuario.</p>

<p>¬øC√≥mo podr√≠amos representar esto en un lenguaje de programaci√≥n? En Javascript, por ejemplo, el temporizador podr√≠a ser, simplemente, una variable de tipo <em>number</em>. El programa manipular√≠a esa variable disminuyendo el valor una vez por segundo, y permitir√≠a al usuario establecer el tiempo inicial del temporizador antes de poner el horno en marcha.</p>

<p>Con este enfoque tradicional, un error en cualquier parte del programa podr√≠a terminar asignando un valor falso a la variable, como un n√∫mero negativo o un tiempo de varias horas. <em>Hay un n√∫mero infinito de razones inesperadas por las que podr√≠a llegar a suceder esto</em>. Cualquiera con cierta experiencia programando sabe que se pueden perder horas o d√≠as tratando de encontrar ese error.</p>

<p>Pero si programamos con un lenguaje orientado a objetos, <em>no pensaremos en el tipo de datos que mejor se ajusta a un temporizador de microondas, sino en el modo en el que un temporizador de microondas funciona en el mundo real</em>.</p>

<p>No parece una gran diferencia, pero lo es.</p>

<p>El programador, o el dise√±ador, necesitar√° dedicar cierto tiempo a decidir qu√© es exactamente un temporizador de microondas y c√≥mo se espera que el mundo exterior interact√∫e con el. Por fin, construir√° una peque√±a m√°quina (una pieza de software) con controles que permitan establecer, consultar y disminuir su valor.</p>

<p>Por ejemplo, podemos decidir crear el temporizador impidiendo asignarle un valor arbitrario, por la sencilla raz√≥n de que los temporizadores de microondas no trabajan de esa forma en el mundo real: solo permiten asignar m√∫ltiplos de 10 segundos, por lo general.</p>

<p>Es decir: existen s√≥lo unas cuantas cosas que un temporizador de microondas puede hacer, y s√≥lo permitiremos esas cosas. As√≠, si alguien desde otra parte del programa trata de asignar alg√∫n valor no permitido al temporizador, como un n√∫mero negativo, le resultar√° imposible hacerlo por la sencilla raz√≥n de que el propio temporizador no lo permitir√°. Ya no es un dato ‚Äútonto‚Äù y est√°tico, que permite que cualquiera lo manipule. Es un dato ‚Äúlisto‚Äù, con control y autonom√≠a sobre su propio comportamiento.</p>

<p><em>Lo hemos convertido en un <strong>objeto</strong></em>.</p>

<p>De ese modo, estaremos protegiendo una parte del programa de errores cometidos en otras partes y que, en programaci√≥n tradicional, se propagan como el fuego en un tanque de gasolina.</p>

<p>Por si fuera poco, los lenguajes orientados a objetos nos permiten que, una vez que hayamos dise√±ado un temporizador de microondas (o el objeto que sea), podamos fabricar tantos como sea necesario. Habremos creado un patr√≥n o molde de temporizador y, a partir de ese molde, se pueden construir objetos diferentes (pero similares) indefinidamente.</p>

<p>Pues bien, el <em>molde</em> se conoce como <strong>clase</strong>, y cada temporizador concreto que fabriquemos a partir de ese molde se conoce como <strong>objeto</strong>.</p>

<p>Aclaremos, sin embargo, que la programaci√≥n orientada a objetos no es una soluci√≥n milagrosa: nada impide, en cualquier lenguaje, escribir c√≥digo poco claro, descuidado, inestable o directamente err√≥neo.</p>

<p>A continuaci√≥n hablaremos de los ‚Äúinterruptores y diales‚Äù del temporizador del microondas (m√©todos) y, un poco despu√©s, veremos como se construyen los moldes (clases).</p>

<h3 id="812-m√©todos">8.1.2. M√©todos</h3>

<p>En la programaci√≥n orientada a objetos, como acabamos de ver, no se piensa en manipular los datos directamente desde el exterior de un objeto, sino que son los propios objetos los que deciden c√≥mo se debe operar sobre ellos. Se pasa un mensaje al objeto y este mensaje provoca alg√∫n tipo de acci√≥n o respuesta significativa por parte del objeto. Esto ocurre sin que nos importe c√≥mo realiza el objeto, interiormente, el trabajo.</p>

<p>Las <em>tareas que podemos pedir que un objeto realice</em> (o lo que es lo mismo, los <em>mensajes</em> que el objeto comprende) son los <strong>m√©todos</strong>.</p>

<p>En Javascript, se llama a un m√©todo con la <strong>notaci√≥n punto</strong> (como en Java, C++, Python, Ruby o muchos otros lenguajes). El objeto con el que nos comunicamos se nombra a la izquierda del punto. Por ejemplo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">mi_cadena</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hoy es viernes</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Cadena convertida a may√∫sculas: </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">mi_cadena</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">());</span> 
</code></pre></div></div>

<p>Hemos enviado a un objeto llamado <em>mi_cadena</em> (que es, evidentemente, una cadena de caracteres) el menaje <em>toUpperCase()</em>. La salida por pantalla ser√°:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cadena convertida a may√∫sculas: HOY ES VIERNES
</code></pre></div></div>

<p>Intuitivamente es f√°cil comprender lo que ha ocurrido aqu√≠: al objeto <em>mi_cadena</em> se le ha pedido que nos calcule una versi√≥n de s√≠ mismo con todos los caracteres convertidos en may√∫scula.</p>

<p>T√©cnicamente, lo que hemos hecho se llama <strong>invocar el m√©todo <em>toUpperCase()</em></strong> del objeto mi_cadena.</p>

<p>Otros objetos pueden hacer una interpretaci√≥n un poco diferente de <em>toUpperCase()</em>, o no comprenderlo en absoluto.</p>

<p>Cuando un objeto recibe un mensaje que no conoce, se produce un error. Por lo tanto, hay que conocer qu√© m√©todos son aceptables para un objeto, aunque no se necesita saber como est√°n programados por dentro. Los m√©todos, recuerda, son como los diales del horno microondas: como usuario, tienes que saber qu√© diales existen y c√≥mo usarlos, pero no c√≥mo est√°n construidos.</p>

<h3 id="813-atributos">8.1.3. Atributos</h3>

<p>Los <strong>atributos</strong> de un objeto definen las <strong>caracter√≠sticas</strong> del mismo. Por ejemplo, un atributo del temporizador del microondas deber√≠a ser el n√∫mero de segundos que √©ste debe permanecer activo, y un atributo de un objeto de tipo String debe de ser el n√∫mero de caracteres de que consta la cadena.</p>

<p>Al programador que usa un objeto deber√≠an importarle un bledo los atributos del mismo. √âl (o ella) se encargar√° de usar el objeto a trav√©s de sus m√©todos, y √©stos operar√°n con los atributos, si ello es necesario, de forma totalmente transparente al programador.</p>

<p>Es decir, los atributos raramente son accesibles desde el exterior del objeto, salvo que, por razones de dise√±o, el programador del objeto haya decidido lo contrario.</p>

<h3 id="814-herencia">8.1.4. Herencia</h3>

<p>En programaci√≥n orientada a objetos, unas clases pueden <strong>heredar</strong> de otras.</p>

<p>El concepto de herencia, en este contexto, se parece a la herencia gen√©tica entre seres vivos. Un ser vivo hereda por v√≠a gen√©tica ciertas caracter√≠sticas de sus progenitores. Del mismo modo, una clase puede heredear ciertas caracter√≠sticas de sus clases-madre.</p>

<p>Esto es extraordinariamente √∫til para <strong>reutilizar c√≥digo</strong> y, por lo tanto, facilitar y abaratar el desarrollo y el mantenimiento de las aplicaciones inform√°ticas.</p>

<p>Por ejemplo, si en una aplicaci√≥n tenemos una clase llamada <em>Veh√≠culo</em> con ciertos atributos (<em>matr√≠cula</em>, <em>marca</em>, <em>modelo</em>, etc), podemos crear varias subclases o clases-hijas llamadas <em>Turismo</em>, <em>Cami√≥n</em> o <em>Bicicleta</em>. Todas ellas heredar√°n los atributos y m√©todos de la clase-madre. Es decir, todas tendr√°n <em>matr√≠cula</em>, <em>marca</em> y <em>modelo</em>, por ejemplo.</p>

<p>Pero algunas de las subclases pueden necesitar atributos o m√©todos adicionales (¬øqu√© tal un atributo <em>n√∫mero_plazas</em> para <em>Turismo</em>?), mientras que otras pueden prescindir de algunos atributos o m√©todos (las bicicletas no suelen tener matr√≠cula).</p>

<p>Sin embargo, todas las subclases siguen siendo veh√≠culos, y el c√≥digo fuente que hayamos escrito para la clase <em>Veh√≠culo</em> sigue siendo v√°lido en cada una de ellas, sin necesidad de reescribirlo.</p>

<h2 id="82-los-objetos-en-javascript">8.2. Los objetos en Javascript</h2>

<p>Una vez comprendidos los conceptos b√°sicos de programaci√≥n orientada a objetos, vamos a ver c√≥mo se utilizan en Javascript.</p>

<p>Javascript ha hecho, hist√≥ricamente, una interpretaci√≥n un poco peculiar del paradigma de orientaci√≥n a objetos. De hecho, se dec√≠a de √©l que no era un lenguaje orientado a objetos, sino orientado a prototipos. No importa demasiado lo que esto significa, al menos de momento. Afortunadamente, desde la versi√≥n EC6 del a√±o 2015, Javascript admite definiciones de clases y objetos mucho m√°s convencionales y respetuosas con el paradigma.</p>

<h3 id="821-creaci√≥n-de-objetos-con-javascript">8.2.1. Creaci√≥n de objetos con Javascript</h3>

<p>En JavaScript, <strong>crear un objeto individual</strong> es tan sencillo como declarar una variable con esta sintaxis:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="p">{};</span>
</code></pre></div></div>

<p>Por supuesto, esto crear√° un objeto llamado <em>book</em> que estar√° vac√≠o. Para que el objeto tenga atributos y m√©todos, hay que rellenarlo con c√≥digo. Observa el siguiente ejemplo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">book</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The Lord of the Rings</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">year</span><span class="p">:</span> <span class="mi">1954</span><span class="p">,</span>
  <span class="na">genre</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">epic</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">fantasy</span><span class="dl">'</span><span class="p">],</span>
  <span class="na">getTitle</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nl">getGenres</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">genre</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">genre</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div>

<p>Este objeto se compone de <strong>tres atributos</strong> (<em>title, year, genre</em>) y dos m√©todos (<em>getGenres()</em> y <em>getTitle()</em>).</p>

<p>A los atributos les hemos asignado algunos valores. De este modo, podemos invocar a los m√©todos y comprobar que el objeto responde correctamente. As√≠:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">book</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">();</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">getGenres</span><span class="p">();</span>
</code></pre></div></div>

<p>El resultado ser√°n dos pantallas de tipo <em>alert()</em> donde se nos mostrar√°n los textos ‚ÄúThe Lord of the Rings‚Äù y ‚Äúepic fantasy‚Äù, respectivamente.</p>

<p>En el objeto anterior, tambi√©n podemos acceder y modificar los atributos del objeto. Observa este c√≥digo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">alert</span><span class="p">(</span><span class="nx">book</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
<span class="nx">book</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Harry Potter and the Philosopher's Stone</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">book</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
</code></pre></div></div>

<p>El primer <em>alert()</em> mostrar√° ‚ÄúThe Lord of the Rings‚Äù (exactamente igual que el m√©todo <em>getTitle()</em>), mientras que el segundo <em>alert()</em> mostrar√° ‚ÄúHarry Potter and the Philosopher‚Äôs Stone‚Äù, porque hemos accedido y modificado el atributo <em>title</em> del objeto <em>book</em>.</p>

<h3 id="822-el-objeto-this">8.2.2. El objeto ‚Äúthis‚Äù</h3>

<p>Es posible que te haya llamado la atenci√≥n la presencia de la palabra <strong><em>this</em></strong> en el objeto <em>book</em>.</p>

<p>Esa palabra se refiere <strong>al objeto actual</strong> sobre el que se est√° ejecutando el c√≥digo. En el ejemplo, <em>this</em> es equivalente a <em>book</em>. Si, por ejemplo, le cambi√°semos el nombre a la variable <em>book</em>, no ser√° necesario cambiar el c√≥digo fuente de sus m√©todos porque esos m√©todos se refieren a <em>this</em>, no a <em>book</em>.</p>

<p>Puedes verlo mejor en este ejemplo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">book1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The Lord of the Rings</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">getTitle</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">book2</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">The Hunger Games</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">getTitle</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>En el objeto <em>book1</em> pod√≠amos haber utilizado el identificador <em>book1</em> en lugar de <em>this</em>, y funcionar√≠a exactamente igual. Lo mismo suceden con <em>book2</em>.</p>

<p>¬øCu√°l es la ventaja, entonces, de usar <em>this</em>? Muy pronto aprenderemos a crear m√∫ltiples objetos a partir <em>del mismo c√≥digo fuente</em>. En ese caso, ¬øqu√© tendr√≠amos que poner en el c√≥digo fuente? Si escribimos <em>book1</em>, el c√≥digo ya no funcionar√≠a para <em>book2</em>, y si escribimos <em>book2</em>, no funcionar√≠a para <em>book1</em>. En cambio, escribiendo <em>this</em>, el m√©todo <em>getTitle()</em> funciona con <em>book1</em>, con <em>book2</em> y con cualquier otro objeto que creemos a partir del mismo molde.</p>

<h3 id="823-las-clases-en-javascript">8.2.3. Las clases en Javascript</h3>

<p><em>(<strong>Nota importante</strong>: como hemos dicho al principio, vamos a utilizar la sintaxis de Javascript EC6 y posterior. Si no sabes de qu√© estamos hablando, no te preocupes: solo tienes que mantener tu navegador web actualizado para asegurarte que entiende el Javascript moderno).</em></p>

<p>Como vimos antes, una <strong>clase</strong> en un molde a partir del cual podemos crear objetos id√©nticos (aunque luego cada uno pueda evolucionar de forma independiente del resto).</p>

<p>Por ejemplo, podemos definir una clase <em>Book</em> que tenga en su interior los atributos (<em>title</em>, <em>genre</em>, etc) y los m√©todos (como <em>getTitle()</em>), y a partir de ella podemos crear todos los objetos de tipo <em>Book</em> que necesitemos. As√≠, solo habremos escrito el c√≥digo fuente una vez, y lo podemos reutilizar tantas veces como sea necesario, no cada vez que vayamos a crear un libro.</p>

<p>En Javascript, la clase <em>Book</em> se declara as√≠:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Book</span> <span class="p">{</span>
  <span class="nx">title</span><span class="p">;</span>                  <span class="c1">// Atributo</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">title</span><span class="p">)</span> <span class="p">{</span>    <span class="c1">// M√©todo constructor</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nx">title</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">getTitle</span><span class="p">()</span> <span class="p">{</span>            <span class="c1">// Otro m√©todo</span>
      <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">title</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Esta clase contiene:</p>
<ul>
  <li><strong>Un atributo</strong> (<em>title</em>).</li>
  <li><strong>El m√©todo <em>constructor()</em></strong>, que se ejecutar√° autom√°ticamente al crear cada nuevo objeto del tipo <em>Book</em>. Es importante que se llame exactamente as√≠. Observa que tiene un par√°metro, <em>title</em>.</li>
  <li><strong>El m√©todo <em>getTitle()</em></strong> , que nos mostrar√° el t√≠tulo del libro mediante un <em>alert()</em>. Este m√©todo puede tener el nombre que queramos y podr√≠a hacer cualquier otra cosa con el libro. Nos limitamos al mostrar el t√≠tulo como ejemplo de algo que tiene sentido hacer con un libro.</li>
</ul>

<p>Ahora podemos crear todos los <em>Books</em> que queramos, y todos utilizar√°n el mismo c√≥digo y tendr√°n los mismos atributos. Por ejemplo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">book1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="dl">'</span><span class="s1">The Lord of the Rings</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">book2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="dl">'</span><span class="s1">The Hunger Games</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">book3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Book</span><span class="p">(</span><span class="dl">'</span><span class="s1">The Neverending Story</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Acabamos de crear tres objetos de tipo <em>Book</em> diferentes. Observa c√≥mo se usa la palabra <em>new</em> delante del nombre de la clase y como, al crear cada libro, debemos pasar su t√≠tulo como par√°metro. <em>Esto es as√≠ porque el constructor de la clase ten√≠a un par√°metro</em>, el t√≠tulo del libro.</p>

<p>Ahora podemos usar los m√©todos de esos objetos, y cada uno actuar√° sobre su propio conjunto de atributos. Por ejemplo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">book1</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">();</span>
<span class="nx">book2</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">();</span>
<span class="nx">book3</span><span class="p">.</span><span class="nx">getTitle</span><span class="p">();</span>
</code></pre></div></div>

<p>Este c√≥digo provocar√° la ejecuci√≥n de tres <em>alerts</em> consecutivos, que nos mostrar√°n, uno tras otro, los t√≠tulos de nuestros tres libros.</p>

<p>(Nota: por convenio, el nombre de la clase suele escribirse con may√∫scula inicial, mientras que el nombre de los atributos, m√©todos y objetos individuales se escribe empezando en min√∫sculas).</p>

<h3 id="824-herencia-en-javascript">8.2.4. Herencia en Javascript</h3>

<p><em>(Nuevamente, nos referiremos a c√≥mo se maneja la herencia en las versiones recientes de Javascript (EC6 o posterior). ¬°Aseg√∫rate de tener tu navegador web actualizado!)</em></p>

<p>Cuando se crea una clase, se puede hacer desde cero o bien se puede basar en otra clase preexistente. En este segundo caso, la nueva clase <strong>hereda los atributos y los m√©todos</strong> de la <strong>clase-madre</strong> o <strong>superclase</strong>, a los que puede a√±adir sus propios atributos y m√©todos.</p>

<p>Esto permite reutilizar grandes cantidades de c√≥digo de forma bien organizada y sin necesidad de volver a escribirlo.</p>

<p>Lo vamos a entender mejor con otro ejemplo. <strong>Vamos a crear una clase nueva</strong>, en esta ocasi√≥n llamada <strong><em>Person</em></strong>. Tendr√° dos atributos (<em>name</em> y <em>age</em>) y un m√©todo (<em>getName()</em>), adem√°s del constructor:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="c1">// Atributos</span>
  <span class="nx">name</span><span class="p">;</span>   
  <span class="nx">age</span><span class="p">;</span>
  <span class="c1">// M√©todo constructor</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">,</span> <span class="nx">age</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="p">{</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">};</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="nx">age</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// Otros m√©todos</span>
  <span class="nx">getName</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Esta persona se llama: </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">firstname</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">.</span><span class="nx">lastname</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>En este caso, pasamos tres par√°metros a la funci√≥n constructora. Dos de ellos (<em>firstname</em> y <em>lastname</em>) los agrupamos dentro de un solo atributo (<em>name</em>). Por ese motivo, en el m√©todo <em>getName()</em> tenemos que acceder a cada uno de los elementos de <em>name</em> por separado. Podr√≠amos haber utilizado dos atributos diferenciados, pero hemos preferido hacerlo as√≠ para darle un poco de variedad a los ejemplos y para que veas que el n√∫mero de par√°metros del constructor no tiene por qu√© coincidir con el n√∫mero de atributos.</p>

<p>Ahora, por supuesto, podemos <strong>crear todos los objetos que queramos a partir de la clase <em>Person</em></strong>. Por ejemplo:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Juan</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">P√©rez</span><span class="dl">'</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Ana</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">L√≥pez</span><span class="dl">'</span><span class="p">,</span> <span class="mi">37</span><span class="p">);</span>
</code></pre></div></div>

<p>A continuaci√≥n, podemos <strong>crear nuestras clases-hija</strong> o <strong>clases derivadas</strong> que hereden de <em>Person</em>. Observa detenidamente este c√≥digo y enseguida entender√°s c√≥mo funciona la herencia:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Student</span> <span class="kd">extends</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="c1">// Atributos adicionales</span>
  <span class="nx">course</span><span class="p">;</span>
  <span class="c1">// M√©todo constructor</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">course</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">course</span> <span class="o">=</span> <span class="nx">course</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// Otros m√©todos</span>
  <span class="nx">getCourse</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Este estudiante est√° matriculado en el curso: </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">course</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nx">Teacher</span> <span class="kd">extends</span> <span class="nx">Person</span> <span class="p">{</span>
  <span class="c1">// Atributos adcicionales</span>
  <span class="nx">speciality</span><span class="p">;</span>
  <span class="c1">// M√©todo constructor</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">,</span> <span class="nx">age</span><span class="p">,</span> <span class="nx">speciality</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">firstname</span><span class="p">,</span> <span class="nx">lastname</span><span class="p">,</span> <span class="nx">age</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">speciality</span> <span class="o">=</span> <span class="nx">speciality</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="c1">// Otros m√©todos</span>
  <span class="nx">getSpeciality</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">La especialidad de este profesor/a es: </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">speciality</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>¬øNo es cierto que los estudiantes y los profesores suelen ser personas (en la mayor√≠a de los casos, al menos)? Pues bien, aqu√≠ hemos <strong>definido dos nuevas clases llamadas <em>Student</em> y <em>Teacher</em></strong>. Pero no las hemos definido <em>completamente</em>, sino que hemos <strong>reutilizado la clase <em>Person</em></strong>.</p>

<p>Y lo hemos hecho indicando que <strong>tanto <em>Student</em> como <em>Teacher</em> heredan de la clase <em>Person</em></strong>. Esto se indica con la palabra <strong><em>extends</em></strong> en la declaraci√≥n de la clase. Es decir, que las dos nuevas clases heredan todo el contenido de su clase-madre.</p>

<p>Luego, simplemente, hemos a√±adido los nuevos atributos y nuevos m√©todos que existen en esas clases pero no tienen sentido en la clase-madre.</p>

<p>Observa bien los constructores de <em>Student</em> y <em>Teacher</em>. Ah√≠ encontrar√°s la palabra <strong><em>super</em></strong>. En el siguiente apartado veremos lo que significa. El resto del c√≥digo es bastante trivial.</p>

<p>Ahora podemos hacer algo como esto y funcionar√°:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">person1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Person</span><span class="p">(</span><span class="dl">'</span><span class="s1">Juan</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">P√©rez</span><span class="dl">'</span><span class="p">,</span> <span class="mi">25</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">person2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Student</span><span class="p">(</span><span class="dl">'</span><span class="s1">Ana</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">L√≥pez</span><span class="dl">'</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="dl">'</span><span class="s1">1¬∫ bachillerato A</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">person3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Teacher</span><span class="p">(</span><span class="dl">'</span><span class="s1">Laura</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">S√°nchez</span><span class="dl">'</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Matem√°ticas</span><span class="dl">'</span><span class="p">);</span>
</code></pre></div></div>

<p>Acabamos de crear tres personas diferentes. La primera es una persona gen√©rica, la segunda es una estudiante (y tiene un atributo y un m√©todo extra del que carecen las personas gen√©ricas) y la tercera es una profesora (con su propio atributo y m√©todo extra).</p>

<p>(Por supuesto, los estudiantes y los profesores podr√≠an tener m√°s atributos y m√©todos adicionales, no solo uno).</p>

<p>Por lo tanto, los tres objetos tendr√°n un m√©todo <em>getName()</em>, pero solo el <em>Student</em> tendr√° un m√©todo <em>getCourse()</em> y solo el <em>Teacher</em> tendr√° un m√©todo <em>getSpeciality()</em>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">person1</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>        <span class="c1">// Funciona</span>
<span class="nx">person2</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>        <span class="c1">// Funciona</span>
<span class="nx">person3</span><span class="p">.</span><span class="nx">getName</span><span class="p">();</span>        <span class="c1">// Funciona</span>

<span class="nx">person1</span><span class="p">.</span><span class="nx">getCourse</span><span class="p">();</span>      <span class="c1">// NO FUNCIONA. person1 no es un Student</span>
<span class="nx">person2</span><span class="p">.</span><span class="nx">getCourse</span><span class="p">();</span>      <span class="c1">// Funciona</span>
<span class="nx">person3</span><span class="p">.</span><span class="nx">getCourse</span><span class="p">();</span>      <span class="c1">// NO FUNCIONA. person3 no es un Student</span>

<span class="nx">person1</span><span class="p">.</span><span class="nx">getSpeciality</span><span class="p">();</span>  <span class="c1">// NO FUNCIONA. person1 no es un Teacher</span>
<span class="nx">person2</span><span class="p">.</span><span class="nx">getSpeciality</span><span class="p">();</span>  <span class="c1">// NO FUNCIONA. person2 no es un Teacher</span>
<span class="nx">person3</span><span class="p">.</span><span class="nx">getSpeciality</span><span class="p">();</span>  <span class="c1">// Funciona</span>
</code></pre></div></div>

<h3 id="825-el-objeto-super">8.2.5. El objeto ‚Äúsuper‚Äù</h3>

<p>En los constructores de las clases <em>Student</em> y <em>Teacher</em> del apartado anterior hemos usado la palabra <strong><em>super</em></strong>. ¬øQu√© significa exactamente?</p>

<p><strong><em>super</em></strong> es una <strong>referencia a la superclase</strong>.</p>

<p>Por lo tanto, al escribir <code class="language-plaintext highlighter-rouge">super(firstname, lastname, age)</code>, estamos <strong>invocando al constructor de la superclase <em>Person</em></strong>. Esto es <strong>obligatorio</strong> hacerlo en todos los constructores de las clases derivadas.</p>

<p>Del mismo modo, si escribi√©ramos algo como <code class="language-plaintext highlighter-rouge">super.getName()</code>, estar√≠amos invocando al m√©todo getName() de la clase madre, no de la clase actual. Esto, por supuesto, no es obligatorio, y solo lo haremos si realmente nuestro c√≥digo lo necesita.</p>

<h3 id="826-algunos-aspectos-avanzados">8.2.6. Algunos aspectos avanzados</h3>

<p>Como ves, la programaci√≥n orientada a objetos no es m√°s que una manera particular de organizar el c√≥digo fuente en clases que se ha revelado muy √∫til a la hora de minimizar el tiempo y el esfuerzo para construir y mantener proyectos grandes.</p>

<p>La programaci√≥n orientada a objetos tiene otras caracter√≠sticas m√°s avanzadas que vamos a describir muy brevemente, no porque sean complicadas de entender o de usar, sino porque solo tienen sentido cuando trabajas en proyectos muy grandes y con un conjunto de clases muy elaborado.</p>

<p>Como de momento solo estamos aprendiendo, a√∫n no necesitamos profundizar en ello. Ya lo har√°s cuando llegue tu momento y te lo pida el cuerpo. Lo que s√≠ es importante es que estos conceptos te suenen para que puedas buscar informaci√≥n cuando lo necesites.</p>

<ul>
  <li>
    <p><strong>Clases abstractas</strong>: son clases de las que <em>no se pueden crear objetos</em>.</p>

    <p>¬øEntonces para qu√© sirven?, te preguntar√°s. Muy sencillo: para hacer herencia a partir de ellas.</p>

    <p>Normalmente, las clases abstractas son clases muy gen√©ricas de las que no tiene sentido crear un objeto, porque ese objeto apenas ser√≠a funcional. La clase abstracta se limita a proporcionar un conjunto de atributos y m√©todos que heredan todas las clases-hija.</p>
  </li>
  <li>
    <p><strong>Herencia m√∫ltiple</strong>: ocurre cuando una clase hereda de varias clases-madre a la vez. Proporciona una enorme flexibilidad a la hora de dise√±ar nuestra arquitectura de clases, pero tambi√©n provoca no pocos problemas. Muchos lenguajes, entre ellos Javascript, no la permiten. Otros, como C++ o Python, s√≠.</p>
  </li>
  <li>
    <p><strong>Visibilidad</strong>: los m√©todos y atributos de los objetos se pueden hacer <strong>p√∫blicos o privados</strong>. Si son p√∫blicos, quiere decir que pueden usarse desde cualquier lugar del c√≥digo fuente. Si son privados, quiere decir que solo pueden usarse desde el c√≥digo escrito dentro de la propia clase.</p>

    <p>Esto se hace para que el objeto funcione como una caja negra, cuyas ‚Äútripas‚Äù sean invisibles al exterior.</p>

    <p>Generalmente, los atributos de una clase suelen hacerse privados, mientras que la mayor parte de los m√©todos suelen ser p√∫blicos, pero puede haber tantas excepciones a esta regla que ser√≠a imposible enumerarlas.</p>
  </li>
  <li>
    <p><strong>Sobrecarga</strong>. Sobrecargar un m√©todo consiste en crear varias versiones del mismo que se diferencian por el n√∫mero de par√°metros. Puede llegar a ser muy √∫til en programas muy grandes con jerarqu√≠as de clases muy complejas.</p>
  </li>
  <li>
    <p><strong>Polimorfismo</strong>. Se llama <em>polimorfismo</em> a la capacidad de los lenguajes orientados a objetos de que existan varias versiones diferentes de un mismo elemento (m√©todos, generalmente) que se nombran del mismo modo pero se comportan de modo diferente.</p>

    <p>Probablemente sigues sin entender qu√© narices significa la frase anterior aunque la hayas le√≠do varias veces, ¬øverdad?</p>

    <p>Tranquilidad, porque a todo el mundo le ocurre la primera vez que le mencionan el t√©rmino polimorfismo. Te lo explico con un ejemplo, pero tampoco te preocupes demasiado: no es algo que vayas a usar hasta dentro de muuucho tiempo.</p>

    <p>Imagina que tenemos una superclase llamada <em>Person</em> con sus clases derivadas como <em>Student</em> o <em>Teacher</em>. Es decir, como en los ejemplos anteriores. Hasta aqu√≠, bien.</p>

    <p>Ahora sigue imaginando que tienes un m√©todo, el que sea, en la clase <em>Person</em>. Por ejemplo, <em>getProfession()</em>. Todos los objetos de tipo <em>Student</em> o <em>Teacher</em> heredar√°n el m√©todo <em>getProfession()</em>. Ahora bien, ¬øtiene sentido que ese m√©todo sea el mismo para <em>Student</em> que para <em>Teacher</em>? Probablemente no. ¬°Para empezar, el estudiante ni siquiera tiene profesi√≥n (a√∫n)!</p>

    <p>Una cosa muy interesante que pueden hacer las clases-hija es <strong>sobreescribir</strong> los m√©todos, es decir, coger un m√©todo heredado y cambiar su c√≥digo fuente. As√≠, puedes tener diferentes versiones del m√©todo <em>getProfession()</em>, una para cada clase de la jerarqu√≠a.</p>

    <p>Y ya lo tienes. Eso es una manifestaci√≥n del <strong>polimorfismo</strong>: tener un m√©todo (<em>getProfession()</em>) con diferentes formas o implementaciones. Seg√∫n cu√°l sea el objeto con el que lo llames, se ejecutar√° una versi√≥n u otra del m√©todo. Esto puede parecer una chorrada, pero con jerarqu√≠as de clases muy complejas ayuda a resolver situaciones muy chungas. Por ejemplo: ¬øqu√© pasa si un profesor es, a su vez, estudiante en alg√∫n curso? Seg√∫n el papel de esa persona en cada momento, habr√° que ejecutar una versi√≥n diferente de <em>getProfession()</em>.</p>

    <p>Si has llegado hasta aqu√≠ en esta explicaci√≥n, puedes volver a leer la definici√≥n de polimorfismo y seguramente s√≠ la entender√°s.</p>
  </li>
</ul>

<h3 id="827-objetos-predefinidos-de-javascript">8.2.7. Objetos predefinidos de Javascript</h3>

<p>Ahora que ya conoces un poco sobre la programaci√≥n orientada a objetos y c√≥mo trabajar con ella en Javascript, puedo confesarte un secreto: <em>has estado utilizando objetos desde el primer momento en el que empezaste a trabajar con Javascript</em>.</p>

<p>As√≠ es. Como Javascript es un lenguaje orientado a objetos, hay un mont√≥n de objetos predefinidos que existen en todos los programas Javascript para que los uses si los necesitas.</p>

<p>Por ejemplo, cuando hac√≠as <em>Math.rand()</em>, estabas invocando al m√©todo <em>rand()</em> del <strong>objeto <em>Math</em></strong>. Este objeto es un poco especial, porque no necesitas crear una instancia. Es decir, no necesitas hacer <code class="language-plaintext highlighter-rouge">var math = new Math()</code> para usarlo. Con algunas clases ocurre esto, y se llaman <strong>clases est√°ticas</strong>.</p>

<p>Otro objeto predefinido que seguro que has utilizado sin saber que lo era es el <strong>objeto <em>window</em></strong>. En este caso, es un objeto normal, no est√°tico, pero no tenemos que crearlo con <code class="language-plaintext highlighter-rouge">var window = new Window()</code> porque Javascript lo crea autom√°ticamente para nosotros cada vez que abrimos una ventana del navegador web.</p>

<p>De hecho, los m√©todos <em>alert()</em> o <em>confirm()</em> son, en realidad, m√©todos del objeto <em>window</em>. Es decir, podemos escribir <em>window.alert()</em> o <em>window.confirm()</em>, y funcionar√≠an exactamente igual. Lo que ocurre es que, si no indicamos un objeto delante del nombre del m√©todo, Javascript interpretar√° que se trata de un m√©todo del objeto <em>window</em>.</p>

<p>Y as√≠ hay otro buen pu√±ado de objetos predefinidos cuya existencia te conviene conocer. Algunos de ellos son:</p>

<ul>
  <li><strong>Math</strong>: contiene un mont√≥n de m√©todos para operaciones matem√°ticas.</li>
  <li><strong>window</strong>: m√©todos y atributos para manejar la ventana del navegador donde se ejecuta la aplicaci√≥n.</li>
  <li><strong>Date</strong>: para trabajar con fechas y horas.</li>
  <li><strong>Number</strong>: operaciones relacionadas con n√∫meros.</li>
  <li><strong>String</strong>: para trabajar con cadenas de caracteres.</li>
  <li><strong>Array</strong>: para trabajar con arrays.</li>
  <li><strong>JSON</strong>: para trabajar con datos complejos codificados como JSON, un formato de intercambio de informaci√≥n muy utilizado con Javascript y otros lenguajes.</li>
  <li><strong>Error</strong>: para manipular los errores de ejecuci√≥n y obtener informaci√≥n sobre ellos.</li>
</ul>

<h2 id="83-un-ejemplo-completo">8.3. Un ejemplo completo</h2>

<p>Vamos a terminar esta peque√±a introducci√≥n a la programaci√≥n orientada a objetos mostrando un ejemplo completo desarrollado con Javascript.</p>

<p>Puedes considerarlo un ejercicio resuelto. Es decir: <em>primero puedes intentar hacerlo t√∫, y luego comparar tu intento con mi soluci√≥n</em>. No es necesario que tu soluci√≥n y la m√≠a sean id√©nticas, desde luego, puesto que siempre hay varias formas correctas de hacer lo mismo.</p>

<h4 id="lo-que-queremos-hacer">Lo que queremos hacer</h4>

<p>Este es un ejemplo cl√°sico para practicar la herencia entre clases, porque resulta f√°cil de entender y de programar.</p>

<p>Se trata de escribir un programa que sea capaz de calcular ciertas magnitudes, como el √°rea y el per√≠metro, de muchos tipos diferentes de figuras geom√©tricas. Empezaremos por c√≠rculos, cuadrados y rect√°ngulos, pero podr√≠amos extender el programa con facilidad para abarcar otras figuras.</p>

<p>Observa el diagrama de aqu√≠ abajo. Se trata de un <strong>diagrama de clases</strong>, una representaci√≥n gr√°fica de las clases que existen en un programa y c√≥mo heredan unas de otras. No te asustes: es sencillo leer un diagrama de clases. M√°s abajo te doy algunas pistas.</p>

<p><img src="/docs/prog-y-3d/_site/assets/images/06-01-figuras-geometricas.jpg" alt="Diagrama de clases - Figuras geom√©tricas" /></p>

<p>Cada ‚Äúcaja‚Äù de este diatrama es una clase, y en cada clase se indica su nombre, sus atributos y sus m√©todos. Delante de cada atributo y m√©todo ver√°s un s√≠mbolo: + significa que ese atributo o m√©todo es p√∫blico, es decir, accesible desde otras clases, y - significa que es privado, accesible solo desde la propia clase.</p>

<p>Si no se indica lo contrario, Javascript considerar√° que los atributos y m√©todos son p√∫blicos. Es decir, todos los atributos y m√©todos que hemos usado hasta ahora son p√∫blicos. En sistemas complejos, es importante distinguir los atributos y m√©todos p√∫blicos de los privados.</p>

<p>Adem√°s, el diagrama expresa c√≥mo heredan las clases unas de otras. La clase <em>Figura</em> es la madre de toda la jerarqu√≠a, tambi√©n llamada <strong>superclase</strong>. Las clases <em>C√≠rculo</em> y <em>Rect√°ngulo</em> son hijas de <em>Figura</em>, es decir, <strong>subclases</strong> o <strong>clases derivadas</strong>. Por √∫ltimo, la clase <em>Cuadrado</em> es subclase de <em>Rect√°ngulo</em>.</p>

<p>Por supuesto, pod√≠amos haber a√±adido m√°s figuras, pero con estas ya tienes entretenimiento para un rato. Observa, por cierto, como <em>Cuadrado</em> hereda de <em>Rect√°ngulo</em>, y no directamente de <em>Figura</em>.</p>

<p>El programa que vamos a escribir tiene que incluir lo siguiente:</p>

<ol>
  <li><strong>La superclase <em>Figura</em></strong> (figura geom√©trica), que contendr√°:
    <ul>
      <li>Dos atributos: color (String) y relleno (boolean).</li>
      <li>Un constructor que recibir√° dos argumentos para inicializar los atributos.</li>
      <li><em>Getters</em> y <em>setters</em>, es decir, m√©todos para consultar el valor de los atributos (<em>getColor()</em> y <em>getRelleno()</em>) y para establecer el valor de los atributos (<em>setColor()</em> y <em>setRelleno()</em>). Entiendes por qu√© se llaman <em>getters</em> y <em>setters</em>, ¬øverdad?</li>
      <li>Un m√©todo <em>toString()</em> que devolver√° la cadena: ‚ÄúSoy una figura de color xxx y rellena/no rellena‚Äù, seg√∫n lo que valgan los atributos en ese momento.</li>
    </ul>
  </li>
  <li><strong>Una subclase de <em>Figura</em> llamada <em>C√≠rculo</em></strong>. La clase <em>C√≠rculo</em> contendr√°:
    <ul>
      <li>Un atributo llamado <em>radio</em> (un n√∫mero real).</li>
      <li>Un constructor, como se ve en el diagrama de clases.</li>
      <li><em>Getter</em> y <em>setter</em> para el radio.</li>
      <li>Los m√©todos <em>getArea()</em> y <em>getPerimetro()</em>. Si no recuerdas como calcular el √°rea y el per√≠metro (o circunferencia) de un c√≠rculo‚Ä¶ bueno, ¬øpara qu√© est√° la wikipedia?</li>
      <li>El m√©todo <em>toString()</em> heredado de <em>Figura</em> se debe sobreescribir. Ahora, el m√©todo devolver√°: ‚ÄúSoy un c√≠rculo con radio = x, esta es mi superclase: yyy‚Äù, donde yyy es la salida del m√©todo <em>toString()</em> de la superclase de <em>Figura</em>.</li>
    </ul>
  </li>
  <li><strong>Una subclase de <em>Figura</em> llamada <em>Rect√°ngulo</em></strong>. La clase <em>Rect√°ngulo</em> se comportar√° igual que <em>C√≠rculo</em>, con las l√≥gicas diferencias en atributos y m√©todos <em>getters</em> y <em>setters</em>. Mira el diagrama de clases si tienes alguna duda.</li>
  <li>
    <p><strong>Una subclase de <em>Rect√°ngulo</em> llamada <em>Cuadrado</em></strong>. Esta clase pod√≠a haberse modelado como subclase de <em>Figura</em>, pero es m√°s c√≥modo hacerlo como subclase de <em>Rect√°ngulo</em>, porque podemos aprovechar casi todo el c√≥digo de su superclase. Basta con crear el siguiente constructor:</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">Cuadrado</span> <span class="p">{</span>
   <span class="kd">constructor</span><span class="p">(</span><span class="nx">side</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">super</span><span class="p">(</span><span class="nx">side</span><span class="p">,</span> <span class="nx">side</span><span class="p">);</span>  <span class="c1">// Llama al constructor de la superclase Rectangulo</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></div>    </div>

    <ul>
      <li>Adem√°s de crear el constructor, sobreescribiremos, como en los otros casos, el m√©todo <em>toString()</em>.</li>
      <li>Atenci√≥n, pregunta: ¬ønecesitar√°s sobreescribir <em>getArea()</em> y <em>getPerimetro()</em>, o funcionar√°n tal y como han sido heredados de <em>Rect√°ngulo</em>? Haz la prueba a ver qu√© pasa‚Ä¶</li>
      <li>Tambi√©n sobreescribiremos los m√©todos <em>setAlto()</em> y <em>setAncho()</em> para evitar que el largo y el ancho del cuadrado puedan tener dimensiones diferentes.</li>
    </ul>
  </li>
  <li>Finalmente, tendremos que escribir un fragmento de c√≥digo para testear que todo lo anterior funcione, creando unas cuantas figuras de cada tipo y llamando a algunos m√©todos.</li>
</ol>

<h4 id="nuestra-implementaci√≥n">Nuestra implementaci√≥n</h4>

<p>En la implementaci√≥n de la clase <em>Figura</em> vamos a usar comentarios en formato <strong>javadoc</strong>. Es una manera de escribir los comentarios que te vas a encontrar a menudo por ah√≠, puesto que se trata de un est√°ndar de la industria.</p>

<p>El resto de clases son tan sencillas que nos hemos ahorrado los comentarios para no complicar innecesariamente el c√≥digo fuente.</p>

<p>Como en otras ocasiones, tu trabajo aqu√≠ es intentar resolver el ejercicio antes de ver la soluci√≥n. Y, una vez que empieces a leer la soluci√≥n, hacerlo poco a poco y sin prisas.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>

<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;title&gt;</span>Jerarqu√≠a de figuras geom√©tricas<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="cm">/**
         * Clase Figura (figura geom√©trica gen√©rica)
         */</span>
        <span class="kd">class</span> <span class="nx">Figura</span> <span class="p">{</span>

            <span class="nx">color</span><span class="p">;</span>    <span class="c1">// Atributos</span>
            <span class="nx">relleno</span><span class="p">;</span>

            <span class="cm">/**
             * Constructor con par√°metros.
             *
             * @param c El color de la figura.
             * @param r Indica si la figura est√° rellena o no.
             */</span>
            <span class="kd">constructor</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">relleno</span> <span class="o">=</span> <span class="nx">r</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="cm">/**
             * Determina el color de la figura.
             *
             * @return El color de la figura.
             */</span>
            <span class="nx">getColor</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="cm">/**
             * Establece el color de la figura.
             *
             * @param c El color de la figura.
             */</span>
            <span class="nx">setColor</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">c</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="cm">/**
             * Determina si la figura est√° o no rellena.
             *
             * @return True si la figura est√° rellena, false si no est√°.
             */</span>
            <span class="nx">estaRelleno</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">relleno</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="cm">/**
             * Cambia el valor del relleno de la figura.
             *
             * @param r True para que la figura pase a estar rellena,
             *          false para que no lo est√©.
             */</span>
            <span class="nx">setRelleno</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">relleno</span> <span class="o">=</span> <span class="nx">r</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="cm">/**
             * Devuelve una cadena descriptiva del objeto actual.
             * @return La cadena con la descripci√≥n del objeto.
             */</span>
            <span class="nx">toString</span><span class="p">()</span> <span class="p">{</span>
                <span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Soy una figura de color </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> y </span><span class="dl">"</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">relleno</span><span class="p">)</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">estoy rellena</span><span class="dl">"</span><span class="p">;</span>
                <span class="k">else</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">no estoy rellena</span><span class="dl">"</span><span class="p">;</span>
                <span class="k">return</span> <span class="nx">s</span><span class="p">;</span>
            <span class="p">}</span>

        <span class="p">}</span>

        <span class="kd">class</span> <span class="nx">Circulo</span> <span class="kd">extends</span> <span class="nx">Figura</span> <span class="p">{</span>

            <span class="nx">radio</span><span class="p">;</span>   <span class="c1">// Atributo</span>

            <span class="kd">constructor</span><span class="p">(</span><span class="nx">color</span><span class="p">,</span> <span class="nx">relleno</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">super</span><span class="p">(</span><span class="nx">color</span><span class="p">,</span> <span class="nx">relleno</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">radio</span> <span class="o">=</span> <span class="nx">r</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">getRadio</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">radio</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">setRadio</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">radio</span> <span class="o">=</span> <span class="nx">r</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">getArea</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radio</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radio</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">getPerimetro</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">radio</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">toString</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="dl">"</span><span class="s2">Soy un c√≠rculo de radio </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">radio</span> <span class="o">+</span>
                    <span class="dl">"</span><span class="s2"> y esta es mi superclase: </span><span class="dl">"</span> <span class="o">+</span> <span class="k">super</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>


        <span class="kd">class</span> <span class="nx">Rectangulo</span> <span class="kd">extends</span> <span class="nx">Figura</span> <span class="p">{</span>

            <span class="nx">ancho</span><span class="p">;</span>   <span class="c1">// Atributos</span>
            <span class="nx">alto</span><span class="p">;</span>

            <span class="kd">constructor</span><span class="p">(</span><span class="nx">color</span><span class="p">,</span> <span class="nx">relleno</span><span class="p">,</span> <span class="nx">an</span><span class="p">,</span> <span class="nx">al</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">super</span><span class="p">(</span><span class="nx">color</span><span class="p">,</span> <span class="nx">relleno</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">ancho</span> <span class="o">=</span> <span class="nx">an</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">alto</span> <span class="o">=</span> <span class="nx">al</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">getAncho</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">ancho</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">setAncho</span><span class="p">(</span><span class="nx">an</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">ancho</span> <span class="o">=</span> <span class="nx">an</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">getAlto</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">alto</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">setAlto</span><span class="p">(</span><span class="nx">al</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">alto</span> <span class="o">=</span> <span class="nx">al</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">getArea</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">ancho</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">alto</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">getPerimetro</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">ancho</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">alto</span><span class="p">;</span>
            <span class="p">}</span>

            <span class="nx">toString</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="dl">"</span><span class="s2">Soy un rect√°ngulo de base </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">ancho</span> <span class="o">+</span>
                    <span class="dl">"</span><span class="s2"> y altura </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">alto</span> <span class="o">+</span>
                    <span class="dl">"</span><span class="s2"> y esta es mi superclase: </span><span class="dl">"</span> <span class="o">+</span> <span class="k">super</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kd">class</span> <span class="nx">Cuadrado</span> <span class="kd">extends</span> <span class="nx">Rectangulo</span> <span class="p">{</span>

            <span class="kd">constructor</span><span class="p">(</span><span class="nx">color</span><span class="p">,</span> <span class="nx">relleno</span><span class="p">,</span> <span class="nx">lado</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">super</span><span class="p">(</span><span class="nx">lado</span><span class="p">,</span> <span class="nx">lado</span><span class="p">,</span> <span class="nx">color</span><span class="p">,</span> <span class="nx">relleno</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nx">setAncho</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">super</span><span class="p">.</span><span class="nx">setAncho</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
                <span class="k">super</span><span class="p">.</span><span class="nx">setAlto</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nx">setAlto</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">super</span><span class="p">.</span><span class="nx">setAncho</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
                <span class="k">super</span><span class="p">.</span><span class="nx">setAlto</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="nx">toString</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="dl">"</span><span class="s2">Soy un cuadrado de lado </span><span class="dl">"</span> <span class="o">+</span> <span class="k">super</span><span class="p">.</span><span class="nx">getAncho</span><span class="p">()</span> <span class="o">+</span>
                    <span class="dl">"</span><span class="s2"> y esta es mi superclase: </span><span class="dl">"</span> <span class="o">+</span> <span class="k">super</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c1">// --------------------------------------------------------------------------------</span>
        <span class="c1">// El siguiente c√≥digo sirve para TESTEAR la jerarqu√≠a de clases</span>
        <span class="c1">// --------------------------------------------------------------------------------</span>

        <span class="c1">// Primero, vamos a crear una figura con cada constructor y a llamar a toString()</span>
        <span class="kd">var</span> <span class="nx">fig1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Figura</span><span class="p">(</span><span class="dl">"</span><span class="s2">rojo</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">fig1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="kd">var</span> <span class="nx">circulo1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Circulo</span><span class="p">(</span><span class="dl">"</span><span class="s2">azul</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mf">1.5</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">circulo1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="kd">var</span> <span class="nx">rect1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Rectangulo</span><span class="p">(</span><span class="dl">"</span><span class="s2">amarillo</span><span class="dl">"</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mf">8.3</span><span class="p">,</span> <span class="mf">2.4</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">rect1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="kd">var</span> <span class="nx">cuadrado1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cuadrado</span><span class="p">(</span><span class="dl">"</span><span class="s2">verde</span><span class="dl">"</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="mf">3.1</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">cuadrado1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>

        <span class="c1">// Probamos ahora algunos m√©todos sobre los objetos anteriores</span>
        <span class="c1">// y volvemos a llamar a toString() para comprobar que </span>
        <span class="c1">// los atributos han cambiado como se esperaba.</span>
        <span class="nx">fig1</span><span class="p">.</span><span class="nx">setColor</span><span class="p">(</span><span class="dl">"</span><span class="s2">blanco</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">fig1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="nx">circulo1</span><span class="p">.</span><span class="nx">setRadio</span><span class="p">(</span><span class="mf">2.5</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">El √°rea del c√≠rculo es </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">circulo1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">circulo1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="nx">rect1</span><span class="p">.</span><span class="nx">setAlto</span><span class="p">(</span><span class="mf">3.0</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">El per√≠metro del rect√°ngulo es </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">rect1</span><span class="p">.</span><span class="nx">getPerimetro</span><span class="p">());</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">rect1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
        <span class="nx">cuadrado1</span><span class="p">.</span><span class="nx">setAncho</span><span class="p">(</span><span class="mf">5.1</span><span class="p">);</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">La base del cuadrado es </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">cuadrado1</span><span class="p">.</span><span class="nx">getAlto</span><span class="p">()</span> <span class="o">+</span> <span class="dl">"</span><span class="s2"> y su altura es </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">cuadrado1</span><span class="p">.</span><span class="nx">getAncho</span><span class="p">());</span>
        <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">El √°rea del cuadrado es </span><span class="dl">"</span> <span class="o">+</span> <span class="nx">cuadrado1</span><span class="p">.</span><span class="nx">getArea</span><span class="p">());</span>
        <span class="nx">alert</span><span class="p">(</span><span class="nx">cuadrado1</span><span class="p">.</span><span class="nx">toString</span><span class="p">());</span>
    <span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>
:ET