I"Ë<h2 class="no_toc" id="55-artisan-la-consola-que-mola">5.5. Artisan, la consola que mola</h2>

<ul id="markdown-toc">
  <li><a href="#551-qu√©-es-artisan-y-c√≥mo-se-utiliza" id="markdown-toc-551-qu√©-es-artisan-y-c√≥mo-se-utiliza">5.5.1. ¬øQu√© es Artisan y c√≥mo se utiliza?</a></li>
  <li><a href="#552-un-ejemplo-pr√°ctico-crear-un-controlador" id="markdown-toc-552-un-ejemplo-pr√°ctico-crear-un-controlador">5.5.2. Un ejemplo pr√°ctico: crear un controlador</a></li>
  <li><a href="#553-artisan-con-docker" id="markdown-toc-553-artisan-con-docker">5.5.3. Artisan con Docker</a></li>
  <li><a href="#554-comandos-principales-de-artisan" id="markdown-toc-554-comandos-principales-de-artisan">5.5.4. Comandos principales de Artisan</a></li>
</ul>

<p>Laravel viene de serie con una utilidad de consola de comandos llamada <strong><em>Artisan</em></strong>. Con <em>Artisan</em> se automatizan montones de tareas habituales del trabajo con Laravel, as√≠ que acost√∫mbrate a tener siempre abierto un terminal de texto en el directorio ra√≠z de tu aplicaci√≥n.</p>

<p>En esta secci√≥n vamos a aprender a utilizar los comandos b√°sicos de Artisan.</p>

<h3 id="551-qu√©-es-artisan-y-c√≥mo-se-utiliza">5.5.1. ¬øQu√© es Artisan y c√≥mo se utiliza?</h3>

<p>Como hemos dicho, <strong>Artisan</strong> es una herramienta de consola, escrita en PHP, que viene con Laravel para <strong>ayudarte a realizar tareas cotidianas en tu aplicaci√≥n de forma automatizada</strong>.</p>

<p>Algunas de esas tareas que automatiza Artisan son:</p>

<ul>
  <li>Generar esqueletos de controladores y modelos.</li>
  <li>Crear migraciones de bases de datos (para manipular la estructura de las tablas, como enseguida veremos).</li>
  <li>Rellenar la BD con datos de prueba.</li>
  <li>Hacer el enrutamiento.</li>
  <li>Configurar la aplicaci√≥n.</li>
  <li>Crear bater√≠as de pruebas.</li>
  <li>Gestionar la cach√© de Laravel (una memoria intermedia generada por Laravel que hace que tu aplicaci√≥n se cargue m√°s r√°pido).</li>
</ul>

<p>Y as√≠ otro mont√≥n de cosas.</p>

<p>No te preocupes si a√∫n no entiendes qu√© significan algunas de estas cosas. Lo iremos viendo todo poco a poco. Lo importante ahora es que comprendas la tremenda utilidad de Artisan en el trabajo cotidiano con Laravel y que aprendas lo b√°sico de su sintaxis.</p>

<h3 id="552-un-ejemplo-pr√°ctico-crear-un-controlador">5.5.2. Un ejemplo pr√°ctico: crear un controlador</h3>

<p>Veamos c√≥mo funciona Artisan con un ejemplo.</p>

<p>Supongamos que quieres crear un controlador. Para ello, existen dos maneras:</p>

<ol>
  <li>
    <p><strong>A mano</strong>. Nos vamos al directorio /app/Http/Controllers y creamos un archivo llamado, digamos, <em>HolaController.php</em>. Luego lo rellenamos con el esqueleto de un controlador vac√≠o, copiando y pegando de otro controlador existente y eliminando todo lo que no nos haga falta.</p>

    <p>Este m√©todo, obviamente, es lento, farragoso y resulta f√°cil que cometamos alg√∫n error.</p>
  </li>
  <li>
    <p><strong>Con Artisan</strong>. Simplemente, tecleamos este comando en el directorio ra√≠z de nuestra aplicaci√≥n:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan make:controller HolaController
</code></pre></div>    </div>

    <p>¬°Hemos terminado! Artisan crear√° por nosotros el archivo /app/Http/Controllers/HolaController.php y lo rellenar√° con el esqueleto de un controlador vac√≠o y sint√°cticamente correcto.</p>
  </li>
</ol>

<h3 id="553-artisan-con-docker">5.5.3. Artisan con Docker</h3>

<p>Si utilizas Laravel con una m√°quina virtual Docker, es importante que recuerdes esto: <em>Artisan solo se puede ejecutar dentro de tu m√°quina virtual</em>. No es un comando que exista <em>fuera</em> de tu servidor.</p>

<p>Las primeras veces se te olvidar√°. Intentar√°s ejecutar comandos de Artisan en tu m√°quina real y te dar√° un error. No te apures: nos ha ocurrido a todos.</p>

<p>Con <strong>Docker</strong> puedes abrir un terminal en tu m√°quina virtual con este comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker exec -it &lt;id-del-contenedor&gt; bash
</code></pre></div></div>

<p>(Si desconoces el id de tu contenedor, puedes averiguarlo con el comando <code class="language-plaintext highlighter-rouge">$ docker container ls</code>)</p>

<p>A partir de ah√≠, puedes lanzar comandos <code class="language-plaintext highlighter-rouge">php artisan</code> sin problemas</p>

<p><strong>Si trabajas con Sail, esto es a√∫n m√°s sencillo</strong>, porque <em>sail</em> permite ejecutar comandos directamente en la m√°quina virtual Docker Sail.</p>

<p>Simplemente escribe:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sail php artisan &lt;comando-de-artisan&gt;
</code></pre></div></div>

<p>O m√°s sencillo a√∫n con esta abreviatura:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ sail artisan &lt;comando-de-artisan&gt;
</code></pre></div></div>

<p>De ahora en adelante, cuando veas un comando de artisan en este manual, <strong>recuerda que debes sustituir ‚Äúphp‚Äù por ‚Äúsail‚Äù si est√°s trabajando con Docker Sail</strong>.</p>

<h3 id="554-comandos-principales-de-artisan">5.5.4. Comandos principales de Artisan</h3>

<p><em>(Recuerda: sustituye <code class="language-plaintext highlighter-rouge">php artisan</code> por <code class="language-plaintext highlighter-rouge">sail artisan</code> si est√°s usando Docker Sail)</em></p>

<p>Una buena forma de empezar con Artisan es teclear este comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan list
</code></pre></div></div>

<p>Ya te imaginas lo que hace, ¬øverdad?</p>

<p>Por si acaso andas un poco despistado/a hoy, te lo cuento yo: Artisan te mostrar√° una lista con todos los comandos v√°lidos en tu instalaci√≥n de Laravel. Esto puede variar seg√∫n tu versi√≥n de Laravel y los componentes que tengas instalados.</p>

<p>En un primer momento, estos son los comandos que m√°s vas a utilizar (cuando te conviertas en un experto/a en Laravel, ir√°n llegando otros por pura necesidad):</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">php artisan db:migrate</code> ‚Äì&gt; Para hacer migraciones (crear la estructura de nuestra base de datos).</li>
  <li><code class="language-plaintext highlighter-rouge">php artisan db:seed</code> ‚Äì&gt; Para llenar de datos predefinidos nuestra base de datos.</li>
  <li><code class="language-plaintext highlighter-rouge">php artisan make:migration</code> ‚Äì&gt; Crea una migraci√≥n (para crear la estructura de la base de datos).</li>
  <li><code class="language-plaintext highlighter-rouge">php artisan make:seeder</code> ‚Äì&gt; Crea un seeder (para rellenar con datos las tablas).</li>
  <li><code class="language-plaintext highlighter-rouge">php artisan make:controller</code> ‚Äì&gt; Para crear un controlador.</li>
  <li><code class="language-plaintext highlighter-rouge">php artisan make:model</code> ‚Äì&gt; Para crear un modelo.</li>
  <li><code class="language-plaintext highlighter-rouge">php artisan route:list</code> ‚Äì&gt; Muestra todas las rutas definidas en el enrutador.</li>
</ul>
:ET