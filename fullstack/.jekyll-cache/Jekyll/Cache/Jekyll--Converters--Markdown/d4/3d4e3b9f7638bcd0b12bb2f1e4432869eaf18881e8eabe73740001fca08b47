I"ï<h2 class="no_toc" id="19-ejercicios-propuestos">1.9. Ejercicios propuestos</h2>


<p>Los siguientes son una colecci√≥n de ejercicios de programaci√≥n que funcionan exactamente igual que los ejercicios en el gimnasio: para fortalecer tu musculatura como programador o programadora.</p>

<p>E igual que los ejercicios en el gimnasio, estos requerir√°n de ti dedicaci√≥n, esfuerzo y constancia. Pero por eso est√°s aqu√≠, ¬øno es cierto? Recuerda lo que hemos dicho muchas veces: <strong><em>a programar solo se aprende programando</em></strong>.</p>

<h4 id="ejercicio-0-hola-mundo">Ejercicio 0: hola, mundo</h4>

<p>Este ejercicio lo usaremos para probar la correcta puesta en marcha de nuestro servidor web.</p>

<p>Lo ideal es que trates de hacerlo con un servidor nativo y con un servidor virtualizado mediante Docker.</p>

<ol>
  <li><strong>Con un servidor nativo</strong>: instala un paquete como XAMPP o instala manualmente Apache y MariaDB en tu sistema operativo. Luego ve al directorio <em>htdocs</em> de tu Apache y escribe un programa ‚Äúholamundo.php‚Äù</li>
  <li><strong>Con un servidor virtualizado con Docker (RECOMENDADO)</strong>: baja y configura las im√°genes de Bitnami para Apache, MariaDB y PHP. L√°nzalas y pru√©balas con un programa ‚Äúholamundo.php‚Äù. Tienes toda la informaci√≥n sobre c√≥mo hacerlo en el <a href="../docker/#a24-un-ejemplo-montando-un-servidor-web-con-persistencia-de-datos">Ap√©ndice II</a>.</li>
</ol>

<p>Para hacer el resto de ejercicios y pr√°cticas, puedes usar cualquiera de esos dos servidores.</p>

<h4 id="ejercicio-1-anagramas">Ejercicio 1: anagramas</h4>

<p>Una palabra es un anagrama de otra si contiene las mismas letras colocadas en orden diferente. Por ejemplo, ‚ÄúCAVA‚Äù es un anagrama de ‚ÄúVACA‚Äù, y viceversa.</p>

<p>El ejercicio consiste en escribir un programa en PHP que pida dos palabras y compruebe si la primera es un anagrama de la segunda. Para ello necesitar√°s:</p>

<ol>
  <li>Crear un formulario HTML con un campo de texto y un bot√≥n de env√≠o.</li>
  <li>Procesa el formulario en otro archivo PHP (usa $_GET y $_POST para probar ambos m√©todos).</li>
  <li>A√±adir validaciones b√°sicas (por ejemplo, que el campo no est√© vac√≠o).</li>
</ol>

<h4 id="ejercicio-2-conexi√≥n-b√°sica-a-una-base-de-datos">Ejercicio 2: conexi√≥n b√°sica a una base de datos</h4>

<ol>
  <li>Crea una base de datos MySQL o MariaDB con una tabla usuarios(id#, nombre, email, password).</li>
  <li>Inserta algunos datos de prueba en la tabla.</li>
  <li>Con√©ctate desde PHP a esa base de datos.</li>
  <li>Inserta datos con una consulta preparada. Necesitar√°s un formulario HTML y un peque√±o programa PHP que procese los datos enviados por el formulario.</li>
  <li>Haz un SELECT * de la tabla y muestra el resultado en una tabla HTML.</li>
</ol>

<h4 id="ejercicio-3-crud-sencillo">Ejercicio 3: CRUD sencillo</h4>

<p>Utiliza la misma base de datos del ejercicio anterior para:</p>

<ol>
  <li>Implementar un listado de usuarios que, adem√°s, incluya las opciones de insertar, modificar y borrar usuarios (CRUD = Create, Read, Update, Delete).</li>
  <li>Divide el CRUD en diferentes archivos PHP (list.php, create.php, edit.php, delete.php, etc).</li>
</ol>

<h4 id="ejercicio-4-autenticaci√≥n-con-login-b√°sico">Ejercicio 4: Autenticaci√≥n con login b√°sico</h4>

<ol>
  <li>A√±ade a la tabla usuarios un campo rol (p. ej. admin, editor, user‚Ä¶).</li>
  <li>Crea un formulario de login que valide usuario y contrase√±a.</li>
  <li>Si es correcto, redirige la aplicaci√≥n al √°rea privada (el CRUD que hiciste en el ejercicio anterior).</li>
  <li>Si no, regresa al login y muestra un mensaje de error.</li>
</ol>

<h4 id="ejercicio-5-sesiones-y-seguridad-m√≠nima">Ejercicio 5: Sesiones y seguridad m√≠nima</h4>

<ol>
  <li>Ampl√≠a el c√≥digo del ejercicio anterior e inicia sesi√≥n con <em>session_start()</em> tras un login correcto.</li>
  <li>Guarda el id del usuario y su rol en variables de sesi√≥n.</li>
  <li>Aseg√∫rate de que las p√°ginas del CRUD solo son accesibles si existe sesi√≥n iniciada.</li>
  <li>A√±ade un bot√≥n de Cerrar sesi√≥n que destruya las variables de sesi√≥n y regrese al login.</li>
</ol>

<h4 id="ejercicio-6-listas-de-control-de-acceso">Ejercicio 6. Listas de control de acceso</h4>

<p>Modifica la aplicaci√≥n que estamos construyendo para que:</p>

<ol>
  <li>Solo los usuarios de tipo administrador (rol = admin) puedan acceder a todas las funciones del CRUD.</li>
  <li>Otros usuarios registrados pero no administradores podr√°n ver la tabla de usuarios pero no operar con ella (ni insertar, ni borrar ni modificar). Si lo intentan, debe aparecer un mensaje de tipo ‚ÄúAcci√≥n prohibida‚Äù.</li>
  <li>Centraliza la l√≥gica de los permisos en un archivo com√∫n (security.php).</li>
</ol>

<h4 id="ejercicio-7-aproximaci√≥n-a-mvc-en-php">Ejercicio 7. Aproximaci√≥n a MVC en PHP</h4>

<p>Reestructura todo el c√≥digo que has construido hasta ahora en tres carpetas:</p>

<ul>
  <li><strong>models/</strong> (consultas a la base de datos)</li>
  <li><strong>views/</strong> (HTML/PHP para mostrar datos)</li>
  <li><strong>controllers/</strong> (reciben la petici√≥n y deciden qu√© hacer).</li>
</ul>

<p>Configura un √∫nico index.php que reciba la acci√≥n (?action=‚Ä¶) y redirija al controlador correspondiente.</p>

<p><strong><em>Puedes, y te aconsejo que as√≠ lo hagas, fijarte en el <a href="http://localhost:4000/docs/fullstack/_site/php/mvc/#175-una-implementaci%C3%B3n-completa">c√≥digo fuente de la Biblioteca</a> que hemos visto en clase para hacer este √∫ltimo ejercicio.</em></strong></p>

<p>YYY OJo ‚Äì&gt; Revisar la parte de bases de datos para: a) A√±adir prepared statements y b) Dedicarla solo a PDO y c) Revisar ejercicios resueltos para cambiarlos a PDO</p>
:ET