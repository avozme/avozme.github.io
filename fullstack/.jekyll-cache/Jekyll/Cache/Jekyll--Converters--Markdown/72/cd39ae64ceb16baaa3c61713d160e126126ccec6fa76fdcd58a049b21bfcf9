I"è<h2 class="no_toc" id="19-pr√°cticas">1.9. Pr√°cticas</h2>


<p>Los siguientes son una colecci√≥n de pr√°cticas de programaci√≥n que funcionan exactamente igual que los ejercicios en el gimnasio: para fortalecer tu musculatura como programador o programadora.</p>

<p>E igual que los ejercicios en el gimnasio, estos requerir√°n de ti dedicaci√≥n, esfuerzo y constancia. Pero por eso est√°s aqu√≠, ¬øno es cierto? Recuerda lo que hemos dicho muchas veces: <strong><em>a programar solo se aprende programando</em></strong>.</p>

<h4 id="ejercicio-0-hola-mundo">Ejercicio 0: hola, mundo</h4>

<p>Este ejercicio lo usaremos para probar la correcta puesta en marcha de nuestro <strong>servidor web local</strong>.</p>

<p>Tienes dos opciones, como m√≠nimo, para poner en marcha el servidor local:</p>

<ol>
  <li><strong>Instalar un servidor nativo</strong>: instala un paquete como XAMPP o instala manualmente Apache y MariaDB en tu sistema operativo. Luego ve al directorio <em>htdocs</em> de tu Apache y escribe un programa ‚Äúholamundo.php‚Äù</li>
  <li><strong>Lanzar un servidor virtualizado con Docker (RECOMENDADO)</strong>: baja y configura las im√°genes para Apache, MariaDB y PHP. L√°nzalas y pru√©balas con un programa ‚Äúholamundo.php‚Äù. Tienes toda la informaci√≥n sobre c√≥mo hacerlo en el <a href="../docker/#a24-montando-con-docker-un-servidor-web-con-persistencia-de-datos">Ap√©ndice 2</a>.</li>
</ol>

<p>Para hacer el resto de ejercicios y pr√°cticas, puedes usar cualquiera de los dos servidores.</p>

<h4 id="ejercicio-1-comparar-n√∫meros">Ejercicio 1: comparar n√∫meros</h4>

<p>Vamos a hacer un primer ejercicio muy, muy sencillo para que te vayas soltando con la sintaxis de PHP y la forma de trabajar en el servidor.</p>

<p>Tienes que escribir un programa en PHP que:</p>

<ol>
  <li>Pida dos n√∫meros al usuario a trav√©s de un formulario HTML.</li>
  <li>Los compare para ver cu√°l es el menor de los dos.</li>
  <li>Muestre todos los n√∫meros que hay entre el menor y el mayor.</li>
</ol>

<h4 id="ejercicio-2-anagramas">Ejercicio 2: anagramas</h4>

<p>Una palabra es un anagrama de otra si contiene las mismas letras colocadas en orden diferente. Por ejemplo, ‚ÄúCAVA‚Äù es un anagrama de ‚ÄúVACA‚Äù, y viceversa.</p>

<p>El ejercicio consiste en escribir un programa en PHP que pida al usuario dos palabras y compruebe si la primera es un anagrama de la segunda. Para ello necesitar√°s:</p>

<ol>
  <li>Crear un formulario HTML con un campo de texto y un bot√≥n de env√≠o.</li>
  <li>Procesar el formulario en otro archivo PHP (usa $_GET y $_POST para probar ambos m√©todos).</li>
  <li>A√±adir validaciones b√°sicas (por ejemplo, que el campo no est√© vac√≠o).</li>
</ol>

<h4 id="ejercicio-3-conexi√≥n-b√°sica-a-una-base-de-datos">Ejercicio 3: conexi√≥n b√°sica a una base de datos</h4>

<ol>
  <li><strong>Crea una base de datos</strong> MySQL o MariaDB con una <strong>tabla <em>usuarios(id#, nombre, email, password)</em></strong>.</li>
  <li><strong>Inserta</strong> algunos datos de prueba en la tabla con PHPMyAdmin o MySQL Workbench.</li>
  <li><strong>Con√©ctate desde PHP</strong> a esa base de datos.</li>
  <li><strong>Inserta datos desde PHP</strong> con una consulta preparada.
    <ul>
      <li>Necesitar√°s, por un lado, un formulario HTML para pedirle los datos al usuario</li>
      <li>Y, por otro lado, un peque√±o programa PHP que procese el env√≠o del formulario y proceda a insertar los datos en la BD.</li>
    </ul>
  </li>
  <li><strong>Consulta</strong> la tabla de usuarios desde PHP y muestra todo su contenido en una salida HTML.</li>
</ol>

<p>Si te sobra algo de tiempo, intenta completar este peque√±o programa para que, adem√°s:</p>
<ul>
  <li>Pueda <strong>eliminar</strong> usuarios de la tabla.</li>
  <li>Pueda <strong>modificar</strong> usuarios existentes en la tabla.</li>
</ul>

<p>Intenta organizar el c√≥digo lo mejor posible. El objetivo no es necesariamente minimizar el n√∫mero de archivos, sino lograr una organizaci√≥n de archivos racional y que te permita depurar y modificar el c√≥digo con relativa facilidad.</p>

<p>Echa un vistazo a este <a href="../php/ejemplos-resueltos.html#183-lista-de-libros">ejemplo de c√≥digo</a> para saber c√≥mo empezar.</p>

<h4 id="ejercicio-4-crud-sencillo-mvc">Ejercicio 4: CRUD sencillo MVC</h4>

<p>Utiliza la misma base de datos del ejercicio anterior para:</p>

<ol>
  <li>Implementar un listado de usuarios que, adem√°s, incluya las opciones de insertar, modificar y borrar usuarios (CRUD = Create, Read, Update, Delete).</li>
  <li>
    <p>Estructura todo el c√≥digo en tres carpetas:</p>

    <ul>
      <li><strong>/</strong> (carpeta ra√≠z): coloca aqu√≠ tu controlador/enrutador (index.php)</li>
      <li><strong>models/</strong> (consultas a la base de datos)</li>
      <li><strong>views/</strong> (HTML/PHP para mostrar datos)</li>
    </ul>

    <p>El archivo index.php debe recibir la acci√≥n (?action=‚Ä¶) y redirigir al m√©todo correspondiente.</p>

    <p><strong><em>Puedes, y te aconsejo que as√≠ lo hagas, usar el <a href="../php/mvc/#175-una-implementaci%C3%B3n-completa">c√≥digo fuente de la Biblioteca</a> que hemos visto en clase para hacer este ejercicio.</em></strong></p>
  </li>
</ol>

<h4 id="ejercicio-5-autenticaci√≥n-con-login-b√°sico">Ejercicio 5: Autenticaci√≥n con login b√°sico</h4>

<ol>
  <li>A√±ade a la tabla usuarios un campo rol (p. ej. admin, editor, user‚Ä¶).</li>
  <li>Crea un formulario de login que valide usuario y contrase√±a.</li>
  <li>Si es correcto, redirige la aplicaci√≥n al √°rea privada (el CRUD que hiciste en el ejercicio anterior).</li>
  <li>Si no, regresa al login y muestra un mensaje de error.</li>
</ol>

<h4 id="ejercicio-6-sesiones-y-seguridad-m√≠nima">Ejercicio 6: Sesiones y seguridad m√≠nima</h4>

<ol>
  <li>Ampl√≠a el c√≥digo del ejercicio anterior e inicia sesi√≥n con <em>session_start()</em> tras un login correcto.</li>
  <li>Guarda el id del usuario y su rol en variables de sesi√≥n.</li>
  <li>Aseg√∫rate de que las p√°ginas del CRUD solo son accesibles si existe sesi√≥n iniciada.</li>
  <li>A√±ade un bot√≥n de Cerrar sesi√≥n que destruya las variables de sesi√≥n y regrese al login.</li>
</ol>

<h4 id="ejercicio-7-listas-de-control-de-acceso">Ejercicio 7. Listas de control de acceso</h4>

<p>Modifica la aplicaci√≥n que estamos construyendo para que:</p>

<ol>
  <li>Solo los usuarios de tipo administrador (rol = admin) puedan acceder a todas las funciones del CRUD.</li>
  <li>Otros usuarios registrados pero no administradores podr√°n ver la tabla de usuarios pero no operar con ella (ni insertar, ni borrar ni modificar). Si lo intentan, debe aparecer un mensaje de tipo ‚ÄúAcci√≥n prohibida‚Äù.</li>
  <li>Centraliza la l√≥gica de los permisos en un archivo com√∫n (security.php).</li>
</ol>
:ET