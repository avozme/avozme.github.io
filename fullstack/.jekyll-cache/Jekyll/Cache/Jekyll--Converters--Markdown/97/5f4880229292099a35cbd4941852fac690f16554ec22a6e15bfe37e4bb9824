I"Õ@<h1 class="no_toc" id="ap√©ndice-2-virtualizaci√≥n-con-docker">Ap√©ndice 2. Virtualizaci√≥n con Docker</h1>

<ul id="markdown-toc">
  <li><a href="#a21-qu√©-es-docker" id="markdown-toc-a21-qu√©-es-docker">A2.1. ¬øQu√© es Docker?</a></li>
  <li><a href="#a22-comandos-usuales-de-docker" id="markdown-toc-a22-comandos-usuales-de-docker">A2.2. Comandos usuales de Docker</a></li>
  <li><a href="#a23-persistencia-de-datos" id="markdown-toc-a23-persistencia-de-datos">A2.3. Persistencia de datos</a></li>
  <li><a href="#a24-un-ejemplo-montando-un-servidor-web-con-persistencia-de-datos" id="markdown-toc-a24-un-ejemplo-montando-un-servidor-web-con-persistencia-de-datos">A2.4. Un ejemplo: montando un servidor web con persistencia de datos</a>    <ul>
      <li><a href="#a241-c√≥mo-editar-el-archivo-phpini-de-un-contenedor-docker" id="markdown-toc-a241-c√≥mo-editar-el-archivo-phpini-de-un-contenedor-docker">A2.4.1. C√≥mo editar el archivo php.ini de un contenedor Docker</a></li>
    </ul>
  </li>
</ul>

<h2 id="a21-qu√©-es-docker">A2.1. ¬øQu√© es Docker?</h2>

<p><strong>Docker</strong> es una herramienta de virtualizaci√≥n basada en <em>contenedores</em>.</p>

<p>Un <strong>contenedor</strong> es un paquete de software completamente independiente del sistema donde se ejecuta. Recibe ese nombre por los contenedores que se utilizan en el transporte mar√≠timo, que tienen unas medidas y una forma estandarizada y que aislan por completo la carga que llevan dentro del exterior.</p>

<p>Un contenedor Docker hace lo mismo, pero con un conjunto de software: lo aisla por completo del exterior. El software que hay dentro del contenedor se puede ejecutar en cualquier m√°quina gracias al <em>runtime</em> de Docker, que se comporta como un mini-sistema operativo virtualizado que corre sobre la m√°quina anfitri√≥n.</p>

<p>Un contenedor puede contener cualquier cosa. Por ejemplo, Apache. De ese modo, podemos ejecutar Apache en cualquier m√°quina (siempre que tenga previamente instalado Docker) sin necesidad de instalarlo realmente, con todo lo que ello conlleva de configuraci√≥n de la m√°quina, consumo de recursos, etc. El contenedor Docker puede ponerse en marcha cuando queramos y detenerse en cualquier momento, sin dejar ning√∫n rastro en la m√°quina anfitriona.</p>

<p>En definitiva, puedes usar y/o testear <em>cualquier</em> programa sin tener que instalarlo realmente en tu m√°quina.</p>

<p>Los contenedores Docker vienen empaquetados en <strong>im√°genes</strong>, a partir de los cuales pueden lanzarse todos los contenedores que necesitemos. Es decir, las im√°genes con como las <em>clases</em> en programaci√≥n orientada a objetos, y los contenedores son como los objetos que se instancian a partir de esas clases.</p>

<p>Cada cual puede construir las im√°genes que necesite o usar im√°genes ya hechas, con todo lo necesario en su interior para ejecutar cualquier software sin necesidad de instalarlo ni configurarlo. Hay repositorios p√∫blicos de im√°genes, como <strong>DockerHub</strong>, donde uno puede encontrar im√°genes de pr√°cticamente cualquier cosa.</p>

<h2 id="a22-comandos-usuales-de-docker">A2.2. Comandos usuales de Docker</h2>

<p>Aunque Docker puede usarse desde un interfaz gr√°fico (como <strong>Docker Desktop</strong>), lo habitual es hacerlo desde la l√≠nea de comandos.</p>

<p>Esto no es un manual de Docker, pero s√≠ vamos a enumerar aqu√≠ los comandos principales que nos ser√°n √∫tiles como desarrolladores web para que puedas usarlos como referencia r√°pida cuando tengas que trabajar con Docker.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">docker run [nombre-imagen]</code> - Lanza un contenedor a partir de la imagen especificada. Si la imagen no est√° descargada en el ordenador, la buscar√° en el repositorio configurado (por defecto, <em>DockerHub</em>).</li>
  <li><code class="language-plaintext highlighter-rouge">docker ps</code> - Muestra un listado con los contenedores que hay actualmente en el sistema. Un contenedor no tiene por qu√© estar necesariamente corriendo, sino que existen otros estados (detenido, preparado, finalizado, etc). Con <code class="language-plaintext highlighter-rouge">docker ps -a</code> podemos ver todos los contenedores, tambi√©n los detenidos.</li>
  <li><code class="language-plaintext highlighter-rouge">docker stop [id-del-contenedor]</code> - Detiene un contenedor. Su id puede obtenerse con <code class="language-plaintext highlighter-rouge">docker ps</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">docker start [id-del-contenedor]</code> - Reanuda un contenedor.</li>
  <li><code class="language-plaintext highlighter-rouge">docker exec -it [id-del-contenedor] bash</code> - Abrir un terminal en el contenedor.</li>
  <li><code class="language-plaintext highlighter-rouge">docker-compose up -d</code> - Inicia todos los contenedores especificados en el archivo <em>docker-compose.yml</em> del directorio actual. Necesitas tener instalado, adem√°s de Docker, el programa <em>docker-compose</em>.</li>
  <li><code class="language-plaintext highlighter-rouge">docker-compose down</code> - Detiene todos los contenedores especificados en el archivo <em>docker-compose.yml</em> del directorio actual.</li>
</ul>

<h2 id="a23-persistencia-de-datos">A2.3. Persistencia de datos</h2>

<p>Cualquier cosa que guardes en un contenedor de Docker se perder√° cuando el contenedor se detenga. Por ejemplo, si est√°s haciendo una aplicaci√≥n web que usa una base de datos MySQL, y tu servidor MySQL est√° en un contenedor Docker, toda la informaci√≥n de esa base de datos se perder√° cada vez que destruyas el contenedor.</p>

<p>Es posible evitar eso usando la persistencia de datos.</p>

<p>XXX completar esta secci√≥n XXX</p>

<h2 id="a24-un-ejemplo-montando-un-servidor-web-con-persistencia-de-datos">A2.4. Un ejemplo: montando un servidor web con persistencia de datos</h2>

<p>En esta secci√≥n vamos a mostrar c√≥mo montar un servidor web con im√°genes Docker y levantarlo o apagarlo con docker-compose.</p>

<p>Usaremos las im√°genes de Bitnami, un desarrollador espa√±ol recientemente adquirido por VMWare. Sus im√°genes son f√°ciles de configurar (dentro de lo que cabe) y bastante confiables.</p>

<p>Vamos a poner en marcha <strong>cuatro contenedores</strong> simult√°neamente:</p>

<ol>
  <li><strong>Servidor Apache</strong> (imagen bitnami/apache)</li>
  <li><strong>Int√©rprete PHP</strong> (image bitnami/phpfpm)</li>
  <li><strong>Servidor MariaDB</strong> (imagen bitnami/mariadb)</li>
  <li><strong>PHPMyAdmin</strong> (imagen bitnami/phpmyadmin)</li>
</ol>

<p>Adem√°s, necesitamos que los datos de MariaDB sean persistentes, es decir, que no se pierdan cuando detengamos los contenedores.</p>

<p>Si buscamos en DockerHub cada una de esas im√°genes, encontraremos un archivo de configuraci√≥n <em>docker-compose.yml</em> para cada una de ellas.</p>

<p>Tenemos que construir un <strong><em>docker-compose.yml</em></strong> √∫nico combinando todos los archivos de configuraci√≥n de todas las im√°genes y ubicarlo en el directorio ra√≠z de nuestro proyecto. Nos debe quedar algo as√≠:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2'</span>
<span class="na">services</span><span class="pi">:</span>
  <span class="na">php</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/php-fpm:latest</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">9000:9000</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">.:/app</span>
  <span class="na">apache</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">bitnami/apache:latest</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">80:8080</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./apache-vhost/myapp.conf:/vhosts/myapp.conf:ro</span>
      <span class="pi">-</span> <span class="s">.:/app</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">php</span>
  <span class="na">mariadb</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">docker.io/bitnami/mariadb:10.6</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MARIADB_ROOT_PASSWORD=bitnami</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">mariadb_data:/bitnami'</span>
  <span class="na">phpmyadmin</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">docker.io/bitnami/phpmyadmin:5</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s1">'</span><span class="s">8000:8080'</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">mariadb</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">mariadb_data</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">local</span>
</code></pre></div></div>

<p>Adem√°s, necesitamos crear un subdirectorio llamado <strong><em>apache-vhost</em></strong> y, dentro de √©l, colocar un archivo <em>myapp.conf</em> con este contenido:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so
&lt;VirtualHost *:8080&gt;
  DocumentRoot "/app"
  ProxyPassMatch ^/(.*\.php(/.*)?)$ fcgi://php:9000/app/$1
  &lt;Directory "/app"&gt;
    Options Indexes FollowSymLinks
    AllowOverride All
    Require all granted
    DirectoryIndex index.php
  &lt;/Directory&gt;
&lt;/VirtualHost&gt;
</code></pre></div></div>

<p>Esto hace que todas las peticiones de scripts PHP que lleguen al servidor se pasen autom√°ticamente al contenedor de PHP para que las interprete.</p>

<p>Ya podemos <strong>poner en marcha los cuatro contenedores</strong> tecleando (en el directorio de trabajo):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker-compose up -d
</code></pre></div></div>

<p>Para <strong>detener los contenedores</strong>, teclearemos:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker-compose down
</code></pre></div></div>

<p>El servidor estar√° respondiendo en la direcci√≥n http://localhost. Es muy importante que no tengas otro proceso usando el puerto 80 (el t√≠pico de http), o de lo contrario el contenedor de Apache no arrancar√°. Esto puede suceder si tienes un Apache nativo corriendo en tu m√°quina.</p>

<p>En cuanto a PHPMyAdmin, lo encontrar√°s eh http://localhost:8000.</p>

<p>Esos puertos (el 80 y el 8000) se pueden cambiar trasteando un poco con el archivo docker-compose.yml. Recuerda detener y volver a lanzar los contenedores cada vez que cambies la configuraci√≥n.</p>

<p>Por √∫ltimo, si necesitas instalar dependencias de PHP con <strong>composer</strong>, puedes hacerlo creando un archivo <em>composer.json</em> en el directorio ra√≠z del proyecto y ejecutando <em>composer install</em> dentro del contenedor de PHP:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker exec php composer install
</code></pre></div></div>

<h3 id="a241-c√≥mo-editar-el-archivo-phpini-de-un-contenedor-docker">A2.4.1. C√≥mo editar el archivo php.ini de un contenedor Docker</h3>

<p>Lo normal es que tengas que tocar ligeramente algunas de las directivas de <strong>pnp.ini</strong>, el archivo de configuraci√≥n del PHP de tu servidor.</p>

<p>Si trabajas con un servidor nativo local, es tan f√°cil como buscar el archivo <em>php.ini</em> en tu disco duro, editarlo, cambiar lo que necesites y volver a poner en marcha tu servidor.</p>

<p>Pero si trabajas con un servidor virtualizado con Docker, el archivo <em>php.ini</em> formar√° parte de la imagen que est√©s usando, por lo que no sirve de nada hacer cambios en el archivo: cada vez que reinicies tu contenedor, <em>php.ini</em> volver√° a estar en su estado original.</p>

<h4 id="cosas-que-probablemente-tendr√°s-que-modificar-en-phpini">Cosas que (probablemente) tendr√°s que modificar en php.ini</h4>

<p>Cada aplicaci√≥n tiene sus propias necesidades, pero, en general, las directivas que un desarrollador est√° siempre manoseando son:</p>

<ul>
  <li>Habilitar la depuraci√≥n de errores: directivas <em>display_errors</em> (poner a ‚ÄúOn‚Äù) y <em>error_reporting</em> (poner a ‚ÄúE_ALL‚Äù)</li>
  <li>Deshabilitar la cach√© del servidor para que los cambios en tu c√≥digo se reflejen de inmediato: directiva <em>opcache.enable</em> (poner a 0)</li>
  <li>Incrementar el tama√±o de los archivos de subida y el tiempo de procesamiento de los <em>requests</em>: directivas <em>upload_max_filesize</em> y <em>max_input_time</em>.</li>
  <li>Incrementar el tiempo de ejecuci√≥n de los scripts y la memoria que pueden consumir: directivas <em>max_execution_time</em> y <em>memory_limit</em>.</li>
  <li>Habilitar el complemento <em>xdebug</em> para poder depurar tu c√≥digo PHP. Esto necesita varias directivas que te muestro m√°s abajo, en el ejemplo del archivo de configuraci√≥n de la siguiente secci√≥n.</li>
</ul>

<p>Ten en cuenta que los valores que pongas en estas u otras directivas en un entorno de desarrollo no tienen por qu√© ser (ni <em>deben</em> ser) los mismos que establezcas en el entorno de producci√≥n. Por ejemplo, en producci√≥n te interesar√° volver a poner <em>diplay_errors</em> a <em>Off</em>.</p>

<h4 id="modificando-el-phpini-de-la-imagen-bitnamiphp-fpm">Modificando el php.ini de la imagen bitnami/php-fpm</h4>

<p>Cada imagen Docker de PHP lo har√° a su manera, pero todas deben proporcionar una forma de manipular el archivo <em>php.ini</em> con m√°s o menos facilidad. Por seguir con nuestro ejemplo, nos vamos a centrar en la imagen <strong>bitnami/php-fpm</strong>, que es la que recomendamos para montar nuestro servidor por su (relativa) facilidad de uso.</p>

<p>En el caso de esta imagen, lo que debemos hacer es construir con archivo <em>.ini</em> adicional, con la configuraci√≥n de <em>php.ini</em> que necesitemos cambiar. El int√©rprete PHP tomar√° todas las directivas de <em>php.ini</em> y, si encuentra un archivo <em>.ini</em> adicional, lo procesar√° justo despu√©s, sobreescribiendo todas las directivas que encuentre en √©l.</p>

<p>Por ejemplo, podemos crear en nuestra carpeta de trabajo un archivo llamado <strong><em>custom.ini</em></strong> con este contenido:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>display_errors = On
error_reporting = E_ALL
opcache.enable = 0

[xdebug]
zend_extension="/opt/bitnami/php/lib/php/extensions/xdebug.so"
xdebug.remote_enable=1
xdebug.remote_host=127.0.0.1
xdebug.remote_port=9000
</code></pre></div></div>

<p>Este archivo har√° que nuestro PHP funcione en modo de desarrollo, mostrando los mensajes de error, deshabilitando el cach√© y activando el depurador.</p>

<p>Ahora bastar√° con a√±adir esto a la secci√≥n ‚Äúphp‚Äù de nuestro <strong><em>docker-compose.yml</em></strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  php:
    ...
    volumes:
      - /ruta/hasta/custom.ini:/opt/bitnami/php/etc/conf.d/custom.ini
</code></pre></div></div>

<p>Por supuesto, debes sustituir ‚Äú/ruta/hasta‚Äù por la ruta que dirija a tu archivo <em>custom.ini</em>. Esto colocar√° nuestro <em>custom.ini</em> en un directorio concreto de la imagen (<em>opt/bitnami/php/etc/conf.d/</em>), que es donde el PHP de Bitnami mirar√° en busca de configuraciones adicionales para su servidor.</p>

<p>La pr√≥xima vez que iniciemos nuestro contenedor, la nueva configuraci√≥n de <em>php.ini</em> ya estar√° disponible. No dejes de comprobarlo haciendo una llamada a <strong><em>phpinfo()</em></strong> y revisando la informaci√≥n que te mostrar√° esa funci√≥n.</p>

:ET