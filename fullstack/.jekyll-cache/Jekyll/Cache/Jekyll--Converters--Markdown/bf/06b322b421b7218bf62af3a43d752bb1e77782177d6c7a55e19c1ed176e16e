I"ÁL<h2 class="no_toc" id="513-sesiones-con-laravel">5.13. Sesiones con Laravel</h2>

<ul id="markdown-toc">
  <li><a href="#5131-drivers-de-sesi√≥n" id="markdown-toc-5131-drivers-de-sesi√≥n">5.13.1. Drivers de sesi√≥n</a></li>
  <li><a href="#5132-persistencia-de-las-variables-de-sesi√≥n" id="markdown-toc-5132-persistencia-de-las-variables-de-sesi√≥n">5.13.2. Persistencia de las variables de sesi√≥n</a></li>
  <li><a href="#5133-autenticaci√≥n" id="markdown-toc-5133-autenticaci√≥n">5.13.3. Autenticaci√≥n</a></li>
  <li><a href="#5134-laravel-breeze" id="markdown-toc-5134-laravel-breeze">5.13.4. Laravel Breeze</a></li>
  <li><a href="#5135-autenticaci√≥n-y-vistas-c√≥mo-generar-c√≥digo-dependiendo-del-tipo-de-usuario" id="markdown-toc-5135-autenticaci√≥n-y-vistas-c√≥mo-generar-c√≥digo-dependiendo-del-tipo-de-usuario">5.13.5. Autenticaci√≥n y vistas: c√≥mo generar c√≥digo dependiendo del tipo de usuario</a></li>
  <li><a href="#5136-autenticaci√≥n-y-middlewares-c√≥mo-proteger-los-controladores" id="markdown-toc-5136-autenticaci√≥n-y-middlewares-c√≥mo-proteger-los-controladores">5.13.6. Autenticaci√≥n y middlewares: c√≥mo proteger los controladores</a></li>
</ul>

<p>Como es l√≥gico, Laravel tambi√©n proporciona su propio sistema de manejo de <strong>variables de sesi√≥n</strong>, es decir, variables persistentes en el servidor asociadas a cada cliente.</p>

<p>Las variables de sesi√≥n de Laravel son mucho m√°s seguras y poderosas que las variables de sesi√≥n est√°ndar de PHP. En esta secci√≥n vamos a ver c√≥mo funcionan y qu√© posibilidades nos ofrecen las sesiones en Laravel.</p>

<h3 id="5131-drivers-de-sesi√≥n">5.13.1. Drivers de sesi√≥n</h3>

<p>Las sesiones de configuran en <em>/config/sessions.php</em>, y una de las cosas que debes configurar ah√≠ es el <strong>driver</strong> de sesi√≥n, es decir, el tipo de manejador que quieres que manipule las sesiones.</p>

<ul>
  <li>
    <p><strong><em>Files</em></strong>:</p>

    <p>El driver por defecto es <strong><em>files</em></strong>. Es el m√°s sencillo y funcionar√° en casi cualquier servidor. Eso significa que Laravel guardar√° las variables de sesi√≥n en un fichero especial en el servidor (que nosotros no tenemos que manejar: Laravel se encargar√° de todo).</p>
  </li>
  <li>
    <p><strong><em>Memcached</em></strong> y <strong><em>redis</em></strong>:</p>

    <p>El driver <em>files</em> es m√°s que suficiente para una aplicaci√≥n en desarrollo, pero para una aplicaci√≥n en producci√≥n, Laravel recomienda usar otros <em>drivers</em> llamados <strong><em>memcached</em></strong> o <strong><em>redis</em></strong> porque son m√°s r√°pidos. Ambos son <em>daemons</em> del sistema programados para esta tarea. Obviamente, el servidor debe soportarlos para que puedas usarlos.</p>

    <p>Consulta con tu proveedor o con tu administrador de sistemas la configuraci√≥n de tu servidor web para saber si puedes usar alguno de estos dos <em>drivers</em>. Si no, tendr√°s que conformarte con <em>files</em>.</p>
  </li>
  <li>
    <p><strong><em>Database</em></strong>:</p>

    <p>Si necesitas seguridad adicional, sin duda tu driver es <strong><em>database</em></strong>. Esto almacenar√° dos copias de cada variable de sesi√≥n: una en un fichero y otra en una tabla especial de la base de datos.</p>

    <p>Si un atacante consiguiera manipular una de las dos variables, Laravel cerrar√° la sesi√≥n autom√°ticamente y el atacante se quedar√° con un palmo de narices. Eso s√≠, este sistema es el m√°s lento de todos porque requiere un acceso a la base de datos para cada petici√≥n al servidor.</p>
  </li>
</ul>

<h3 id="5132-persistencia-de-las-variables-de-sesi√≥n">5.13.2. Persistencia de las variables de sesi√≥n</h3>

<p>Laravel maneja dos tipos de variable seg√∫n su persistencia:</p>

<ul>
  <li><strong>Variables flash</strong>: solo duran una petici√≥n y luego desaparecen.</li>
  <li><strong>Variables de sesi√≥n convencionales</strong>: existen hasta que las destruimos expresamente.</li>
</ul>

<h4 id="variables-flash">Variables flash</h4>

<p>Son variables de sesi√≥n que solo duran una petici√≥n y luego se <em>autodestruyen</em>. Se usan t√≠picamente para enviar un <em>feedback</em> o mensaje de retroalimentaci√≥n al usuario.</p>

<p>Te lo muestro con un ejemplo. Imagina el t√≠pico formulario de <em>login</em>. En caso de producirse un error, lo habitual es que la aplicaci√≥n nos muestre de nuevo ese formulario con un mensaje del tipo de ‚ÄúUsuario no reconocido‚Äù.</p>

<p>Para lograr eso, har√≠amos lo siguiente en el controlador. Observa el uso del m√©todo <em>with()</em> para crear una variable flash de sesi√≥n llamada <em>mensaje</em>:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">return</span> <span class="p">(</span><span class="s1">'login/form'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">with</span><span class="p">(</span><span class="s1">'mensaje'</span><span class="p">,</span> <span class="s1">'Usuario no reconocido'</span><span class="p">);</span>
</code></pre></div></div>

<p>En la vista, podemos acceder a esa variable flash. Por ejemplo, as√≠:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">@</span><span class="k">if</span> <span class="p">(</span><span class="nf">session</span><span class="p">(</span><span class="s1">'mensaje'</span><span class="p">))</span>
        <span class="p">{{</span> <span class="nf">session</span><span class="p">(</span><span class="s1">'mensaje'</span><span class="p">);</span> <span class="p">}}</span>
    <span class="o">@</span><span class="k">endif</span>
</code></pre></div></div>

<p>A partir de este momento, la variable flash se destruye y cualquier intento de acceder a ella provocar√° un error de ejecuci√≥n.</p>

<h4 id="variables-de-sesi√≥n-convencionales">Variables de sesi√≥n convencionales</h4>

<p>Las variables de sesi√≥n convencionales se manejan con la <strong>clase <em>Session</em></strong>, que tiene un mont√≥n de m√©todos est√°ticos para crear variables, destruirlas, consultarlas, etc.</p>

<p>Los m√©todos m√°s √∫tiles son:</p>

<ul>
  <li>
    <p><strong>put()</strong> -&gt; almacena una variable de sesi√≥n:</p>

    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">Session</span><span class="o">::</span><span class="nf">put</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>push()</strong> -&gt; elimina una variable de sesi√≥n:</p>

    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">Session</span><span class="o">::</span><span class="nf">push</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>get()</strong> -&gt; devuelve el valor de una variable de sesi√≥n:</p>

    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nv">$v</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">);</span>
    <span class="nv">$v</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor-por-defecto'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>all()</strong> -&gt; devuelve todas las variables de sesi√≥n en un array:</p>

    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nv">$a</span> <span class="o">=</span> <span class="nc">Session</span><span class="o">::</span><span class="nf">all</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>flush()</strong> -&gt; elimina todas las variables de sesi√≥n:</p>

    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">Session</span><span class="o">::</span><span class="nb">flush</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>flash()</strong> -&gt; crea manualmente una variable de sesi√≥n de tipo flash:</p>

    <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">Session</span><span class="o">::</span><span class="nf">flash</span><span class="p">(</span><span class="s1">'nombre-variable'</span><span class="p">,</span> <span class="s1">'valor'</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="5133-autenticaci√≥n">5.13.3. Autenticaci√≥n</h3>

<p>La autenticaci√≥n de usuarios, es decir, el sistema de <em>login</em> seguido de la creaci√≥n de una o varias variables de sesi√≥n asociadas al usuario que se acaba de loguear, es un componente habitual de muchas aplicaciones web.</p>

<p>Hasta la versi√≥n 5, Laravel proporcionaba un sistema de autenticaci√≥n integrado en su c√≥digo que se pod√≠a a√±adir a nuestra aplicaci√≥n con un simple comando de Artisan. Pero a partir de Laravel 6, los desarrolladores decidieron aligerar el n√∫cleo de Laravel lo m√°ximo posible, y sacaron del sistema muchos componentes, incluyendo el sistema de autencicaci√≥n.</p>

<p>Actualmente, Laravel proporciona los denominados <em>Starter Kits</em>, que son componentes que se pueden instalar mediante <em>composer</em> para realizar esas tareas que se extrajeron del n√∫cleo de Laravel.</p>

<p>Para la autenticaci√≥n, Laravel dispone de dos <em>Starter Kits</em>, llamados <strong><em>Breeze</em></strong> y <strong><em>Jetstream</em></strong>. Vamos a ver el primero, que es m√°s sencillo pero suficiente en la mayor parte de las situaciones.</p>

<h3 id="5134-laravel-breeze">5.13.4. Laravel Breeze</h3>

<p><strong><em>Larevel Breeze</em></strong> contiene todo el c√≥digo necesario para crear un sistema de autenticaci√≥n completo y seguro capaz, entre otras cosas, de:</p>

<ul>
  <li>Hacer el Login e iniciar la sesi√≥n</li>
  <li>Registrar nuevos usuarios</li>
  <li>Recuperar contrase√±as olvidadas</li>
  <li>Confirmaar el registro de usuarios mediante email</li>
</ul>

<p>Para <strong>instalar <em>Laravel Breeze</em></strong>, debes abrir un terminal en tu servidor web y ejecutar estos comandos:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ composer require laravel/breeze --dev
$ php artisan breeze:install
$ npm install
$ npm run dev
$ php artisan migrate
</code></pre></div></div>

<p>El primer comando instalar√° las librer√≠as PHP necesarias para que <em>Laravel Breeze</em> se ejecute. El segundo, a√±adir√° <em>Breeze</em> a tu aplicaci√≥n, creando autom√°ticamente varios controladores, modelos, vistas y hasta migraciones. Los dos comandos <em>npm</em> sirven para compilar el CSS y el JS de <em>Breeze</em>, de manera que funcione m√°s r√°pido. Por √∫ltimo, actualizamos las migraciones para que se creen las tablas adicionales que <em>Breeze</em> va a necesitar.</p>

<p>Una vez hecho esto, <em>Breeze</em> crear√° autom√°ticamente varias rutas en un enrutador especial, <em>/routes/auth.php</em>. Entre ellas:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Routes</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s2">"/login"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">mostrar</span> <span class="n">el</span> <span class="n">formulario</span> <span class="n">de</span> <span class="n">login</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">post</span><span class="p">(</span><span class="s2">"/login"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">procesar</span> <span class="n">el</span> <span class="n">formulario</span> <span class="n">de</span> <span class="n">login</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">post</span><span class="p">(</span><span class="s2">"/logout"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">cerrar</span> <span class="n">la</span> <span class="n">sesi√≥n</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s2">"/register"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">mostrar</span> <span class="n">el</span> <span class="n">fomulario</span> <span class="n">de</span> <span class="n">registro</span>
<span class="nc">Routes</span><span class="o">::</span><span class="nf">post</span><span class="p">(</span><span class="s2">"/register"</span><span class="p">)</span> <span class="err">‚Üí</span> <span class="nc">Para</span> <span class="n">procesar</span> <span class="n">el</span> <span class="n">formulario</span> <span class="n">de</span> <span class="n">registro</span>
</code></pre></div></div>

<p>Puedes probarlas escribi√©ndolas en tu navegador. Comprobar√°s que funcionan estupendamente.</p>

<p>Tambi√©n se crear√°n varios controladores como <em>LoginController</em> y <em>RegisterContoller</em>. Los puedes encontrar en <em>App/Http/Controllers/Auth</em>.</p>

<p>Y, por supuesto, se crean varias vistas, como <em>auth/login.blade.php</em>, <em>register.blade.php</em> y <em>layouts/app.blade.php</em> (la plantilla que usar√°n <em>login</em> y <em>register</em>).</p>

<p>Por √∫ltimo, se crea una vista <em>home</em> de ejemplo (<em>dashboard.blade.php</em>) a la que llegamos despu√©s de hacer login. Esa vista <em>home</em> la puedes cambiar en <em>/app/providers/RouteServiceProvider.php</em> para redirigirla a la vista que te interese.</p>

<p>¬°Y listo! Ya tienes hecho un sistema de login completo y superseguro. Solo te queda adaptar esas vistas y controladores a tus necesidades.</p>

<h3 id="5135-autenticaci√≥n-y-vistas-c√≥mo-generar-c√≥digo-dependiendo-del-tipo-de-usuario">5.13.5. Autenticaci√≥n y vistas: c√≥mo generar c√≥digo dependiendo del tipo de usuario</h3>

<p>En las vistas, tenemos un par de directivas de Blade muy √∫tiles relacionadas con las sesiones: <strong><em>@auth</em></strong> y <strong><em>@guest</em></strong>. Puedes ver c√≥mo funcionan en este ejemplo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="o">@</span><span class="n">auth</span>
   <span class="mf">...</span>   <span class="c1">// Este c√≥digo solo se ejecuta si existe un usuario logueado</span>
   <span class="o">@</span><span class="n">endauth</span>
   <span class="o">@</span><span class="n">guest</span>
   <span class="mf">...</span>   <span class="c1">// Este c√≥digo solo se ejecuta si NO existe usuario logueado</span>
   <span class="o">@</span><span class="n">endguest</span>
</code></pre></div></div>

<p>Adem√°s, podemos acceder a los datos del usuario mediante la clase Auth:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$user</span> <span class="o">=</span> <span class="nc">Auth</span><span class="o">::</span><span class="nf">user</span><span class="p">()</span> <span class="c1">// Devuelve el usuario actualmente logueado o null si no hay ninguna sesi√≥n abierta.</span>
<span class="k">if</span> <span class="p">(</span><span class="nc">Auth</span><span class="o">::</span><span class="nf">check</span><span class="p">())</span> <span class="p">{</span> <span class="c1">// Devuelve true si el usuario actual est√° logueado.</span>
   <span class="mf">...</span>
<span class="p">}</span>
</code></pre></div></div>

<p>(M√°s m√©todos de Auth en <a href="https://laravel.com/docs/8.x/authentication">la documentaci√≥n oficial</a>)</p>

<h3 id="5136-autenticaci√≥n-y-middlewares-c√≥mo-proteger-los-controladores">5.13.6. Autenticaci√≥n y middlewares: c√≥mo proteger los controladores</h3>

<p>Los <strong>middlewares</strong> de Laravel son componentes que capturan y filtran todas las peticiones HTTP que llegan a la aplicaci√≥n.
Literalmente, se ponen <em>en medio</em> de cualquier petici√≥n al servidor, y de ah√≠ su nombre. Est√°n ubicados en <em>App/Http/Middleware</em>.</p>

<p>Hay dos <em>middlewares</em> importantes relacionados con la autenticaci√≥n en Laravel: <em>Authenticate</em> (que tiene un alias: <strong><em>auth</em></strong>) y <em>RedirectIfAuthenticated</em> (alias <strong><em>guest</em></strong>). Los alias se definen en <em>App/Http/Kernel.php</em></p>

<p>Podemos usar estos <em>middlewares</em> en el constructor de nuestros controladores para protegerlos en todo o en parte. Es decir, para impedir el acceso de usuarios no logueados a ciertos m√©todos del controlador.</p>

<p>Observa este ejemplo para aprender a hacerlo. Ya ver√°s qu√© f√°cil y vers√°til es:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="k">public</span> <span class="k">function</span> <span class="n">__construct</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// Solo usuarios logueados podr√°n acceder a cualquier funci√≥n de este controlador:</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s2">"auth"</span><span class="p">);</span> 
      <span class="c1">// Solo usuarios logueados podr√°n acceder a los m√©todos create() y edit():</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s2">"auth"</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">only</span><span class="p">(</span><span class="s2">"create"</span><span class="p">,</span> <span class="s2">"edit"</span><span class="p">);</span>
      <span class="c1">// Solo usuarios logueados podr√°n acceder al controlador excepto a show():</span>
      <span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s2">"auth"</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">except</span><span class="p">(</span><span class="s2">"show"</span><span class="p">);</span>
   <span class="p">}</span>
</code></pre></div></div>

<p>El <em>middleware auth</em> tambi√©n puede usarse en el enrutador, para proteger el acceso a una ruta concreta, as√≠:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nc">Route</span><span class="o">::</span><span class="nf">get</span><span class="p">(</span><span class="s1">'/ruta-a-proteger'</span><span class="p">,</span> <span class="s1">'Controlador@metodo'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">middleware</span><span class="p">(</span><span class="s1">'auth'</span><span class="p">);</span>
</code></pre></div></div>
:ET