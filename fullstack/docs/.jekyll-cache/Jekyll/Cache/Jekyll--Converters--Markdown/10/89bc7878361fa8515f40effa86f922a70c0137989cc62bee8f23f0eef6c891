I"c<h2 class="no_toc" id="29-migraciones">2.9. Migraciones</h2>

<ul id="markdown-toc">
  <li><a href="#291-crear-tablas-mediante-las-migraciones" id="markdown-toc-291-crear-tablas-mediante-las-migraciones">2.9.1. Crear tablas mediante las migraciones</a></li>
  <li><a href="#292-modificar-tablas-mediante-migraciones" id="markdown-toc-292-modificar-tablas-mediante-migraciones">2.9.2. Modificar tablas mediante migraciones</a></li>
  <li><a href="#293-otras-operaciones-en-las-migraciones" id="markdown-toc-293-otras-operaciones-en-las-migraciones">2.9.3. Otras operaciones en las migraciones</a></li>
  <li><a href="#294-seeding" id="markdown-toc-294-seeding">2.9.4. Seeding</a></li>
  <li><a href="#295-faker-rellenar-las-tablas-con-datos-realistas" id="markdown-toc-295-faker-rellenar-las-tablas-con-datos-realistas">2.9.5. Faker: rellenar las tablas con datos realistas</a></li>
  <li><a href="#296-automatizar-el-seeding" id="markdown-toc-296-automatizar-el-seeding">2.9.6. Automatizar el seeding</a></li>
  <li><a href="#297-chuleta-de-comandos-habituales" id="markdown-toc-297-chuleta-de-comandos-habituales">2.9.7. Chuleta de comandos habituales</a></li>
</ul>

<p>Las <strong>migraciones</strong> constituyen una especie de <strong>control de versiones para la base de datos</strong> de la aplicación, puesto que permiten:</p>

<ul>
  <li>Crear y modificar tablas de la BD con independencia del SGBD que estemos usando y sin usar SQL.</li>
  <li>Controlar la versión de la base de datos, puesto que cada migración es como un <em>commit</em>.</li>
  <li>Desplegar la base de datos en otros servidores y dejarla exactamente en el estado que se corresponde con el código.</li>
</ul>

<p>Con las migraciones, por tanto, no solo podrás reconstruir la base de datos en menos de lo que tarda en decirse “Von Neumann” (algo muy práctico cuando estás en fase de desarrollo y detrozas las tablas cada dos por tres), sino que podrás parchearla en producción en un tiempo record y con riesgo cero.</p>

<p>(Solo el que ha tenido que parchear la base de datos de una aplicación en producción antes de la existencia de las migraciones sabe la tranquilidad de espíritu que esto produce y la cantidad de problemas embarazosos que te quita de encima).</p>

<p>Antes de empezar, recuerda que, para que cualquier operación sobre la base de datos funcione, <strong>debes tener bien configurado el archivo .env</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DB_HOST=localhost
DB_DATABASE=mi-base-de-datos
DB_USERNAME=mi-usuario-de-BD
DB_PASSWORD=mi-password-de-BD
</code></pre></div></div>

<h3 id="291-crear-tablas-mediante-las-migraciones">2.9.1. Crear tablas mediante las migraciones</h3>

<p>La primera cosa para las que sirven las migraciones es para <strong>crear las tablas de tu aplicación</strong>. Olvídate de exportar e importar a mano el archivo SQL de tu base de datos. Eso lo hacían los cromañones.</p>

<p>Vamos a trabajar con un ejemplo, como siempre. Imagina que tenemos una tabla llamada <em>Clients</em> con los campos típicos: <em>id</em>, <em>name</em>, <em>address</em>, etc.</p>

<p>De acuerdo. Creemos, paso a paso, las migraciones de esta tabla:</p>

<p><strong>Paso 1</strong>: Inicializar el sistema de migraciones de Laravel (<strong>¡no es necesario en versiones modernas de Laravel!</strong>). Si ya lo hemos hecho antes, nos dará un error al intentar hacerlo otra vez:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan migrate:install
</code></pre></div></div>

<p><strong>Paso 2</strong>: Crear la migración para la tabla Clients:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan make:migration create_clients_table
</code></pre></div></div>

<p>Esto generará un fichero en la carpeta <em>/database/migrations</em> cuyo nombre contendrá un <em>timestamp</em> o marca de tiempo. Vamos, que contendrá un numerajo con la fecha y hora actual. Algo tan bonito como <em>/database/migrations/2025_12_26_072434_create_clients_table.php</em></p>

<p>Si editas ese fichero, verás dos métodos:</p>

<ul>
  <li><strong>up()</strong> → se ejecuta cuando se lanza la migración. Se encarga de crear la tabla en la base de datos.</li>
  <li><strong>down()</strong> → se ejecuta cuando se cancela la migración. Se encarga de eliminar la tabla de la base de datos.</li>
</ul>

<p><strong>Paso 3</strong>: Editar el fichero <em>/database/migrations/2025_12_26_072434_create_clients_table.php</em>:</p>

<p>En el método <em>up()</em> tienes que indicar las columnas que tendrá la tabla. Por ejemplo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">function</span> <span class="n">up</span><span class="p">()</span> <span class="p">{</span>
    <span class="nc">Schema</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span><span class="s1">'users'</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
       <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">id</span><span class="p">();</span>     <span class="c1">// PRIMARY KEY UNSIGNED BIGINT AUTOINCREMENT</span>
       <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">string</span><span class="p">(</span><span class="s1">'name'</span><span class="p">,</span><span class="mi">75</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">unique</span><span class="p">();</span> <span class="c1">// VARCHAR</span>
       <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">text</span><span class="p">(</span><span class="s1">'address'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">nullable</span><span class="p">();</span> <span class="c1">// TEXT</span>
       <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">integer</span><span class="p">(</span><span class="s1">'level'</span><span class="p">);</span>            <span class="c1">// INT</span>
       <span class="nv">$table</span><span class="o">-&gt;</span><span class="nb">date</span><span class="p">(</span><span class="s1">'birth_date'</span><span class="p">);</span>          <span class="c1">// DATE</span>
       <span class="c1">// La siguiente línea crea campos created_at y updated_at</span>
       <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">timestamps</span><span class="p">();</span>  
    <span class="p">});</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">function</span> <span class="n">down</span><span class="p">()</span> <span class="p">{</span>
    <span class="nc">Schema</span><span class="o">::</span><span class="nf">drop</span><span class="p">(</span><span class="s1">'users'</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>Paso 4</strong>: Lanzar las migraciones.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan migrate
</code></pre></div></div>

<p>Esto creará las tablas que no se hayan creado aún. Es decir, si una migración ya se ha lanzado con anterioridad, no se vuelve a ejecutar para no perder los datos que pudieran existir en esas tablas.</p>

<p><strong>Paso 5</strong>: Revertir las migraciones (si es necesario)</p>

<p>Si necesitas revertir la última migración, es decir, dehacer el último <em>commit</em>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan migrate:rollback
</code></pre></div></div>

<p>O puedes indicar cuántas migraciones quieres deshacer con <em>step = n</em>. Por ejemplo, para deshacer las 3 últimas:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan migrate:rollback --step=3
</code></pre></div></div>

<p>Durante el desarrollo, es útil hacer retroceder la BD a su estado original:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan migrate:refresh
</code></pre></div></div>

<p>¡Cuidado! Estas acciones son destructivas. Pero, por supuesto, hay una forma de modificar una tabla sin borrarla y volver a crearla. Es lo que vamos a hacer a continuación.</p>

<h3 id="292-modificar-tablas-mediante-migraciones">2.9.2. Modificar tablas mediante migraciones</h3>

<p>Si necesitas <strong>modificar una tabla que ya existe</strong> (por ejemplo, para añadir o eliminar campos), tienes dos opciones:</p>

<ol>
  <li>Modificar la migración original (en la que se crea la tabla) para añadir o eliminar el campo afectado. Esto te obligará a lanzar la migración de nuevo y, por lo tanto, la tabla se reconstruirá y todos los datos que pudiera contener se perderán.</li>
  <li>Crear una nueva migración en la que únicamente se haga la modificación de la tabla, sin tocar el resto. Esto respetará los datos que la tabla ya pudiera contener.</li>
</ol>

<p>Como es lógico, la opción 2 será la que preferiremos si la aplicación ya está en producción y necesitamos modificar la estructura de la base de datos. En cambio, durante el desarrollo, puede ser más simple utilizar la opción 1.</p>

<p>Supongamos que queremos añadir un campo <em>email</em> a la tabla <em>Clients</em> del apartado anterior. Si optas por la opción 2, es decir, por crear una nueva migración que se encargue de hacer esa modificación en la tabla sin alterar sus datos, la forma de proceder es la siguiente:</p>

<p><strong>Paso 1</strong>. Crear la migración:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan make:migration add_email_to_clients --table=clients
</code></pre></div></div>

<p>(Nota: puedes asignar el nombre que quieras a las migraciones, pero Laravel aconseja utilizar las convenciones que ves en estos ejemplos para simplificarnos la vida)</p>

<p><strong>Paso 2</strong>: Editar la migración <em>/database/migration/add_email_to_clients.php</em> para añadir, en el método <em>up()</em>, el campo nuevo; y, en el método <em>down()</em>, especificaremos qué hay que hacer en caso de que se fuerce un rollback de esta migración:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">up</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">Schema</span><span class="o">::</span><span class="nf">table</span><span class="p">(</span><span class="s1">'clients'</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">string</span><span class="p">(</span><span class="s1">'email'</span><span class="p">)</span><span class="o">-&gt;</span><span class="nf">after</span><span class="p">(</span><span class="s1">'address'</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">function</span> <span class="n">down</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">Schema</span><span class="o">::</span><span class="nf">table</span><span class="p">(</span><span class="s1">'clients'</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="kt">Blueprint</span> <span class="nv">$table</span><span class="p">)</span> <span class="p">{</span>
            <span class="nv">$table</span><span class="o">-&gt;</span><span class="nf">dropColumn</span><span class="p">(</span><span class="s1">'email'</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span>
</code></pre></div></div>

<h3 id="293-otras-operaciones-en-las-migraciones">2.9.3. Otras operaciones en las migraciones</h3>

<p>Las migraciones pueden usarse para cualquier otra operación sobre la estructura de la base de datos, como:</p>

<ul>
  <li>Cambiar tipos de columnas.</li>
  <li>Cambiar atributos de columnas (null, unique, default…)</li>
  <li>Cambiar o asignar claves primarias y ajenas.</li>
</ul>

<p>Las migraciones construídas de este modo nos permitirán reproducir la base de datos en cualquier servidor o actualizarla en cualquier momento sobre una aplicación en producción sin necesidad de programar parches o exportar la BD a un archivo SQL para importarlo en otro servidor.</p>

<p>Como te dije al principio, solo el que ha hecho alguna vez alguna de estas cosas a mano sabe la cantidad de trabajo que las migraciones ahorran en el mantenimiento de una aplicación y la asombrosa cantidad de errores embarazosos que evita.</p>

<p>Más info en: <a href="https://laravel.com/docs/migrations">https://laravel.com/docs/migrations</a></p>

<h3 id="294-seeding">2.9.4. Seeding</h3>

<p>El <strong><em>seeding</em></strong> es una técnica adicional a la de las migraciones que permite <strong>cargar con datos las tablas</strong> de la base de datos.</p>

<p>Es muy práctico en estos supuestos:</p>

<ul>
  <li>Si quieres tener un conjunto de <strong>datos de prueba</strong> en tu base de datos de desarrollo, esa que destrozas periódicamente cuando haces pruebas. Con un solo comando, tendrás la base de datos reconstruída después de cada destrozo.</li>
  <li>Si necesitas cargar algunos datos mínimos en algunas tablas para que la aplicación, una vez desplegada en un servidor de producción, funcione (por ejemplo, para crear un usuario administrador en la tabla <em>Users</em> o para crear algunas entradas en una tabla <em>Options</em>).</li>
</ul>

<p>Para crear un <em>seeder</em> (por ejemplo, para la tabla <em>users</em>), sigue estos pasos:</p>

<p><strong>Paso 1</strong>. Ejecuta el comando:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>php artisan make:seeder UsersSeeder
</code></pre></div></div>

<p><strong>Paso 2</strong>. Edita el archivo <em>/database/seeders/UsersSeeder.php</em> y añade algo como esto al método <em>up()</em> (por supuesto, modifica el código para adaptarlo a tu tabla y a tus datos):</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">run</span><span class="p">()</span> <span class="p">{</span>
        <span class="nc">User</span><span class="o">::</span><span class="nf">truncate</span><span class="p">();</span>  <span class="c1">// Opativo: vacía la tabla antes de rellenarla de nuevo</span>
        <span class="nc">User</span><span class="o">::</span><span class="nf">create</span><span class="p">([</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Stephen Falken'</span><span class="p">,</span>
            <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'Oregon 97, Goose Island'</span><span class="p">,</span>
            <span class="s1">'email'</span> <span class="o">=&gt;</span> <span class="s1">'sfalken@norad.com'</span><span class="p">,</span>
            <span class="s1">'birth_date'</span> <span class="o">=&gt;</span> <span class="s1">'1932-09-03'</span><span class="p">,</span>
        <span class="p">]);</span>
        <span class="nc">User</span><span class="o">::</span><span class="nf">create</span><span class="p">([</span>
            <span class="s1">'name'</span> <span class="o">=&gt;</span> <span class="s1">'Jennifer Mack'</span><span class="p">,</span>
            <span class="s1">'address'</span> <span class="o">=&gt;</span> <span class="s1">'Richmond Av 3385, Seattle'</span><span class="p">,</span>
            <span class="s1">'email'</span> <span class="o">=&gt;</span> <span class="s1">'jenmack876@gmail.com'</span><span class="p">,</span>
            <span class="s1">'birth_date'</span> <span class="o">=&gt;</span> <span class="s1">'1967-01-28'</span><span class="p">,</span>
        <span class="p">]);</span>        
    <span class="p">}</span>
</code></pre></div></div>

<p><strong>Paso 3</strong>. Ejecuta este comando para lanzar el <em>seeder</em> y que los datos se carguen en tu tabla:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan db:seed --class=UsersSeeder
</code></pre></div></div>

<p>Esto cargará solo dos registros en la tabla <em>users</em>. Si quieres más, solo tienes que crear nuevas líneas <em>insert()</em> en el método <em>up()</em>.</p>

<h3 id="295-faker-rellenar-las-tablas-con-datos-realistas">2.9.5. Faker: rellenar las tablas con datos realistas</h3>

<p>Con Laravel también podemos rellenar las tablas con datos de prueba o ejemplo <strong>falsos pero que parezcan realistas</strong>, gracias a <strong><em>Faker</em></strong>, una librería externa de PHP que se instala con Laravel, creada precisamente para esto.</p>

<p>Lo vemos con un ejemplo. Supongamos que quieres rellenar la tabla <em>user</em> con 100 registros de prueba realistas. Lo único que tienes que hacer es:</p>

<p><strong>Paso 1</strong>. Crear el <em>seeder</em> para la tabla <em>users</em> (si no lo habías hecho ya):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>php artisan make:seeder UsersSeeder
</code></pre></div></div>

<p><strong>Paso 2</strong>. Editar el <em>seeder</em> (<em>/database/seeders/UsersSeeder.php</em>) para añadir la creación de datos con <em>Faker</em>. Por ejemplo, para 100 registros:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">public</span> <span class="k">function</span> <span class="n">run</span><span class="p">()</span> <span class="p">{</span>
    <span class="nv">$faker</span> <span class="o">=</span> <span class="nc">Faker</span><span class="o">::</span><span class="nf">create</span><span class="p">(</span><span class="s1">'en_US'</span><span class="p">);</span> <span class="c1">// Cambiar por 'es_ES' para español</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nc">User</span><span class="o">::</span><span class="nf">create</span><span class="p">([</span>
            <span class="s1">'name'</span>       <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
            <span class="s1">'address'</span>    <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="n">address</span><span class="p">,</span>
            <span class="s1">'email'</span>      <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="nf">unique</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">safeEmail</span><span class="p">,</span>
            <span class="s1">'birth_date'</span> <span class="o">=&gt;</span> <span class="nv">$faker</span><span class="o">-&gt;</span><span class="nb">date</span><span class="p">(</span><span class="s1">'Y-m-d'</span><span class="p">,</span> <span class="s1">'2010-01-01'</span><span class="p">),</span> <span class="c1">// genera fechas de nacimiento hasta 2010</span>
            <span class="s1">'created_at'</span> <span class="o">=&gt;</span> <span class="nf">now</span><span class="p">(),</span>
            <span class="s1">'updated_at'</span> <span class="o">=&gt;</span> <span class="nf">now</span><span class="p">(),</span>
        <span class="p">]);</span>
    <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<p><strong>Paso 3</strong>. No olvides lanzar el seeder:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>php artisan db:seed <span class="nt">--class</span><span class="o">=</span>UsersSeeder
</code></pre></div></div>

<p>Más información sobre Faker en <a href="https://fakerphp.org/">https://fakerphp.org/</a></p>

<h3 id="296-automatizar-el-seeding">2.9.6. Automatizar el seeding</h3>

<p>Lanzar los seeders de uno en uno puede ser muy tedioso. Puedes lanzar varios seeders con un solo comando si haces lo siguiente:</p>

<p><strong>Paso 1</strong>. Edita el fichero <em>/database/seeders/DatabaseSeeder.php</em></p>

<p><strong>Paso 2</strong>. Añade a la función <em>run()</em> los <em>seeders</em> que quieras ejecutar automáticamente:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$this</span><span class="o">-&gt;</span><span class="nf">call</span><span class="p">([</span>
         <span class="nc">UsersSeeder</span><span class="o">::</span><span class="n">class</span><span class="p">,</span> <span class="nc">OtroSeeder</span><span class="o">::</span><span class="n">class</span><span class="p">,</span> <span class="n">etc</span>
    <span class="p">)];</span>  
</code></pre></div></div>

<p><strong>Paso 3</strong>. ¡Y listo! Al ejecutar el comando <code class="language-plaintext highlighter-rouge">db:seed</code> de Artisan, sin indicar la clase, se lanzarán todos los seeders que hayas añadido a <em>run()</em>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ php artisan db:seed
</code></pre></div></div>

<h3 id="297-chuleta-de-comandos-habituales">2.9.7. Chuleta de comandos habituales</h3>

<p>Por último, te muestro un resumen con los comandos más útiles sobre migraciones y seeders para que puedas consultarlos cuando lo necesites:</p>

<ul>
  <li>
    <p>Lanzar todas las migraciones pendientes:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate
</code></pre></div>    </div>
  </li>
  <li>
    <p>Crear la migración para crear una tabla:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan make:migration &lt;nombre&gt; --create=&lt;tabla&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>Crear una migración para modificar una tabla ya existente:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan make:migration &lt;nombre&gt; --table=&lt;tabla&gt;
</code></pre></div>    </div>
  </li>
  <li>
    <p>Retroceder un paso en todas las migraciones:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate:rollback
</code></pre></div>    </div>
  </li>
  <li>
    <p>Retroceder N pasos en todas las migraciones:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate:rollback --step=N
</code></pre></div>    </div>
  </li>
  <li>
    <p>Deshacer todas las migraciones que se hayan ejecutado hasta ahora (resetear la base de datos):</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate:reset
</code></pre></div>    </div>
  </li>
  <li>
    <p>Resetear la base de datos y volver a reconstruirla lanzando todas las migraciones:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate:refresh
</code></pre></div>    </div>
  </li>
  <li>
    <p>Resetear la base de datos, reconstruirla y llenarla de datos con los seeders de <em>DatabaseSeeder</em>:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate:refresh --seed
</code></pre></div>    </div>
  </li>
  <li>
    <p>Eliminar todas las tablas y lanzar todas las migraciones de nuevo:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate:fresh
</code></pre></div>    </div>
  </li>
  <li>
    <p>Eliminar todas las tablas y lanzar todas las migraciones y todos los seeders de nuevo:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> $ php artisan migrate:fresh --seed
</code></pre></div>    </div>
  </li>
</ul>
:ET