I"‰i<h2 class="no_toc" id="14-interacci√≥n-entre-mariadb-y-php">1.4. Interacci√≥n entre MariaDB y PHP</h2>

<ul id="markdown-toc">
  <li><a href="#141-mysqlmariadb-con-php4-ojo-obsoleto" id="markdown-toc-141-mysqlmariadb-con-php4-ojo-obsoleto">1.4.1. MySQL/MariaDB con PHP4 (¬°Ojo! ¬°Obsoleto!)</a></li>
  <li><a href="#142-mysqlmariadb-a-partir-de-php5" id="markdown-toc-142-mysqlmariadb-a-partir-de-php5">1.4.2. MySQL/MariaDB a partir de PHP5</a>    <ul>
      <li><a href="#formas-de-acceder-a-bases-de-datos-en-php" id="markdown-toc-formas-de-acceder-a-bases-de-datos-en-php">Formas de acceder a bases de datos en PHP</a></li>
    </ul>
  </li>
  <li><a href="#143-inserci√≥n-modificaci√≥n-y-borrado-de-datos-con-pdo" id="markdown-toc-143-inserci√≥n-modificaci√≥n-y-borrado-de-datos-con-pdo">1.4.3. Inserci√≥n, modificaci√≥n y borrado de datos con PDO</a></li>
  <li><a href="#144-consultas-con-pdo" id="markdown-toc-144-consultas-con-pdo">1.4.4. Consultas con PDO</a></li>
  <li><a href="#145-mejorando-la-implementaci√≥n-de-consultas" id="markdown-toc-145-mejorando-la-implementaci√≥n-de-consultas">1.4.5. Mejorando la implementaci√≥n de consultas</a></li>
  <li><a href="#146-formas-de-hacer-fetch" id="markdown-toc-146-formas-de-hacer-fetch">1.4.6. Formas de hacer fetch</a></li>
</ul>

<p>A partir de ahora, vamos a referirnos a MySQL/MariaDB indistintamente. Este ser√° el gestor de bases de datos relacionales que vamos a usar a lo largo del curso. La adaptaci√≥n a otros gestores, en cualquier caso, es muy simple.</p>

<p>MySQL/MariaDB, como ya hemos visto, es un SGBD relacional de probada eficacia. La interacci√≥n con √©l resulta eficiente y segura para casi cualquier aplicaci√≥n web que podamos concebir.</p>

<h3 id="141-mysqlmariadb-con-php4-ojo-obsoleto">1.4.1. MySQL/MariaDB con PHP4 (¬°Ojo! ¬°Obsoleto!)</h3>

<p>En la red hay mucho c√≥digo PHP obsoleto que <strong><em>NO debes utilizar bajo ning√∫n concepto</em></strong> porque es muy inseguro.</p>

<p>Si encuentras c√≥digo que se parece al siguiente, huye de esa p√°gina porque no te va a ayudar:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// *** C√ìDIGO OBSOLETO -- ¬°¬°¬°NO USAR!!!***</span>

<span class="c1">// Conectamos con MySQL</span>
<span class="nb">mysql_connect</span><span class="p">(</span><span class="s2">"URL"</span><span class="p">,</span><span class="s2">"nombre_usuario"</span><span class="p">,</span><span class="s2">"contrase√±a"</span><span class="p">);</span>

<span class="c1">// Seleccionamos la base de datos con la que vamos a trabajar</span>
<span class="nb">mysql_select_db</span><span class="p">(</span><span class="s2">"nombre_base_de_datos"</span><span class="p">);</span>

<span class="c1">// Ejecutamos una sentencia SQL</span>
<span class="nb">mysql_query</span><span class="p">(</span><span class="s2">"INSERT INTO clientes (nombre,telefono) VALUES ('</span><span class="nv">$nombre</span><span class="s2">','</span><span class="nv">$telefono</span><span class="s2">')"</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="142-mysqlmariadb-a-partir-de-php5">1.4.2. MySQL/MariaDB a partir de PHP5</h3>

<p>Desde PHP5, se utiliza <strong>una biblioteca de clases para acceder a los diferentes SGBDs</strong>.</p>

<p>Todos los nuevos desarrollos deber√≠an usar las bibliotecas de clases y prescindir de las viejas librer√≠as de funciones.</p>

<h4 id="formas-de-acceder-a-bases-de-datos-en-php">Formas de acceder a bases de datos en PHP</h4>

<p>PHP proporciona varios mecanismos para acceder a bases de datos (ya te lo dije antes: en PHP, casi todo se puede hacer de varias maneras distintas):</p>

<ul>
  <li>
    <p><strong>Forma 1: Usar la extensi√≥n mysqli en su forma procedimental.</strong></p>

    <p>Esta forma recuerda mucho a PHP4, pero cambiando la palabra ‚Äúmysql‚Äù por ‚Äúmysqli‚Äù.</p>

    <p>Por ejemplo, la funci√≥n <em>mysql_connect()</em> ahora se llama <em>mysqli_connect()</em> (la ‚Äúi‚Äù significa ‚Äúimproved‚Äù, es decir, ‚Äúmejorado‚Äù).</p>

    <p>Esta forma es apta para programadores/as perezosos y anticuados, que no quieren pasarse a la programaci√≥n orientada a objetos y se sienten c√≥modos con la forma de codificaci√≥n tradicional. Pero ese no es tu caso, ¬øverdad? As√≠ que nunca utilizaremos la forma procedimental.</p>
  </li>
  <li>
    <p><strong>Forma 2: Usar la extensi√≥n mysqli en su forma orientada a objetos.</strong></p>

    <p>Se accede a la base de datos a trav√©s de un objeto de la clase <em>mysqli</em>. Es decir, se crea una instancia (con <code class="language-plaintext highlighter-rouge">new mysqli()</code>) y, a trav√©s de ella, se tiene acceso a todos los m√©todos para interactuar con la base de datos.</p>

    <p>Si en lugar de una base de datos MySQL, trabajamos con otro gestor de base de datos, hay que crear un objeto de otro tipo. Por ejemplo, la clase <em>SQLite3</em> sirve para conectar con bases de datos SQLite. Hay otros gestores que solo ofrecen la forma procedimental.</p>
  </li>
  <li>
    <p><strong>Forma 3: Usar la extensi√≥n PDO.</strong></p>

    <p>A partir de PHP 5.1, existe una clase gen√©rica, llamada <em>PDO</em>, que permite acceder a cualquier gestor de bases de datos mediante el mismo conjunto de m√©todos. Es lo que se llama una <em>capa de abstracci√≥n de acceso a datos</em></p>

    <p>Esto significa que, independientemente de la base de datos que se est√© utilizando, PDO permite utilizar los mismos m√©todos para realizar consultas y obtener datos, por lo que es la forma de trabajo m√°s flexible y la que vamos a utilizar en este curso.</p>
  </li>
</ul>

<h3 id="143-inserci√≥n-modificaci√≥n-y-borrado-de-datos-con-pdo">1.4.3. Inserci√≥n, modificaci√≥n y borrado de datos con PDO</h3>

<p>Vamos a ver c√≥mo funciona la clase <em>PDO</em> mediante unos cuantos ejemplos. En primer lugar, lanzaremos una inserci√≥n de datos.</p>

<p>Imagina que tenemos una base de datos MySQL o MariaDB llamada <em>mi-base-de-datos</em> que contiene una tabla de clientes donde guardamos, entre otras cosas, los nombres y los tel√©fonos de los clientes.</p>

<p>Insertar un registro en esa tabla desde PHP se logra en solo dos pasos:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// Datos de conexi√≥n</span>
<span class="nv">$dsn</span> <span class="o">=</span> <span class="s2">"mysql:host=servidor;dbname=mi-base-de-datos;charset=utf8"</span><span class="p">;</span>
<span class="nv">$usuario</span> <span class="o">=</span> <span class="s2">"nombre-de-usuario"</span><span class="p">;</span>
<span class="nv">$clave</span>   <span class="o">=</span> <span class="s2">"password"</span><span class="p">;</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Conexi√≥n con PDO</span>
    <span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PDO</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$usuario</span><span class="p">,</span> <span class="nv">$clave</span><span class="p">);</span>
    <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="nf">setAttribute</span><span class="p">(</span><span class="no">PDO</span><span class="o">::</span><span class="no">ATTR_ERRMODE</span><span class="p">,</span> <span class="no">PDO</span><span class="o">::</span><span class="no">ERRMODE_EXCEPTION</span><span class="p">);</span>

    <span class="c1">// Sentencia preparada para insertar</span>
    <span class="nv">$sql</span> <span class="o">=</span> <span class="s2">"INSERT INTO clientes (nombre, telefono) VALUES (:nombre, :telefono)"</span><span class="p">;</span>
    <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="nf">prepare</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>

    <span class="c1">// Ejecutar la consulta con los valores</span>
    <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="nf">execute</span><span class="p">([</span>
        <span class="s2">":nombre"</span>  <span class="o">=&gt;</span> <span class="nv">$nombre</span><span class="p">,</span>
        <span class="s2">":telefono"</span><span class="o">=&gt;</span> <span class="nv">$telefono</span>
    <span class="p">]);</span>

    <span class="k">echo</span> <span class="s2">"Registro insertado correctamente"</span><span class="p">;</span>

<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">PDOException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="s2">"Error: "</span> <span class="mf">.</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Si sustituyes la sentencia INSERT por cualquier otra instrucci√≥n SQL v√°lida, tambi√©n funcionar√°, con la excepci√≥n de SELECT, que se maneja de otra manera que enseguida veremos.</p>

<p>Por lo tanto, el c√≥digo anterior te puede servir de base para ejecutar cualquier INSERT, UPDATE o DELETE sobre tu base de datos. O incluso sentencias de definici√≥n de la base de datos, como CREATE TABLE o ALTER TABLE (siempre que el usuario con el que te est√©s conectando tenga permisos para ejecutarlas, claro)</p>

<h3 id="144-consultas-con-pdo">1.4.4. Consultas con PDO</h3>

<p>Hemos dicho que las sentencias SELECT se lanzan desde PHP de un modo diferente al resto. ¬øPor qu√© ser√°?</p>

<p>La respuesta es sencilla de entender: la ejecuci√≥n de consultas (SELECT) produce la devoluci√≥n de un conjunto de registros, mientras que cualquier otra instucci√≥n (INSERT, UPDATE, DELETE o lo que sea) no devuelve ning√∫n registro.</p>

<p>Los registros obtenidos como resultado de un SELECT se manejan en PHP con un objeto denominado <strong>cursor</strong>. Un cursor no es m√°s que un puntero al conjunto de resultados que se√±ala al registro que se va a procesar a continuaci√≥n.</p>

<p>Es decir: se parece al cursor de tu procesador de textos, que te indica el lugar en el que vas a insertar o borrar caracteres.</p>

<p>En el caso de los cursores MySQL, no te permiten borrar nada. El cursor solo se√±ala un registro concreto dentro de los resultados del SELECT.</p>

<p>Observa c√≥mo se hace un SELECT en este ejemplo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>
<span class="c1">// Datos de conexi√≥n</span>
<span class="nv">$dsn</span> <span class="o">=</span> <span class="s2">"mysql:host=servidor;dbname=database;charset=utf8mb4"</span><span class="p">;</span>
<span class="nv">$usuario</span> <span class="o">=</span> <span class="s2">"user"</span><span class="p">;</span>
<span class="nv">$clave</span>   <span class="o">=</span> <span class="s2">"password"</span><span class="p">;</span>

<span class="c1">// Conexi√≥n con PDO</span>
<span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PDO</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$usuario</span><span class="p">,</span> <span class="nv">$clave</span><span class="p">);</span>

<span class="c1">// Ejecutamos la consulta</span>
<span class="nv">$sql</span> <span class="o">=</span> <span class="s2">"SELECT nombre, telefono FROM Clientes"</span><span class="p">;</span>
<span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="nv">$sql</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$stmt</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">die</span><span class="p">(</span><span class="s2">"Error en la conexi√≥n o en la consulta: "</span> <span class="mf">.</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>
<span class="nt">&lt;table</span> <span class="na">border=</span><span class="s">"1"</span> <span class="na">align=</span><span class="s">"center"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
        <span class="nt">&lt;th&gt;</span>Nombre<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;th&gt;</span>Tel√©fono<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
    <span class="cp">&lt;?php</span> 
        <span class="k">while</span> <span class="p">(</span><span class="nv">$cliente</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="nf">fetch</span><span class="p">(</span><span class="no">PDO</span><span class="o">::</span><span class="no">FETCH_ASSOC</span><span class="p">))</span> <span class="p">{</span> 
           <span class="k">echo</span> <span class="s2">"&lt;tr&gt;"</span><span class="p">;</span>
           <span class="k">echo</span> <span class="s2">"&lt;td&gt;"</span><span class="mf">.</span><span class="nv">$cliente</span><span class="p">[</span><span class="s2">"nombre"</span><span class="p">]</span><span class="mf">.</span><span class="s2">"&lt;/td&gt;"</span><span class="p">;</span>
           <span class="k">echo</span> <span class="s2">"&lt;td&gt;"</span><span class="mf">.</span><span class="nv">$cliente</span><span class="p">[</span><span class="s2">"telefono"</span><span class="p">]</span><span class="mf">.</span><span class="s2">"&lt;/td&gt;"</span><span class="p">;</span>
           <span class="k">echo</span> <span class="s2">"&lt;/tr&gt;"</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="cp">?&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div>

<p>Probablemente ya lo hayas captado sin necesidad de explicaciones adicionales, pero, por si acaso no es as√≠, ah√≠ va una explicaci√≥n adicional gratuita.</p>

<p>Cuando se lanza una consulta contra una base de datos desde PHP, la base de datos nos devuelve el resultado en un <em>cursor</em>, como hemos dicho. Ese objeto de tipo cursor lo almacenamos en una variable que, en este ejemplo, hemos llamado <em>$stmt</em> (abreviatura de ‚ÄúStatement‚Äù).</p>

<p>Recuerda que un cursor es un apuntador a un conjunto de resultados. Cuando un cursor est√° reci√©n abierto, <em>siempre apunta al primer registro de ese conjunto de resultados</em>.</p>

<p>Nuestra variable <em>$stmt</em> es un objeto y, como cualquier objeto, contiene una serie de m√©todos. Entre esos m√©todos, cualquier cursor siempre nos ofrecer√° un m√©todo important√≠simo llamado <strong><em>fetch()</em></strong>.</p>

<p>El m√©todo <em>fetch()</em> nos devuelve el siguiente dato almacenado en el cursor (en nuestro caso, un registro completo) y hace avanzar al cursor para que apunte al siguiente dato (en nuestro caso, el siguiente registro). As√≠, lo deja preparado para recuperar otro registro en la siguiente iteraci√≥n.</p>

<p>Por eso hemos colocado la instrucci√≥n <em>fetch()</em> en un bucle.</p>

<p>Cuando el cursor est√° reci√©n abierto, el primer <em>fetch()</em> nos devuelve el primer registro del resultado. Es decir, el primer cliente. Podemos acceder a los campos de ese registro (como ‚Äúnombre‚Äù o ‚Äútel√©fono‚Äù) accediendo al registro como si fuera un array ($registro[‚Äúnomnre‚Äù], $registro[‚Äútelefono‚Äù], etc). Por eso el m√©todo no se llama solo <em>fetch()</em>, sino <em>fetch_array()</em>.</p>

<p>Pero <em>fetch()</em> no solo recupera el primer registro, sino que hace avanzar el cursor para que se quede apuntando al segundo. De este modo, en la siguiente iteraci√≥n del bucle, <em>fetch()</em> nos recupera <em>el segundo</em> registro (el segundo cliente), y el cursor queda apuntando al tercero, listo para la siguiente iteraci√≥n.</p>

<p>Cuando no quedan m√°s registros que procesar, <em>fetch()</em> devuelve <em>false</em> y el bucle termina. De ese modo, habremos procesado f√°cilmente todo el conjunto de resultados devueltos por la consulta.</p>

<h3 id="145-mejorando-la-implementaci√≥n-de-consultas">1.4.5. Mejorando la implementaci√≥n de consultas</h3>

<p>Podr√≠amos hacer muchas consideraciones adicionales sobre PHP, pero esto solo es una introducci√≥n al lenguaje, as√≠ que no profundizaremos mucho.</p>

<p>Sin embargo, me gustar√≠a que vieras una implementaci√≥n alternativa del c√≥digo anterior (PHP es muy flexible y admite muchas maneras de hacer lo mismo), porque ilustra algunas caracter√≠sticas de PHP que me parece que debes conocer:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- PARTE 1: L√≥gica de la consulta --&gt;</span>
<span class="cp">&lt;?php</span>
<span class="c1">// Configuraci√≥n de la conexi√≥n</span>
<span class="nv">$dsn</span> <span class="o">=</span> <span class="s2">"mysql:host=servidor;dbname=database;charset=utf8mb4"</span><span class="p">;</span>
<span class="nv">$usuario</span> <span class="o">=</span> <span class="s2">"user"</span><span class="p">;</span>
<span class="nv">$clave</span>   <span class="o">=</span> <span class="s2">"password"</span><span class="p">;</span>

<span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Conexi√≥n con PDO</span>
    <span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PDO</span><span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$usuario</span><span class="p">,</span> <span class="nv">$clave</span><span class="p">);</span>
    <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="nf">setAttribute</span><span class="p">(</span><span class="no">PDO</span><span class="o">::</span><span class="no">ATTR_ERRMODE</span><span class="p">,</span> <span class="no">PDO</span><span class="o">::</span><span class="no">ERRMODE_EXCEPTION</span><span class="p">);</span>

    <span class="c1">// Ejecutamos la consulta</span>
    <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s2">"SELECT nombre, telefono FROM Clientes"</span><span class="p">);</span>
    <span class="nv">$clientes</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="nf">fetchAll</span><span class="p">(</span><span class="no">PDO</span><span class="o">::</span><span class="no">FETCH_ASSOC</span><span class="p">);</span>

<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nc">PDOException</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">die</span><span class="p">(</span><span class="s2">"Error en la conexi√≥n o consulta: "</span> <span class="mf">.</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="nf">getMessage</span><span class="p">());</span>
<span class="p">}</span>
<span class="cp">?&gt;</span>

<span class="c">&lt;!-- PARTE 2: Mostrar los datos de la consulta--&gt;</span>
    <span class="nt">&lt;table&gt;</span>
        <span class="nt">&lt;tr&gt;</span>
            <span class="nt">&lt;th&gt;</span>Nombre<span class="nt">&lt;/th&gt;</span>
            <span class="nt">&lt;th&gt;</span>Tel√©fono<span class="nt">&lt;/th&gt;</span>
        <span class="nt">&lt;/tr&gt;</span>
        <span class="cp">&lt;?php</span> <span class="k">foreach</span> <span class="p">(</span><span class="nv">$clientes</span> <span class="k">as</span> <span class="nv">$cliente</span><span class="p">)</span><span class="o">:</span> <span class="cp">?&gt;</span>
            <span class="nt">&lt;tr&gt;</span>
                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nv">$cliente</span><span class="p">[</span><span class="s2">"nombre"</span><span class="p">])</span> <span class="cp">?&gt;</span><span class="nt">&lt;/td&gt;</span>
                <span class="nt">&lt;td&gt;</span><span class="cp">&lt;?=</span> <span class="nb">htmlspecialchars</span><span class="p">(</span><span class="nv">$cliente</span><span class="p">[</span><span class="s2">"telefono"</span><span class="p">])</span> <span class="cp">?&gt;</span><span class="nt">&lt;/td&gt;</span>
            <span class="nt">&lt;/tr&gt;</span>
        <span class="cp">&lt;?php</span> <span class="k">endforeach</span><span class="p">;</span> <span class="cp">?&gt;</span>
    <span class="nt">&lt;/table&gt;</span>

</code></pre></div></div>

<p>Este c√≥digo es funcionalmente id√©ntico que el que ve√≠amos antes, pero tiene algunas mejoras interesantes en las que quiero que te fijes:</p>

<ol>
  <li><strong>Separa completamente la l√≥gica del problema (la extracci√≥n de datos de la BD) de su presentaci√≥n</strong>. Cuanto menos se mezcle el c√≥digo PHP con el c√≥digo HTML, menos confuso ser√° el resultado. Por eso, en esta soluci√≥n usamos <strong><em>fetchAll()</em></strong> en lugar de <em>fetch()</em>: para mover todo el resultado a un array asociativo (PDO::FETCH_ASSOC), que es un array PHP normal que podemos procesar m√°s adelante, cuando vayamos a mostrarlo.</li>
  <li><strong>Utiliza <em>&lt;?= ‚Ä¶ ?&gt;</em></strong>. Esto es una abreviatura muy habitual de <em>&lt;?php echo(‚Äú‚Ä¶‚Äù) ?&gt;</em>.</li>
  <li><strong>Utiliza <em>$pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)</em></strong>, que fuerza a que PDO lance una excepci√≥n si ocurre un error en la consulta. De otro modo, PDO no lanza excepciones, solo devuelve <em>false</em> si la consulta falla. El manejador de excepciones es m√°s seguro y puede tener en cuenta m√°s situaciones de error que la simple comprobaci√≥n de ese <em>false</em>.</li>
  <li><strong>Utiliza <em>htmlspecialchars()</em></strong>. Esto filtra cualquier contenido sospechoso que un atacante malicioso pudiera haber inyectado en tu base de datos, por lo que se considera m√°s seguro que usar solo <em>echo()</em> en aplicaciones web. Imag√≠nate que en la BD alguien hubiera logrado inyectar el c√≥digo <em>&lt;script&gt;location.href=‚ÄômiServidor.com‚Äô&lt;/script&gt;</em> en el campo <em>tel√©fono</em> de un usuario. ¬øQu√© pasar√≠a al tratar de mostrar la lista de usuarios? <em>htmlspecialchars()</em> impedir√° la ejecuci√≥n de ese c√≥digo malicioso y de cualquier otra cosa sospechosa o mal formada.</li>
</ol>

<h3 id="146-formas-de-hacer-fetch">1.4.6. Formas de hacer fetch</h3>

<p>Como has visto en los ejemplos, al hacer <em>fetch()</em> del resultado de una consulta recuperas los datos del siguiente registro, pero esto se puede lograr de varias maneras.</p>

<p>En primer lugar, tenemos dos m√©todos para hacer <em>fetch</em>:</p>
<ul>
  <li><strong><em>fetch()</em></strong> recupera el siguiente registro de la consulta.</li>
  <li><strong><em>fetchAll()</em></strong> recupera todos los registros de la consulta.</li>
</ul>

<p>Adem√°s, tanto a <em>fetch()</em> como a <em>fetchAll()</em> podemos indicarle la forma en la que queremos que se almacenen los datos recuperados en variables PHP. Por ejemplo:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s2">"SELECT id, nombre FROM usuarios"</span><span class="p">);</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$fila</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="nf">fetch</span><span class="p">(</span><span class="no">PDO</span><span class="o">::</span><span class="no">FETCH_ASSOC</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$fila</span><span class="p">[</span><span class="s1">'nombre'</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Aqu√≠ se ha usado <em>fetch(PDO::FETCH_ASSOC)</em>, que devuelve los datos de la consulta en un array asociativo con esta forma:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$fila['id'] = Aqu√≠-va-el-ID;
$fila['nombre'] = "Aqu√≠ va el nombre";
</code></pre></div></div>

<p>En cambio, podr√≠amos haber recuperado los datos as√≠:</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="nf">query</span><span class="p">(</span><span class="s2">"SELECT id, nombre FROM usuarios"</span><span class="p">);</span>
<span class="k">while</span> <span class="p">(</span><span class="nv">$fila</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="nf">fetch</span><span class="p">(</span><span class="no">PDO</span><span class="o">::</span><span class="no">FETCH_NUM</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$fila</span><span class="p">[</span><span class="s1">'nombre'</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></div></div>

<p>En este caso, <em>fetch(PDO::FETCH_NUM)</em> nos colocar√° los datos en un array indexado por n√∫meros, donde la posici√≥n 0 es la primera columna, la posici√≥n 1 la segunda, etc:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$fila[0] = Aqu√≠-va-el-ID;
$fila[1] = "Aqu√≠ va el nombre";
</code></pre></div></div>

<p>Tanto <em>fetch()</em> como <em>fetchAll()</em> admiten, por tanto, varias posibilidades. Estas son las m√°s interesantes, aunque hay m√°s:</p>

<ul>
  <li><strong><em>fetch(PDO::FETCH_ASSOC)</em></strong>: Devuelve los datos en un array asociativo.</li>
  <li><strong><em>fetch(PDO::FETCH_NUM)</em></strong>: Devuelve los datos en un array indexado por n√∫meros enteros.</li>
  <li><strong><em>fetch(PDO::FETCH_BOTH)</em></strong> (por defecto): Devuelve los datos en un array asociativo y en un array indexado por n√∫meros enteros, las dos cosas a la vez.</li>
  <li><strong><em>fetch(PDO::FETCH_OBJ)</em></strong>: Devuelve los datos en un objeto creado para la ocasi√≥n (Los datos ser√≠an accesibles como <em>$fila-&gt;nombre, $fila-&gt;id</em>, etc).</li>
  <li><strong><em>fetch(PDO::FETCH_CLASS, NombreClase)</em></strong>: Devuelve los datos como instancias de la clase especificada.</li>
</ul>
:ET