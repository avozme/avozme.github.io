I"ì-<h2 class="no_toc" id="11-algunas-cosas-que-debes-saber-sobre-los-cms">1.1. Algunas cosas que debes saber sobre los CMS</h2>

<ul id="markdown-toc">
  <li><a href="#111-inconvenientes-de-desarrollar-una-web-desde-cero" id="markdown-toc-111-inconvenientes-de-desarrollar-una-web-desde-cero">1.1.1. Inconvenientes de desarrollar una web desde cero</a></li>
  <li><a href="#112-c√≥mo-funciona-un-cms" id="markdown-toc-112-c√≥mo-funciona-un-cms">1.1.2. C√≥mo funciona un CMS</a></li>
  <li><a href="#113-tipos-de-cms" id="markdown-toc-113-tipos-de-cms">1.1.3. Tipos de CMS</a></li>
  <li><a href="#114-algunos-ejemplos-de-cms-importantes" id="markdown-toc-114-algunos-ejemplos-de-cms-importantes">1.1.4. Algunos ejemplos de CMS importantes</a></li>
  <li><a href="#115-instalaci√≥n-de-un-cms" id="markdown-toc-115-instalaci√≥n-de-un-cms">1.1.5. Instalaci√≥n de un CMS</a></li>
  <li><a href="#116-explotaci√≥n-de-un-cms" id="markdown-toc-116-explotaci√≥n-de-un-cms">1.1.6. Explotaci√≥n de un CMS</a></li>
</ul>

<h3 id="111-inconvenientes-de-desarrollar-una-web-desde-cero">1.1.1. Inconvenientes de desarrollar una web desde cero</h3>

<p>Desarrollar sitios web program√°ndolos desde cero (o m√°s o menos desde cero, porque la mayor parte de las veces se parte de librer√≠as existentes) tiene varias <strong>ventajas</strong> como:</p>

<ul>
  <li>Nos permite sacar el m√°ximo partido tanto del servidor como de los clientes.</li>
  <li>Nos da un control absoluto sobre el sitio web que estamos desarrollando.</li>
  <li>Nos posibilita ajustarnos al m√°ximo a los requerimientos y crear aplicaciones a medida.</li>
</ul>

<p>Pero tambi√©n tiene <strong>inconvenientes</strong>:</p>

<ul>
  <li>La creaci√≥n de un sitio desde cero es un proceso muy largo.</li>
  <li>Las ampliaciones y actualizaciones del sitio tambi√©n resultan lentas y costosas.</li>
  <li>Ambas tareas (creaci√≥n y actualizaci√≥n) requieren personal altamente cualificado, con conocimientos de todas las tecnolog√≠as implicadas. Es decir, desarrolladores web. Y eso cuesta dinero.</li>
</ul>

<p>Cuando los inconvenientes superan a las ventajas, el equipo de desarrollo puede optar√° por <strong>no desarrollar desde cero</strong>. Esto ocurre en la inmensa mayor√≠a de los proyectos. No es necesario inventar la rueda cada vez que tengamos que construir un coche, ¬øverdad? Pues para construir una aplicaci√≥n web pasa lo mismo.</p>

<p>Ahora bien, ¬øde qu√© base partimos? Podemos construir una biblioteca de clases que resuelvan las tareas m√°s habituales de cualquier aplicaci√≥n web, cosas como la autenticaci√≥n de usuarios, la seguridad, el acceso a bases de datos, etc. Cosas que se repiten una y otra vez con muy pocas variaciones.</p>

<p>Esa biblioteca de clases puede ser m√°s grande o m√°s peque√±a, m√°s elaborada o m√°s simple, m√°s configurable o m√°s r√≠gida. Pero, sea como sea, nos ahorrar√° tiempo y esfuerzo en el desarrollo de nuevos proyectos. A esas bibliotecas se las denomina <strong><em>frameworks</em></strong> y es rara la aplicaci√≥n web que no se programa usando alguna de las muchas que hay por ah√≠ pululando, bien se usa un framework propio creado por el propio equipo de desarrollo.</p>

<p>Pero se puede ir un paso m√°s all√° y utilizar una biblioteca m√°s grande, una que ya te lo d√© casi todo hecho y a la que solo tengas que indicarle qu√© tipograf√≠a, qu√© colores y qu√© contenidos quieres mostrar en tu web, y ella solita se las apa√±e para generarte la web de forma casi autom√°tica.</p>

<p>Esta soluci√≥n casi m√°gica son los <strong>sistemas gestores de contenido (CMS)</strong> de los que estamos hablando. Sin programar una sola l√≠nea de c√≥digo, puedes tener lista en unos minutos una web plenamente funcional y de aspecto profesional.</p>

<p>Por suerte para nosotros, los desarrolladores/as web, la CMS no pueden hacerlo todo. Son soluciones extraordinariamente eficaces para montar sitios web convencionales, pero cuando quieres crear algo que se salga de los l√≠mites muy marcados del CMS, necesitas a un programador/a. Y entonces, ¬øa qui√©n vas a llamar?</p>

<h3 id="112-c√≥mo-funciona-un-cms">1.1.2. C√≥mo funciona un CMS</h3>

<p><strong>Un CMS (Content Management System)</strong> es una aplicaci√≥n web que se ejecuta en un servidor y se controla desde un navegador (cliente), y que nos permite:</p>

<ul>
  <li>Crear a trav√©s del navegador un sitio web completamente nuevo en muy poco tiempo.</li>
  <li>Administrar f√°cilmente todo lo relacionado con el sitio web: usuarios, privilegios, contenido, apariencia, men√∫s, etc.</li>
  <li>Y todo ello sin tener conocimientos de HTML, CSS, PHP ni el resto de tecnolog√≠as (ojo: no es necesario, pero s√≠ conveniente)</li>
</ul>

<p>El CMS guarda el <strong>contenido</strong> del sitio web en una <strong>base de datos</strong>.</p>

<p>Cuando se solicita una p√°gina, un programa escrito en PHP (o en otro lenguaje de servidor) busca el contenido de esa p√°gina en la BD y la genera din√°micamente, entreg√°ndola al navegador web (cliente).</p>

<p>Adem√°s, otro conjunto de programas permiten agregar nuevo contenido, modificar el contenido existente, crear usuarios, gestionar privilegios, etc. Todo ello altera los datos existentes en la BD, que a su vez alteran la forma en la que el usuario percibe la p√°gina cuando la visita.</p>

<p>Al sitio web en s√≠ se le denomina a veces <strong><em>front-end</em></strong>. El front-end, en este sentido, es lo que ve el visitante de la web.</p>

<p>A las p√°ginas de adminsitraci√≥n del sitio se les llama a veces <strong><em>back-end</em></strong> o <strong><em>dashboard</em></strong> (panel de administraci√≥n). El back-end s√≥lo es accesible a algunos usuarios (administradores, editores, etc). El CMS siempre necesita, por ello, un control de acceso de usuarios o login.</p>

<p>¬°Cuidado! Los t√©rminos front-end y back-end son confusos. En t√©rminos de programaci√≥n, a menudo se denomina <strong><em>front-end</em></strong> a la parte de la aplicaci√≥n que se ejecuta en el navegador web y <strong><em>back-end</em></strong> a la parte de la aplicaci√≥n que se ejecuta en el servidor e interact√∫a con los recursos del mismo (como la base de datos). En este otro sentido, el front-end est√° escrito en HTML, CSS, JavaScript (y cualquiera de las m√∫ltiples librer√≠as que existen para Javascript, como jQuery, React o Vue.js) y el back-end est√° escrito en PHP, Java, Python u otros lenguajes del lado del servidor.</p>

<p>Si encuentras por ah√≠ una oferta de trabajo para un ‚Äúdesarrollador/a back-end‚Äù o ‚Äúdesarrollador/a front-end‚Äù, se refiere a esta √∫ltima acepci√≥n de ambos t√©rminos. Es decir, est√°n pidiendo un ‚Äúdesarrollador/a HTML + CSS + Javascript (y librer√≠as de Javascrit)‚Äù o un ‚Äúdesarrollador/a en PHP o similar‚Äù.</p>

<h3 id="113-tipos-de-cms">1.1.3. Tipos de CMS</h3>

<p>Hay un mont√≥n (¬°pero un mont√≥n!) de CMS, y cada uno tiene sus propias caracter√≠sticas, puntos fuertes y puntos d√©biles.</p>

<p>Como hay tantos, resulta √∫til clasificarlos.</p>

<p>Algunos autores los clasifican seg√∫n su <strong>m√©todo de distribuci√≥n</strong>:</p>

<ul>
  <li>C√≥digo abierto y software libre.</li>
  <li>C√≥digo propietario.</li>
</ul>

<p>Pero, personalmente, creo que tiene m√°s sentido clasificarlos por su <strong>funcionalidad</strong>. As√≠, nos encontramos con CMS de estos tipos (entre otros):</p>

<ul>
  <li>CMS gen√©ricos (para cualquier tipo de sitio web)</li>
  <li>CMS para blogs.</li>
  <li>CMS para foros.</li>
  <li>CMS para wikis.</li>
  <li>CMS para e-learning (aprendizaje en l√≠nea)</li>
  <li>CMS para e-commerce (comercio electr√≥nico)</li>
  <li>CMS para publicaciones digitales (peri√≥dicos, revistas‚Ä¶)</li>
</ul>

<p>Algo tremendamente odioso de los CMS es que <strong>son fuertemente incompatibles</strong> entre s√≠. Cada uno utiliza un interfaz distinto, bases de datos completamente diferentes para almacenar la informaci√≥n, m√≥dulos incompatibles, etc. Existen algunas iniciativas para lograr que los servicios desarrollados en un CMS puedan utilizarse en otros, pero todav√≠a est√°n en un estadio muy inicial.</p>

<p>Lo que s√≠ existen son familias de CMS relacionados entre s√≠ que pueden compartir algunas caracter√≠sticas, generalmente porque unos CMS han derivado de otros.</p>

<h3 id="114-algunos-ejemplos-de-cms-importantes">1.1.4. Algunos ejemplos de CMS importantes</h3>

<p>Los CMS propietarios no han podido competir con los CMS libres. Por ello, han evolucionado hacia soluciones cloud computing completas, como Microsoft Azure, Google Cloud o Amazon Web Services (AWS).</p>

<p>Entre los verdaderos CMS abundan las soluciones opensource o software libre. Por ejemplo:</p>

<ul>
  <li><strong>Blogs</strong>: WordPress, Jekyll, GetSimple, Umbraco‚Ä¶</li>
  <li><strong>Wikis</strong>: MediaWiki, XWiki, DokuWiki‚Ä¶</li>
  <li><strong>Foros</strong>: phpBB, MyBB, bbPress, Discourse‚Ä¶</li>
  <li><strong>e-learning</strong>: Moodle, WebCT, Mahara, etc.</li>
  <li><strong>e-commerce</strong>: PrestaShop, Magento, OsCommerce, OpenCart‚Ä¶</li>
</ul>

<p>Muchos de estos CMS desaparecer√°n, se fundir√°n con otros o se dividir√°n en varios proyectos desde que yo escriba estas l√≠neas hasta que t√∫ las leas. Lo mejor es que eches un vistazo a alguna lista actualizada de CMS, como <a href="https://en.wikipedia.org/wiki/List_of_content_management_systems">esta de Wikipedia</a>.</p>

<h3 id="115-instalaci√≥n-de-un-cms">1.1.5. Instalaci√≥n de un CMS</h3>

<p>IMPORTANTE: la instalaci√≥n puede diferir de un CMS a otro, pero, m√°s o menos, todos necesitan los mismos pasos.</p>

<p>Hay que leer cuidadosamente las instrucciones de instalaci√≥n, que encontrar√°s en la web del desarrollador.</p>

<p>Los pasos que suelen ser habituales en casi todos los CMS son:</p>

<ol>
  <li>Descargar la √∫ltima versi√≥n del programa de la web del desarrollador.</li>
  <li>Asegurarse de que el servidor cumple los prerrequisitos para ejectuar el CMS (versi√≥n de Apache, PHP, MySQL u otro software necesario)</li>
  <li>Subir el CMS por al servidor (por ftp, v√≠a web o como tu proveedor de hosting te lo permita).</li>
  <li>Crear la base de datos.</li>
  <li>Lanzar la instalaci√≥n del CMS. Esto suele hacerse cargando una direcci√≥n concreta en tu navegador.</li>
  <li>Adapar el archivo de configuraci√≥n (suele llamarse config.php, config.inc, o algo similar). En los CMS m√°s elaborados este paso no es necesario, pues el programa de instalaci√≥n se encarga de generar un archivo de configuraci√≥n v√°lido.</li>
  <li>A veces, hay que modificar los permisos de alg√∫n directorio y/o archivo.</li>
  <li>Instalar el paquete de idioma espa√±ol (si est√° disponible)</li>
</ol>

<h3 id="116-explotaci√≥n-de-un-cms">1.1.6. Explotaci√≥n de un CMS</h3>

<p>IMPORTANTE: la explotaci√≥n puede diferir notablemente de un CMS a otro, pero, en general, todo tienen una serie de elementos en com√∫n.</p>

<p>Hay que leer cuidadosamente las instrucciones de uso, que encontrar√°s en la web del desarrollador.</p>

<p>Pasos que suelen ser habituales en casi todos los CMS, una vez realizada la instalaci√≥n:</p>

<ol>
  <li>Asignar una password de alta seguridad al usuario administrador que se crea por defecto.</li>
  <li>Crear otros usuarios y asignarles privilegios.</li>
  <li>Editar la p√°gina de inicio del sitio web.</li>
  <li>Cambiar la plantilla (apariencia) del sitio.</li>
  <li>Instalar m√≥dulos de ampliaci√≥n (si es necesario).</li>
  <li>Crear el contenido y/o revisar el contenido creado por otros usuarios.</li>
</ol>

<p>En las siguientes secciones nos centraremos en la instalaci√≥n y explotaci√≥n de algunos de los CMS m√°s populares del mercado.</p>

:ET