I"˝-<h2 class="no_toc" id="25-depurando-el-c√≥digo-php-con-xdebug">2.5. Depurando el c√≥digo PHP con xdebug</h2>

<ul id="markdown-toc">
  <li><a href="#251-herramientas-est√°ndar-de-php-para-depuraci√≥n" id="markdown-toc-251-herramientas-est√°ndar-de-php-para-depuraci√≥n">2.5.1. Herramientas est√°ndar de PHP para depuraci√≥n</a></li>
  <li><a href="#252-xdebug" id="markdown-toc-252-xdebug">2.5.2. xdebug</a>    <ul>
      <li><a href="#qu√©-es-xdebug" id="markdown-toc-qu√©-es-xdebug">¬øQu√© es xdebug?</a></li>
      <li><a href="#c√≥mo-instalar-xdebug" id="markdown-toc-c√≥mo-instalar-xdebug">C√≥mo instalar xdebug</a></li>
      <li><a href="#c√≥mo-activar-xdebug-en-mi-ide" id="markdown-toc-c√≥mo-activar-xdebug-en-mi-ide">C√≥mo activar xdebug en mi IDE</a></li>
      <li><a href="#c√≥mo-usar-xdebug" id="markdown-toc-c√≥mo-usar-xdebug">C√≥mo usar xdebug</a></li>
    </ul>
  </li>
</ul>

<p>Depurar el c√≥digo PHP es, en principio, una tarea ardua, porque el programa se ejecuta en un servidor y nosotros solo podemos ver el resultado de esa ejecuci√≥n en un cliente web. Esto significa que, si ocurre un error, nos lo encontraremos mucho despu√©s de que haya ocurrido. Es algo as√≠ como cuando la polic√≠a encuentra los restos de un crimen (el cad√°ver, algunas huellas y unos cuantos cristales rotos en la habitaci√≥n) mucho despu√©s de que el asesinato haya ocurrido. Hay que ejercer de aut√©nticos detectives para, a partir de esas pistas, tratar de recomponer qu√© es lo que ha podido suceder en el servidor que ha provocado ese error.</p>

<p>PHP ofrece varias funciones est√°ndar para ayudarnos en la depuraci√≥n pero, como vamos a ver, son bastante primitivas y poco funcionales, aunque pueden servirte en casos sencillos. Cuando la cosa se complica y el origen del error es dif√≠cil de rastrear, tendremos que recurrir a m√©todos m√°s elaborados. Ah√≠ entra en juego <strong>xdebug</strong>, el depurador m√°s extendido en PHP.</p>

<h3 id="251-herramientas-est√°ndar-de-php-para-depuraci√≥n">2.5.1. Herramientas est√°ndar de PHP para depuraci√≥n</h3>

<p>Como te dec√≠a, el propio lenguaje te ofrece varias funciones est√°ndar para depurar errores. Las dos m√°s utilizadas son:</p>

<ul>
  <li>
    <p><strong><em>echo()</em></strong>: La funci√≥n de salida est√°ndar de PHP tambi√©n se usa con prop√≥sitos de depuraci√≥n. De hecho, esto se ha hecho siempre en todos los lenguajes.</p>

    <p>Simplemente, si un fragmento de tu c√≥digo PHP est√° fallando (una funci√≥n, un m√©todo, un m√≥dulo o lo que sea), coloca unos cuantos <em>echo()</em> estrat√©gicos para mostrar el valor de tus variables clave, las que pueden estar tomando valores incorrectos. Ver√°s el resultado de esos <em>echo()</em> en tu navegador web y te puede proporcionar informaci√≥n valiosa sobre lo que puede estar sucediendo.</p>
  </li>
  <li>
    <p><strong><em>print_r()</em></strong>: La funci√≥n <em>echo()</em> solo muestra variables simples, pero no objetos o arrays. Si necesitas mostrar el contenido de algo m√°s complejo que una variable simple, puedes usar <em>print_r()</em>, que enviar√° el contenido de cualquier variable a la salida est√°ndar, por lo que podr√°s verla en tu navegador web.</p>
  </li>
  <li>
    <p><strong><em>var_dump()</em></strong>: Esta funci√≥n es como <em>print_r()</em>, pero muestra a√∫n m√°s informaci√≥n sobre tu variable, como su tama√±o.</p>
  </li>
</ul>

<p>Adem√°s de estas funciones, los <strong>archivos de registro (<em>logs</em>)</strong> de tu servidor pueden mostrarte informaci√≥n importante sobre el error que se haya podido producir. La ubicaci√≥n de los archivos <em>log</em> es diferente seg√∫n tu sistema operativo, por lo que tendr√°s que investigar un poco acerca de qu√© archivos consultar.</p>

<p>En general, hay un mont√≥n de archivos <em>log</em> que tu sistema operativo podr√≠a estar produciendo, as√≠ que lo primero ser√≠a averiguar c√≥mo se llaman los archivos de <em>log</em> que produce tu servidor web en concreto. Por ejemplo, <strong>Apache</strong> en Ubuntu Linux tiene su registro de errores en <em>/var/log/httpd/error_log</em>.</p>

<p>Como es imposible proporcionarte una lista de todos los archivos de registro de todos los servidores web en todos los sistemas operativos, tendr√°s que bichear un poco por Internet para localizar el <em>log</em> de tu servidor en concreto.</p>

<h3 id="252-xdebug">2.5.2. xdebug</h3>

<p>Todo eso est√° muy bien, pero tanto las funciones est√°ndar de PHP como los archivos <em>log</em> del servidor nos proporcionan una imagen <em>a posteriori</em> de lo que ha sucedido en el servidor. Es decir, vemos lo que ha ocurrido cuando el programa ya ha finalizado su ejecuci√≥n, lo que a menudo dificultad localizar los errores.</p>

<p>Adem√°s, usar funciones como <em>print_r()</em> o <em>var_dump()</em> implica introducir l√≠neas de c√≥digo de depuraci√≥n dentro de mi programa. Ese c√≥digo de depuraci√≥n, poco a poco, va dejando <em>basura</em> que a veces se nos olvida eliminar. Nada hace peor efecto ante los usuarios que una aplicaci√≥n web que de pronto muestra la salida de un <em>var_dump()</em> en mitad de una de sus vistas. Bueno, s√≠: un error de ejecuci√≥n de PHP hace todav√≠a peor efecto.</p>

<p>Por todo ello, ser√≠a estupendo poder depurar el c√≥digo PHP como si se estuviera ejecutando en nuestra m√°quina, igual que con cualquier otro lenguaje de programaci√≥n. Eso es posible gracias a <strong><em>xdebug</em></strong>.</p>

<h4 id="qu√©-es-xdebug">¬øQu√© es xdebug?</h4>

<p><strong><em>xdebug</em></strong> es una extensi√≥n de PHP que permite al cliente y al servidor comunicarse mediante un protocolo especial para depurar el c√≥digo que se ejecuta en el servidor.</p>

<p>Es decir: nuestro c√≥digo seguir√° ejecut√°ndose en el servidor, pero nuestro cliente (normalmente, nuestro editor de texto o nuestro IDE) podr√° pedirle al servidor que lo ejecute paso a paso o que le comunique el valor de cualquier variable en ese momento.</p>

<h4 id="c√≥mo-instalar-xdebug">C√≥mo instalar xdebug</h4>

<p>Como es una extensi√≥n, <strong><em>xdebug</em></strong> no viene de serie y necesita ser instalada en el servidor.</p>

<p>La configuraci√≥n m√°s habitual del servidor web, es decir, un <strong>Apache bajo Linux</strong> (supondremos que es Debian o Ubuntu), necesita estos pasos para lograr la instalaci√≥n de xdebug:</p>

<ol>
  <li>Instalar <strong><em>php-dev</em></strong>, un paquete de herramientas de desarrollo para PHP: <code class="language-plaintext highlighter-rouge">$ sudo apt install php-dev</code></li>
  <li>Instalar <strong><em>xdebug</em></strong> a trav√©s de <em>composer</em>: <code class="language-plaintext highlighter-rouge">$ composer install xdebug</code></li>
  <li>Habilitar el m√≥dulo xdebug en nuestro servidor: <code class="language-plaintext highlighter-rouge">$ sudo phpenmod xdebug</code></li>
  <li>Reiniciar el servidor: <code class="language-plaintext highlighter-rouge">$ sudo service apache2 restart</code></li>
</ol>

<p>Obviamente, estos pasos son diferentes en otros servidores y otros sistemas operativos, incluso en otros sistemas Linux. Es imposible mostrar aqu√≠ todas las configuraciones posibles de todos los sistemas, por lo que, nuevamente, tendr√°s que buscar cu√°l es la manera de instalar <em>xdebug</em> en tu servidor dependiendo de cu√°l sea tu configuraci√≥n exacta.</p>

<p>(Incluso es posible que tengas suerte y tu servidor ya tenga <em>xdebug</em> instalado)</p>

<p>Despu√©s de habilitar <em>xdebug</em> en tu servidor, puedes comprobar que est√° funcionando ejecutando <em>phpinfo()</em> en cualquier script o escribiendo <code class="language-plaintext highlighter-rouge">$php -i</code> en tu servidor. En ambos casos deber√≠a aparecer una secci√≥n dedicada a <em>xdebug</em> con informaci√≥n sobre la configuraci√≥n de esta extensi√≥n.</p>

<h4 id="c√≥mo-activar-xdebug-en-mi-ide">C√≥mo activar xdebug en mi IDE</h4>

<p>Una vez instalada la extensi√≥n <em>xdebug</em>, llega el momento de usarla.</p>

<p><em>xdebug</em> puede integrarse pr√°cticamente con cualquier IDE medianamente decente. Nosotros vamos a ver c√≥mo integrarla con <strong><em>Visual Studio Code</em></strong>, que es probablemente el IDE m√°s utilizado en la actualidad. Si utilizas otro entorno de desarrollo, tendr√°s que buscar por ah√≠ c√≥mo habilitar <em>xdebug</em> en tu IDE, pero los pasos ser√°n bastante similares a estos:</p>

<ol>
  <li><strong>Instalar una <em>extensi√≥n</em></strong> adecuada para la integraci√≥n de <em>xdebug</em> con VS Code. La m√°s utilizada es una llamada <strong><em>PHP Debug</em></strong>.</li>
  <li><strong>Editar el archivo <em>.vscode/launch.json</em></strong>. Este archivo contiene la configuraci√≥n de <em>debugging</em>, es decir, la conexi√≥n con el componente <em>xdebug</em> de nuestro servidor. El archivo se crea autom√°ticamente al instalar la extensi√≥n <em>PHP Debug</em> en VS Code, pero puede que tengas que cambiar algunas cosas. En concreto, tendr√°s que revisar:
    <ul>
      <li>El puerto en el que est√° escuchando el servidor. La depuraci√≥n de PHP se hace a trav√©s de un protocolo diferente de http/https, as√≠ que usa unos puertos diferentes. Un puerto habitual es el 9003, pero debes revisar la configuraci√≥n de tu servidor por si est√° usando un puerto diferente, y en tal caso indicarlo en el archivo <em>launch.json</em> (secci√≥n <em>port</em>).</li>
      <li>El directorio del servidor donde est√° tu aplicaci√≥n web instalada. Los archivos del servidor se mapear√°n con archivos locales de VS Code. En la secci√≥n <em>pathMappings</em> del archivo <em>launch.json</em> debes indicar d√≥nde est√°n los archivos dentro del servidor.</li>
    </ul>
  </li>
</ol>

<h4 id="c√≥mo-usar-xdebug">C√≥mo usar xdebug</h4>

<p>Si ya tenemos instalado <em>xdebug</em> en el servidor y lo hemos activado correctamente en nuestro IDE o en nuestro editor de texto preferido, el proceso de depuraci√≥n es bastante parecido al de cualquier otro lenguaje de programaci√≥n.</p>

<p>Nuevamente, nos referiremos a VS Code, pero el funcionamiento de <em>xdebug</em> ser√° muy semejante en otros entornos de desarrollo.</p>

<ul>
  <li>Al ejecutar el c√≥digo, VS Code nos mostrar√° las opciones para avanzar paso a paso, entrar dentro de funciones, saltar la ejecuci√≥n de una funci√≥n, continuar la ejecuci√≥n sin parar o detener el programa.</li>
  <li>Podemos crear <strong>puntos de ruptura</strong> o <strong><em>breakpoints</em></strong> haciendo click a la izquierda de la l√≠nea de c√≥digo donde queremos detener la ejecuci√≥n de la aplicaci√≥n.</li>
  <li>Podemos visualizar el valor de cualquier variable en ese instante poniendo el rat√≥n encima de la variable en el propio c√≥digo fuente.</li>
  <li>En el panel izquierdo, podemos acceder a las variables del programa (tanto locales como globales y superglobales) y definir cualquier expresi√≥n que queramos que se vaya evaluando en tiempo real (<em>watches</em>).</li>
</ul>

<p>Adem√°s de estas funciones comunes de depuraci√≥n, <em>xdebug</em> ofrece muchas funciones avanzadas que nosotros no vamos a ver, pero que puede que te interese usar en el futuro. Por ejemplo, puedes crear diferentes configuraciones de la sesi√≥n de <em>debugging</em> en el archivo <em>launch.json</em> para depurar diferentes aplicaciones (no es lo mismo depurar una aplicaci√≥n web que una aplicaci√≥n de l√≠nea de comandos). Otra funci√≥n muy interesante de <em>xdebug</em> es la posibilidad de hacer <em>profiling</em>, es decir, un an√°lisis del rendimiento de la aplicaci√≥n web para detectar posibles problemas de rendimiento o cuellos de botella.</p>

<p>Si quieres ampliar la informaci√≥n sobre <em>xdebug</em>, <a href="https://xdebug.org/docs/">aqu√≠ tienes la documentaci√≥n oficial</a>.</p>
:ET