I"(î<h1 class="no_toc" id="3-programaci√≥n-con-pseudoc√≥digo-y-python">3. Programaci√≥n con pseudoc√≥digo y Python</h1>

<ul id="markdown-toc">
  <li><a href="#31-pseudoc√≥digo" id="markdown-toc-31-pseudoc√≥digo">3.1. Pseudoc√≥digo</a>    <ul>
      <li><a href="#311-instrucciones-t√≠picas-en-pseudoc√≥digo-versi√≥n-pseint" id="markdown-toc-311-instrucciones-t√≠picas-en-pseudoc√≥digo-versi√≥n-pseint">3.1.1. Instrucciones t√≠picas en pseudoc√≥digo (versi√≥n PSeInt)</a></li>
      <li><a href="#312-un-ejemplo-sencillo-de-algoritmo-escrito-en-pseudoc√≥digo" id="markdown-toc-312-un-ejemplo-sencillo-de-algoritmo-escrito-en-pseudoc√≥digo">3.1.2. Un ejemplo sencillo de algoritmo escrito en pseudoc√≥digo</a></li>
      <li><a href="#313-c√≥mo-ejecutar-un-programa-escrito-en-pseudoc√≥digo" id="markdown-toc-313-c√≥mo-ejecutar-un-programa-escrito-en-pseudoc√≥digo">3.1.3. C√≥mo ejecutar un programa escrito en Pseudoc√≥digo</a></li>
    </ul>
  </li>
  <li><a href="#32-python" id="markdown-toc-32-python">3.2. Python</a>    <ul>
      <li><a href="#321-correspondencia-entre-pseudoc√≥digo-y-python" id="markdown-toc-321-correspondencia-entre-pseudoc√≥digo-y-python">3.2.1. Correspondencia entre pseudoc√≥digo y Python</a></li>
      <li><a href="#322-un-ejemplo-sencillo-de-algoritmo-escrito-en-python" id="markdown-toc-322-un-ejemplo-sencillo-de-algoritmo-escrito-en-python">3.2.2. Un ejemplo sencillo de algoritmo escrito en Python</a></li>
      <li><a href="#323-c√≥mo-ejecutar-un-programa-escrito-python" id="markdown-toc-323-c√≥mo-ejecutar-un-programa-escrito-python">3.2.3. C√≥mo ejecutar un programa escrito Python</a></li>
    </ul>
  </li>
  <li><a href="#33-errores-frecuentes-entre-principiantes" id="markdown-toc-33-errores-frecuentes-entre-principiantes">3.3. Errores frecuentes entre principiantes</a></li>
  <li><a href="#34-ejercicios-propuestos" id="markdown-toc-34-ejercicios-propuestos">3.4. Ejercicios propuestos</a></li>
</ul>

<h2 id="31-pseudoc√≥digo">3.1. Pseudoc√≥digo</h2>

<p>El pseudoc√≥digo <strong>no es un lenguaje formal de programaci√≥n</strong>, sino un <strong>pseudolenguaje</strong>.</p>

<p>Es decir, se asemeja a los lenguajes de programaci√≥n, pero cada cual se lo monta un poco como quiere. No hay una √∫nica forma correcta y universalmente aceptada de escribir el pseudoc√≥digo.</p>

<p>Nosotros vamos a usar una sintaxis concreta tomada de una utilidad llamada <strong><a href="http://pseint.sourceforge.net/">PSeInt</a></strong>. As√≠ podremos no solo escribir nuestros programas, sino ejecutarlos, depurarlos e incluso ver su diagrama de flujo.</p>

<h3 id="311-instrucciones-t√≠picas-en-pseudoc√≥digo-versi√≥n-pseint">3.1.1. Instrucciones t√≠picas en pseudoc√≥digo (versi√≥n PSeInt)</h3>

<p>Las instrucciones de pseudoc√≥digo tienen una correspondiencia directa con los s√≠mbolos de los diagramas de flujo.</p>

<p>La siguiente tabla muestra una lista de las instrucciones principales del pseudoc√≥digo est√°ndar de PSeInt.</p>

<table>
<tr>
  <td style="background-color: lightgrey" width="30%"><strong>Instrucci√≥n</strong></td><td style="background-color: lightgrey"><strong>Significado</strong></td>
</tr>
<tr>
  <td><strong>Algoritmo</strong> nombre</td><td>Marca el comienzo de un algoritmo y le adjudica un nombre</td>
</tr>
<tr>
  <td><strong>FinAlgoritmo</strong></td><td>Marca el final del algoritmo</td>
</tr>
<tr>
  <td><strong>Definir</strong> variable <strong>Como</strong> tipo</td>
  <td>Declara una variable y le asigna un tipo. Los tipos v√°lidos son Entero, Real, Car√°cter, L√≥gico y Cadena.</td>
</tr>
<tr>
  <td><strong>Leer</strong> variable</td>
  <td>Entrada de datos. El programa lee un dato desde un dispositivo de entrada (si no se indica otra cosa, el
teclado), asignando ese dato a la variable.</td>
</tr>
<tr>
  <td><strong>Escribir</strong> expresi√≥n</td>
  <td>Salida de datos. La expresi√≥n se calcula y su resultado se muestra en la pantalla.</td>
</tr>
<tr>
  <td>variable &lt;- expresion</td>
  <td>Asignaci√≥n. Se eval√∫a la expresi√≥n y el resultado se guarda en la variable.</td>
</tr>
<tr>
  <td><strong>Si</strong> condici√≥n <strong>Entonces</strong>
   &nbsp;&nbsp;&nbsp;&nbsp;acciones-1<br />
<strong>SiNo</strong><br />
   &nbsp;&nbsp;&nbsp;&nbsp;acciones-2<br />
<strong>FinSi</strong></td>
  <td>Estructura condicional. Se eval√∫a la condici√≥n. Si es verdadera, se ejecutan las "acciones-1". Si es falsa, se ejecutan las "acciones-2".</td>
</tr>
<tr>
  <td><strong>Segun</strong> expresi√≥n <strong>hacer</strong><br />
  &nbsp;&nbsp;&nbsp;&nbsp;valor-1: acciones-1;<br />
  &nbsp;&nbsp;&nbsp;&nbsp;valor-2: acciones-2;<br />
  &nbsp;&nbsp;&nbsp;&nbsp;...<br />
  &nbsp;&nbsp;&nbsp;&nbsp;valor-n: acciones-N;<br />
  &nbsp;&nbsp;&nbsp;&nbsp;<strong>De otro modo</strong>: acciones-por-defecto;<br />
<strong>FinSegun</strong></td>
  <td> Condicional m√∫ltiple. Si la expresi√≥n se eva√∫a como"valor-1", se ejecutan las acciones-1. Si vale "valor-2", se ejecutan las acciones-2, y as√≠ sucesivamente. Si la expresi√≥n no coincide con ning√∫n valor, se ejecutan las acciones-por-defecto.</td>
</tr>
<tr>
  <td><strong>Mientras</strong> condici√≥n<br />
   &nbsp;&nbsp;&nbsp;&nbsp;acciones<br />
<strong>FinMientras</strong></td>
  <td>Bucle con condici√≥n al princio. Se realizan las acciones repetidamente mientras la condici√≥n siga siendo verdadera.</td>
</tr>
<tr>
  <td><strong>Repetir<br /></strong>
   &nbsp;&nbsp;&nbsp;&nbsp;acciones<br />
<strong>Hasta Que</strong> condici√≥n</td>
  <td>Bucle con condici√≥n al final. Se realizan las acciones repetidamente mientras la condici√≥n siga siendo verdadera. Observa que el cuerpo de este bucle se ejecuta <i>al menos una vez</i>, mientras que el del bucle anterior podr√≠a no ejecutarse nunca (si la condici√≥n es falsa desde el principio).</td>
</tr>
<tr>
  <td><strong>Para</strong> variable <strong>&lt;-</strong> valor_inicial <strong>Hasta</strong> valor_final <strong>Hacer</strong><br />
   &nbsp;&nbsp;&nbsp;&nbsp;acciones<br />
<strong>FinPara</strong></td>
  <td>Bucle con iterador. Se asigna el valor_inicial a la variable. El bucle se repite hasta que la variable llega al valor_final. En cada iteraci√≥n, la variable se incrementa en una unidad (se puede indicar otro incremento, pero, de momento, nos quedamos con ese).</td>
</tr>
</table>

<p>Tambi√©n existen instrucciones para crear y manejar subalgoritmos. Como nuestros programas, de momento, van a ser muy simples, a√∫n no vamos a verlas. Nos dedicaremos a ellas cuando llegue el momento.</p>

<h3 id="312-un-ejemplo-sencillo-de-algoritmo-escrito-en-pseudoc√≥digo">3.1.2. Un ejemplo sencillo de algoritmo escrito en pseudoc√≥digo</h3>

<p>Lo mejor para comprender c√≥mo se escribe un programa en pseudoc√≥digo es ver un ejemplo.</p>

<p>Vamos a mostrando un <strong>ejemplo sencillo pero muy completo</strong> de algoritmo escrito en pseudoc√≥digo.</p>

<p>Se trata de escribir un algoritmo tal que, dados dos n√∫meros enteros (que llamaremos A y B), nos dir√° cu√°les son los n√∫meros enteros que existen entre A y B ordenados de menor a mayor.</p>

<p>Lo primero que el algoritmo tendr√° que hacer ser√° pedirnos los valores de A y B. Despu√©s, tendr√° que averiguar cu√°l de los dos es el menor (A o B), para poder luego meterse en un bucle que vaya desde el n√∫mero menor hasta el n√∫mero mayor, pasando por todos los valores intermedios e imprimi√©ndolos.</p>

<p>Las instrucciones de ese algoritmo ser√≠an estas:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Algoritmo contar_numeros
	Definir A,B,inicio,final,i Como Entero
	Escribir 'Dime un n√∫mero'
	Leer A
	Escribir 'Dime otro n√∫mero'
	Leer B
	Si (A&lt;B) Entonces
		inicio &lt;- A
		final &lt;- B
	SiNo
		inicio &lt;- B
		final &lt;- A
	FinSi
	Escribir 'Estos son los n√∫meros desde ',inicio,' hasta ',final
	i &lt;- inicio
	Mientras (i&lt;=final) Hacer
		Escribir i
		i &lt;- i+1
	FinMientras
FinAlgoritmo
</code></pre></div></div>

<p>L√©elo con atenci√≥n y aseg√∫rate de entenderlo antes de continuar. Tambi√©n es buena idea que intentes representar este mismo algoritmo mediante un diagrama de flujo y compares esa representaci√≥n con el pseudoc√≥digo anterior. Te dar√°s cuenta de que, en realidad, son dos formas de describir exactamente el mismo programa.</p>

<h3 id="313-c√≥mo-ejecutar-un-programa-escrito-en-pseudoc√≥digo">3.1.3. C√≥mo ejecutar un programa escrito en Pseudoc√≥digo</h3>

<p>Si has escrito el programa usando el dialecto de PseInt, no hay nada m√°s f√°cil: basta con que pegues el c√≥digo fuente en el editor de texto de PseInt y pulses el bot√≥n de ‚ÄúEjecutar‚Äù.</p>

<p>Ten en cuenta que, si tu programa tiene errores de escritura, la ejecuci√≥n no se lanzar√°, sino que PseInt te marcar√° en rojo las l√≠neas donde ha detectado el error o errores. Tendr√°s que corregirlos antes de poder ejecutar el programar.</p>

<h2 id="32-python">3.2. Python</h2>

<p>Los <strong>lenguajes de programaci√≥n reales</strong> son algo m√°s complejos que el pseudoc√≥digo. Unos m√°s y otros menos.</p>

<p>Uno de los lenguajes m√°s semejantes a pseudoc√≥digo que, adem√°s, est√° muy de moda √∫ltimamente es <strong>el lenguaje Python</strong>. Puedes crear programas sencillos con Python de forma muy semejante a c√≥mo lo har√≠as con pseudoc√≥digo (aunque, por supuesto, Python tiene muchas otras caracter√≠sticas adicionales que lo hacen muy potente y en las que no vamos a entrar aqu√≠).</p>

<h3 id="321-correspondencia-entre-pseudoc√≥digo-y-python">3.2.1. Correspondencia entre pseudoc√≥digo y Python</h3>

<p>En la siguiente tabla se muestran las correspondencias entre las principales instrucciones de pseudoc√≥digo y las de Python:</p>

<table>
    <tr>
        <td style="background-color: lightgrey">
        <strong>PSEUDOC√ìDIGO</strong>
        </td>
        <td style="background-color: lightgrey">
        <strong>PYTHON</strong>
        </td>
    </tr>
    <tr>
        <td>
        <strong>// Condicional simple</strong><br />
        Si condici√≥n entonces<br />
        &nbsp;&nbsp;&nbsp;acciones-1<br />
        FinSi
        </td>
        <td>
        <strong># Condicional simple</strong><br />
        if condicion:<br />
        &nbsp;&nbsp;&nbsp;acciones
        </td>
    </tr>
    <tr>
        <td>
        <strong>// Condicional doble</strong><br />
        Si condici√≥n entonces<br />
        &nbsp;&nbsp;&nbsp;acciones-1<br />
        Sino<br />
        &nbsp;&nbsp;&nbsp;acciones-2<br />
        FinSi
        </td>
        <td>
        <strong># Condicional doble</strong><br />
        if condicion:<br />
        &nbsp;&nbsp;&nbsp;acciones-1<br />
        else:<br />
        &nbsp;&nbsp;&nbsp;acciones-2<br />
        </td>
    </tr>
    <tr>
        <td>
        <strong>// Bucle tipo ‚Äúmientras‚Äù</strong><br />
        Mientras condici√≥n hacer<br />
        &nbsp;&nbsp;&nbsp;acciones<br />
        FinMientras
        </td>
        <td>
        <strong># Bucle tipo ‚Äúmientras‚Äù</strong><br />
        while condici√≥n:<br />
        &nbsp;&nbsp;&nbsp;acciones
        </td>
    </tr>
    <tr>
        <td>
        <strong>// Bucle tipo ‚Äúpara‚Äù</strong><br />
        Para variable &lt;- valor_inicial hasta valor_final Hacer<br />
        &nbsp;&nbsp;&nbsp;acciones<br />
        FinPara
        </td>
        <td>
        <strong># Bucle tipo ‚Äúpara‚Äù </strong><br />
        for elemento in secuencia:<br />
        &nbsp;&nbsp;&nbsp;acciones
        </td>
    </tr>
    <tr>
        <td>
        <strong>// Asignaci√≥n</strong><br />
        a &lt;- 20
        </td>
        <td>
        <strong># Asignaci√≥n </strong><br />
        a = 20
        </td>
    </tr>
    <tr>
        <td>
        <strong>// Salida de datos</strong><br />
        Escribir "El resultado es ", x
        </td>
        <td>
        <strong># Salida de datos </strong><br />
        print("El resultado es ", x)
        </td>
    </tr>
    <tr>
        <td>
        <strong>// Entrada de datos</strong><br />
        Escribir "Dime un n√∫mero"<br />
        Leer variable
        </td>
        <td>
        <strong># Entrada de datos </strong><br />
        variable = input("Dime un n√∫mero")
        </td>
    </tr>
</table>

<p>Como puedes observar, para escribir Python en lugar de Pseudoc√≥digo basta con cambiar ligeramente la sintaxis de las instrucciones y, por supuesto, escribirlas en ingl√©s en lugar de usar el castellano.</p>

<p>Observa que Python no tiene instrucciones del tipo ‚ÄúFinSi‚Äù o ‚ÄúFinMientras‚Äù. Para marcar el final de un bloque, Python usa la <strong>sangr√≠a izquierda</strong>, es decir, el espacio que hay a la izquierda del texto: si un texto est√° m√°s sangrado que la instrucci√≥n anterior, significa que ha comenzado un bloque de c√≥digo. Si el texto regresa a la sangr√≠a que ten√≠a antes, significa que ese bloque ha terminado.</p>

<p>Lo mostramos en el siguiente ejemplo, donde se puede ver un bucle while escrito con Pseudoc√≥digo y con Python. F√≠jate en c√≥mo marca cada lenguaje el comienzo y el final del bucle:</p>

<table>
    <tr>
        <td style="background-color: lightgrey">
        <strong>PSEUDOC√ìDIGO</strong>
        </td>
        <td style="background-color: lightgrey">
        <strong>PYTHON</strong>
        </td>
    </tr>
<tr>
<td>
<pre>
i &lt;- 0<br />
Mientras i &lt; 100 hacer<br />
   // Aqu√≠ empieza el cuerpo bucle.<br />
   // La sangr√≠a izquierda es optativa, y sirve<br />
   // para facilitar la lectura del c√≥digo.<br />
   Escribir i<br />
   i &lt;- i + 1<br />
FinMientras<br />
<br />
// Esta instrucci√≥n ya est√° fuera del bucle<br />
Escribir "El bucle ha terminado"<br />
</pre>
</td>
<td>
<pre>
i = 0<br />
while i &lt; 100:<br />
   # Aqu√≠ empieza el cuerpo del bucle.<br />
   # La sangr√≠a izquierda es OBLIGATORIA.<br />
   # Sirve para marcar el cuerpo del bucle.<br />
   print i<br />
   i = i + 1<br />
  <br />
# Esta instrucci√≥n ya est√° fuera del bucle<br />
# porque no tiene sangr√≠a izquierda<br />
print "El bucle ha terminado"<br />
</pre>
</td>
</tr>
</table>

<h3 id="322-un-ejemplo-sencillo-de-algoritmo-escrito-en-python">3.2.2. Un ejemplo sencillo de algoritmo escrito en Python</h3>

<p>Teniendo en cuenta la tabla anterior, es f√°cil escribir en Python el mismo programa que hicimos antes con pseudoc√≥digo; ya sabes, aquel que mostraba todos los n√∫meros enteros que hay entre dos n√∫meros cualesquiera, A y B, que se introducen por teclado. Aqu√≠ lo tienes:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Definir las variables A, B, inicio, final e i
</span><span class="n">A</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Dime un n√∫mero: "</span><span class="p">))</span>
<span class="n">B</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"Dime otro n√∫mero: "</span><span class="p">))</span>

<span class="c1"># Determinar los valores de inicio y final
</span><span class="k">if</span> <span class="n">A</span> <span class="o">&lt;</span> <span class="n">B</span><span class="p">:</span>
    <span class="n">inicio</span> <span class="o">=</span> <span class="n">A</span>
    <span class="n">final</span> <span class="o">=</span> <span class="n">B</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">inicio</span> <span class="o">=</span> <span class="n">B</span>
    <span class="n">final</span> <span class="o">=</span> <span class="n">A</span>

<span class="c1"># Mostrar los n√∫meros desde inicio hasta final
</span><span class="k">print</span><span class="p">(</span><span class="s">"Estos son los n√∫meros desde"</span><span class="p">,</span> <span class="n">inicio</span><span class="p">,</span> <span class="s">"hasta"</span><span class="p">,</span> <span class="n">final</span><span class="p">)</span>
<span class="n">i</span> <span class="o">=</span> <span class="n">inicio</span>

<span class="k">while</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">final</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<p>Observa c√≥mo se hace la entrada de datos en las dos primeras instrucciones del algoritmo: no solo hay que usar la intrucci√≥n <strong>input()</strong>, sino que hay que usar una segunda instrucci√≥n <strong>int()</strong>.</p>

<p>Esto ocurre porque, en Python, cualquier cosa que se lea por el teclado se considera una cadena de caracteres. Para manipularla como otra cosa (por ejemplo, un n√∫mero entero), es necesario <em>convertirla expl√≠citamente</em> a ese tipo de datos. Y eso es exactamente lo que hace <strong>int()</strong>: convertir lo que le pases entre par√©ntesis en un n√∫mero entero.</p>

<h3 id="323-c√≥mo-ejecutar-un-programa-escrito-python">3.2.3. C√≥mo ejecutar un programa escrito Python</h3>

<p>Existen muchas maneras de ejecutar un programa con Python. Aqu√≠ te vamos a mencionar dos de las m√°s simples:</p>

<p><strong>1) Usando Thonny</strong></p>

<p>Thonny es un IDE, es decir, un Entorno Integrado de Desarrollo, especialmente simple y pensado para trabajar con Python. Lo de IDE significa que incluye en un solo programa todo lo necesario para desarrollar aplicaciones (editor, int√©rprete, depurador y otro mont√≥n de herramientas que no hemos visto).</p>

<p>Por lo tanto, solo tienes que instalar Thonny (si a√∫n no lo tienes) y escribir el c√≥digo Python en su editor. Despu√©s, bastar√° con pulsar el bot√≥n de ‚ÄúEjecuci√≥n‚Äù.</p>

<p><strong>2) Mediante un int√©rprete online de Python</strong></p>

<p>Existen muchos int√©rpretes online de Python que, sin necesidad de instalar nada en tu m√°quina, son capaces de ejecutar tu c√≥digo fuente escrito en Python.</p>

<p>Solo tienes que acceder a uno de estos int√©rpretes y (a veces registr√°ndote antes, a veces sin registro) copiar y pegar tu c√≥digo y pulsar el bot√≥n de ejecuci√≥n.</p>

<p>Algunos int√©rpretes online de Python bastante confiables son el de <a href="https://www.w3schools.com/python/python_compiler.asp">W3Schools</a> o el de <a href="https://www.programiz.com/python-programming/online-compiler/">Porgramiz</a>.</p>

<h2 id="33-errores-frecuentes-entre-principiantes">3.3. Errores frecuentes entre principiantes</h2>

<p>En esta secci√≥n recopilo para ti algunas de las dudas, errores y pifias m√°s frecuentes que, seg√∫n mi experiencia como profesor de programaci√≥n, suelen asaltar a los principantes.</p>

<p>Tanto si est√°s aprendiendo a programar con pseudoc√≥digo como si lo haces con un lenguaje de programaci√≥n real (como Python), es muy probable que hayas ca√≠do o vayas a caer en alguno de los siguientes errores, as√≠ que es buena idea que les eches un vistazo antes de lanzarte a hacer tu pr√≥ximo programa.</p>

<h4 id="no-es-lo-mismo-20-que-20">No es lo mismo 20 que ‚Äú20‚Äù</h4>

<p>As√≠ es. Cuando est√°s programando, no es lo mismo la instrucci√≥n <code class="language-plaintext highlighter-rouge">Escribir 20</code> (o cualquier otro n√∫mero) que la instrucci√≥n <code class="language-plaintext highlighter-rouge">Escribir "20"</code>, con el n√∫mero entre comillas.</p>

<p>Las cadenas de caracteres siempre se ponen entre comillas. Los n√∫meros NO.</p>

<p>Por eso, <code class="language-plaintext highlighter-rouge">Escribir 20</code> significa literalmente <em>mostrar en pantalla el n√∫mero 20</em>, mientras que <code class="language-plaintext highlighter-rouge">Escribir "20"</code> significa <em>mostrar en pantalla la cadena de caracteres ‚Äú20‚Äù</em>.</p>

<p>Puede parecer lo mismo, pero no lo es. En una, 20 es un texto y, en otra, un n√∫mero, y para el ordenador son cosas muy distintas (por ejemplo, no puedes sumar dos textos, pero s√≠ dos n√∫meros).</p>

<h4 id="escribir-a-no-es-lo-mismo-que-escribir-a">Escribir ‚Äúa‚Äù no es lo mismo que Escribir a</h4>

<p>Un caso particular de la confusi√≥n anterior, y muy frecuente cuando se empieza a programar, es confundir <code class="language-plaintext highlighter-rouge">Escribir "a"</code> (o cualquier otro car√°cter) con <code class="language-plaintext highlighter-rouge">Escribir a</code>.</p>

<p>La primera instrucci√≥n pide al ordenador que escriba un texto (en este ejemplo, una letra ‚Äúa‚Äù).</p>

<p>La segunda instrucci√≥n pide al ordenador que escriba <em>el contenido</em> de una variable. Es decir, en <code class="language-plaintext highlighter-rouge">Escribir a</code>, la a debe ser una variable preexistente. Y, como todas las variables, debe tener un valor. La instrucci√≥n <code class="language-plaintext highlighter-rouge">Escribir a</code> pide al ordenador que escriba ese valor, no una letra ‚Äúa‚Äù.</p>

<h4 id="me-hago-un-l√≠o-entre-escribir-y-leer">¬°Me hago un l√≠o entre Escribir y Leer!</h4>

<p>A menudo me he encontrado con que las personas que se inician en la programaci√≥n de ordenadores confunden <em>escribir</em> y <em>leer</em>: ¬°no tienen claro cu√°ndo utilizar una y cu√°ndo la otra!</p>

<p>Esta confusi√≥n se debe a un problema de punto de vista. El programador/a novato piensa los algoritmos <em>desde su punto de vista</em>, es decir, como si fuera √©l o ella quien debe ejecutar el algoritmo.</p>

<p>La soluci√≥n pasa por cambiar el punto de vista. <strong>El algoritmo lo ejecutar√° un ordenador</strong>, no nosotros. Los algoritmos son colecciones de √≥rdenes para el ordenador, no para nosotros. Podemos pensar en el ordenador como en un esclavo obediente que har√° todo lo que le pidamos (siempre que se lo pidamos en un lenguaje que pueda entender).</p>

<p>As√≠, cuando le pedimos que ejecute una instrucci√≥n <em>escribir ‚ÄòHola‚Äô</em>, no somos nosotros los que vamos a escribir ‚ÄúHola‚Äù, sino que ser√° la m√°quina la que lo har√°. Y lo escribir√° en su pantalla, que es la manera estandarizada en la que un ordenador escribe cosas.</p>

<p>Y cuando le pidamos que ejecute <em>leer n</em>, ser√° el ordenador el que leer√° el valor de la variable n. ¬øY c√≥mo se las apa√±a un ordenador para leer cosas? A trav√©s de un dispositivo de entrada. Es decir, a trav√©s del teclado. La instrucci√≥n <em>leer n</em> har√° que el programa se detenga hasta que tecleemos algo, y ese algo se almacenar√° en la variable n.</p>

<h4 id="errores-l√≥gicos-confundir-y-con-o">Errores l√≥gicos: confundir Y con O</h4>

<p>Este tambi√©n es un problema frecuente, incluso entre programadores experimentados.</p>

<p>Recuerda que los operadores l√≥gicos Y y O tienen exactamente el mismo significado que en espa√±ol. A partir de ah√≠, solo te queda utilizar el sentido com√∫n.</p>

<p>Si, a√∫n as√≠, te enfrentas con una expresi√≥n que no acabas de comprender, trata de descomponerla en expresiones m√°s simples para asimilar mejor la l√≥gica del problema.</p>

<h4 id="confundir-condici√≥n-con-iteraci√≥n">Confundir condici√≥n con iteraci√≥n</h4>

<p>Otro error recurrente entre principiantes consiste en confundir la estructura condicional con la iterativa. En concreto, confudir <em>Si‚Ä¶ Entonces</em> con <em>Mientras‚Ä¶ Hacer</em>.</p>

<p>Creo que se debe a que ambas instrucciones comparten la misma estructura: tienen una condici√≥n al principio y ejecutan una serie de acciones o no en funci√≥n de esa condici√≥n.</p>

<p>Pero hay una diferencia fundamental: las acciones de un <em>Si‚Ä¶ Entonces</em> solo se ejecutar√°n <strong>una o ninguna vez</strong>, y luego el programa continuar√°. Las acciones de un <em>Mientras‚Ä¶ Hacer</em> se ejecutar√°n <strong>cero, una o muchas veces</strong>, dependiendo de la condici√≥n.</p>

<p>Por lo tanto, para saber si debes usar una u otra, preg√∫ntate esto: ‚Äú¬øtiene sentido que estas acciones se ejecuten muchas veces o, como m√°ximo, se ejecutar√°n una vez?‚Äù. Si la respuesta es ‚Äúmuchas veces‚Äù, necesitas un <em>Mientras‚Ä¶ Hacer</em>. Si la respuesta es ‚Äúuna vez‚Äù, necesitas un <em>Si‚Ä¶ Entonces</em>.</p>

<p>Pongamos un ejemplo. Imagina que est√°s escribiendo un programa que pida un n√∫mero y determine si es negativo. Puedes tener la tentaci√≥n de escribir esto:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>leer N
Mientras N &lt; 0 Hacer    ---&gt; ¬°¬°¬°CUIDADO, ESTO ES UN ERROR!!!
   escribir "El n√∫mero es negativo"
FinMientras
</code></pre></div></div>

<p>Si haces eso, habr√°s provocado involuntariamente un bucle infinito, ya que, cuando el programa entre en el bucle, no lograr√° salir jam√°s de √©l porque la condici√≥n siempre ser√° verdadera.</p>

<p>Para no caer en este error, trata de responder a la pregunta que plante√°bamos antes. La √∫nica accion que hay dentro de este bucle es <em>Escribir ‚ÄúEl n√∫mero es negativo‚Äù</em>, as√≠ que debes preguntarte: ‚Äú¬ømi programa tiene que escribir <em>El n√∫mero es negativo</em> muchas veces, o solo una (en caso de que el n√∫mero, en efecto, sea negativo)?‚Äù</p>

<p>La respuesta, obviamente, es que basta con una. As√≠ que la soluci√≥n correcta a este problema es:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>leer N
Si N &lt; 0 Entonces
   escribir "El n√∫mero es negativo"
FinSi
</code></pre></div></div>

<h4 id="la-plaga-del-copy--paste">La plaga del Copy &amp; Paste</h4>

<p>A menudo sorprendo a mis estudiantes copiando y pegando fragmentos de su propio c√≥digo para resolver un problema.</p>

<p>Cuando eso ocurre, siempre les digo: ‚Äú¬°Alto! Seguro que hay una forma mejor de hacerlo‚Äù.</p>

<p>Y te aseguro que <em>siempre</em> la hay.</p>

<p>Copiar y pegar grandes trozos de c√≥digo es una p√©sima pr√°ctica de programaci√≥n. Y lo es por una raz√≥n muy sencilla de entender. Imagina que has copiado tu c√≥digo en veinte sitios diferentes y, un buen d√≠a, descubres un error en √©l.</p>

<p>Te va a tocar corregir el error veinte veces.</p>

<p>No parece una estrategia muy eficiente.</p>

<p>Si estamos copiando y pegando c√≥digo en varios lugares, seguro que hay otra manera m√°s inteligente de organizar el c√≥digo para evitar esas repeticiones. Normalmente, la soluci√≥n pasa por usar subalgoritmos.</p>

<h4 id="funciona-pero-a-qu√©-precio">Funciona, pero ¬øa qu√© precio?</h4>

<p>Supongo que has o√≠do la expresi√≥n ‚Äúmatar moscas a ca√±onazos‚Äù.</p>

<p>A veces, un algoritmo funciona pero es tremendamente ineficiente. Cuando se lo hago notar a mis estudiantes, se rascan la cabeza, encojen los hombros y dicen: s√≠, pero funciona.</p>

<p>Es como si para ir de Almer√≠a a Madrid di√©semos un rodeo por Nueva York y Calcuta. O por J√∫piter y Saturno. Al final llegamos a Madrid. Dos semanas o dos milenios m√°s tarde, pero llegamos. ‚ÄúS√≠, pero funciona‚Äù.</p>

<p>Bueno, pues no. No funciona. Si llego a Madrid con dos milenios de retraso, no funciona. Si una soluci√≥n es extremadamente ineficiente, no funciona. Hay que buscar otra manera.</p>

<h4 id="soy-un-desordenadoa">Soy un desordenado/a</h4>

<p>¬øEres de esas personas que tiene su escritorio hecho un desastre? ¬øCuando abres el caj√≥n de los calcetines parece que ha explotado una bomba nuclear en su interior? ¬øGuardas comida caducada en el frigor√≠fico durante meses antes de darte cuenta?</p>

<p>Entonces tienes todas las papeletas para ser el t√≠pico programador/a-desastre.</p>

<p>El programador/a-desastre escribe su c√≥digo de cualquier manera, sin respetar las m√≠nimas nociones de orden ni organizaci√≥n: sin sangr√≠as, sin comentarios, sin estructura. Intentar bucear en su c√≥digo es como entrar en la casa de un afectado por el s√≠ndrome de Di√≥genes.</p>

<p>En tu vida personal puedes se un poco desastre si quieres, pero en tu c√≥digo fuente no. Tienes que escribir c√≥digo fuente <strong>pensando siempre que lo van a leer otras personas</strong>.</p>

<h4 id="me-da-pereza-poner-nombres-significativos-a-las-variables">Me da pereza poner nombres significativos a las variables</h4>

<p>Las variables y constantes (as√≠ como los algoritmos y subalgoritmos) deber√≠an tener nombres significativos, que den una idea de qu√© contiene esa variable.</p>

<p>Sin embargo, me he encontrado con muchos estudiantes que sienten una pereza cong√©nita a la hora de inventar nombres para variables. O que no quieren escribir nombres muy largos, como si teclear un par de caracteres m√°s les costase dinero.</p>

<p>Usar identificadores de variables tales como a, aa, aaa, a2, a3, a4 y otras variaciones sobre la letra a es una p√©sima idea. Usar identificadores como edad, coste_total, numero_de_vidas y cosas por el estilo es un s√≠ntoma de estabilidad mental y de buena educaci√≥n hacia otros programadores que alg√∫n d√≠a puedan leer tu c√≥digo.</p>

<h4 id="confudir-variables-y-cadenas">Confudir variables y cadenas</h4>

<p>Los identificadores de variables solo pueden contener letras, n√∫meros y el s√≠mbolo ‚Äú_‚Äù (subrayado). Nunca comillas.</p>

<p>Recuerda que las comillas se reservan <em>exclusivamente</em> para el contenido de las cadenas de caracteres.</p>

<p>As√≠ que, si tienes una variable que se llama, por ejemplo, x, <em>nunca</em> aparecer√° escrita como ‚Äúx‚Äù, porque esto √∫ltimo es una cadena de caracteres que contiene un √∫nico car√°cter (la equis).</p>

<h4 id="utilizar-variables-sin-inicializar">Utilizar variables sin inicializar</h4>

<p>Esto es un error com√∫n incluso entre programadores experimentados. M√°s que un error, se trata de un despiste habitual.</p>

<p>Todas las variables, antes de ser usadas, tienen que:</p>

<ol>
  <li><strong>Declararse</strong>, esto eso, indicar su nombre y el tipo de datos al que pertenecen (entero, real, car√°cter, etc).</li>
  <li><strong>Inicializarse</strong>, es decir, asignarles un valor inicial antes de su primer uso.</li>
</ol>

<p>Si te olvidas de inicializar una variable, ¬øqu√© valor tiene?</p>

<p>Imag√≠nate esta situaci√≥n: declaras una variable llamada x de tipo entero, te olvidas de inicializarla y luego la usas en una operaci√≥n aritm√©tica como esta:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Definir x, y Como Entero
...
...
y = x * 2
</code></pre></div></div>

<p>¬øCu√°l ser√° el valor que tomar√° la variable y? Es imposible determinarlo, ¬øverdad?</p>

<p>Muchos lenguajes de programaci√≥n impedir√°n hacer esto porque producir√°n un error durante la traducci√≥n o durante la ejecuci√≥n. Otros, en cambio, no se preocupan de hacer este tipo de comprobaciones y te dejar√°n ejecutar ese c√≥digo, pero el resultado ser√° impredecible.</p>

<h4 id="utilizar-variables-sin-declarar">Utilizar variables sin declarar</h4>

<p>A√∫n m√°s grave que no inicializar una variable es no declararla. La mayor√≠a de los lenguajes no permitir√°n usar una variable sin haberla declarado previamente, pero algunos s√≠.</p>

<h4 id="asignar-de-izquierda-a-derecha">Asignar de izquierda a derecha</h4>

<p>Este es otro error frecuente entre principiantes. Por suerte, tiene f√°cil soluci√≥n.</p>

<p>El error consiste en confundir los t√©rminos de una asignaci√≥n.</p>

<p>Recuerda que, en las asignaciones:</p>

<ul>
  <li>A la izquierda del s√≠mbolo &lt;- tiene que aparecer una √∫nica variable.</li>
  <li>A la derecha del s√≠mobo &lt;- puede aparecer una variable o una expresi√≥n compleja.</li>
</ul>

<p>Una asignaci√≥n v√°lida es esta: <code class="language-plaintext highlighter-rouge">x &lt;- y * 2 + (rc(z)/8)</code>. F√≠jate que a la izquierda aparece una variable solitaria (x) y a la derecha una expresi√≥n compleja.</p>

<p>El error consiste en hacer la asignaci√≥n al rev√©s, es decir, colocando la variable solitaria a la derecha y la expresi√≥n a la izquierda. Esto, por supuesto, no puede ejecutarse en ning√∫n ordenador.</p>

<h4 id="usar-palabras-reservadas-como-identificadores">Usar palabras reservadas como identificadores</h4>

<p>Otro despiste que todos cometemos a veces es usar una palabra reservada por el lenguaje de programaci√≥n como identificador.</p>

<p>Por ejemplo, no es buena idea ponerle de nombre a una de mis variables cosas como <em>si</em>, <em>entonces</em>, <em>algoritmo</em> o <em>hacer</em>, puesto que son palabras reservadas de mi lenguaje (pseudoc√≥digo). Cuando programes en un lenguaje de programaci√≥n real, esto se hace extensible a cualquier palabra reservada de ese lenguaje.</p>

<p>Tampoco es buena idea usar tildes ni caracteres especiales (como vocales acentuadas) en los identificadores. La mayor parte de los lenguajes de programaci√≥n reales no los aceptar√°n, as√≠ que mejor que nos acostumbremos a ello desde el principio, aunque infrinjamos algunas reglas ortogr√°ficas.</p>

<p>¬°Ojo!, que solo seremos flexibles con la ortograf√≠a en el c√≥digo fuente. El resto de nuestros textos no tienen permiso para vapulear la lengua.</p>

<h4 id="la-multiplicaci√≥n-se-escribe--no-x">La multiplicaci√≥n se escribe *, no x</h4>

<p>Recuerda que el s√≠mbolo para multiplicar, en inform√°tica, es el asterisco (*). Ni equis (x) ni punto (.)</p>

<h4 id="practicar-practicar-y-practicar">Practicar, practicar y practicar</h4>

<p>A programar se aprende programando. Esto es as√≠ de sencillo, y si alguien te dice lo contrario te est√° mintiendo.</p>

<p>No te creer√≠as a nadie que te ofreciera un m√©todo m√°gico para aprender chino en solo un mes, practicando cinco minutos al d√≠a, ¬øverdad? Pues a programar, lo mismo.</p>

<p>Ninguna cosa que merezca la pena aprender se aprende sin esfuerzo. Puede que no te guste esta idea, pero es lo que hay.</p>

<p>As√≠ que, si est√°s dispuesto/a a aprender a programar, prep√°rate para pasar mucho tiempo peleando con tu ordenador (¬°y con tu cabeza!) y a sudar tinta. Por eso es imprescindible disfrutar del proceso: si no, se vuelve una tarea tan ardua como escalar el Everest.</p>

<p>As√≠ que mi principal consejo para todos los principiantes es: practica, practica y practica. Y si, mientras practicas, te das cuenta de que no est√°s disfrutando, plant√©ate si de verdad quieres aprender a programar.</p>

<h2 id="34-ejercicios-propuestos">3.4. Ejercicios propuestos</h2>

<p>Vamos a resolver con pseudoc√≥digo (o con Python, si lo prefieres) varios de los ejercicios que ya propusimos hacer con diagramas de flujo.</p>

<p>La idea es que ahora los <strong>escribas, depures y pruebes tecleando el c√≥digo</strong>, no dibujando del diagrama de flujo.</p>

<p>Por lo tanto, necesitar√°s PseInt (si usas pseudoc√≥digo) o Thonny (si usas Python) para realizar los siguientes ejercicios.</p>

<h4 id="ejercicio-introductorio">Ejercicio introductorio</h4>

<p><strong>Ejercicio 0</strong>.</p>
<div style="background: #eee">Escribe un programa que, simplemente, muestre el mensaje "Hola, mundo" por la consola de texto. Este programa, por tradici√≥n, es el primero que se escribe cuando un programador/a est√° probando un lenguaje o un entorno de desarrollo nuevo.</div>

<h4 id="ejercicios-con-condicionales">Ejercicios con condicionales</h4>

<p><strong>Ejercicio 9</strong>.</p>
<div style="background: #eee">Escribe un programa que lea tres n√∫meros por teclado, X, Y y Z, y te diga si est√°n ordenados de menor a mayor, es decir, si X es menor que Y y, adem√°s, Y es menor que Z.</div>

<p><strong>Ejercicio 10 (optativo para ampliar)</strong>.</p>
<div style="background: #eee">Modifica el programa anterior para que, adem√°s de decirte si X, Y y Z est√°n ordenados, te diga si son consecutivos.</div>

<h4 id="ejercicios-con-bucles">Ejercicios con bucles</h4>

<p><strong>Ejercicio 17</strong>.</p>
<div style="background: #eee">Escribe un programa que calcule el sumatorio entre 1 y n, siendo n un entero introducido por teclado. Es decir, tiene que calcular 1 + 2 + 3 + ...  + n y mostrar el resultado en la pantalla.</div>

<p><strong>Ejercicio 25</strong>.</p>
<div style="background: #eee">Escribe un programa que genere una combinaci√≥n al azar para la quiniela (es decir, 14 valores dentro del conjunto 1, X o 2). Puedes generar un n√∫mero aleatorio entre 1 y n con PseInt usando la funci√≥n <i>azar(n)</i>. Con Python, eso mismo se hace escribiendo <i>randint(1,n)</i></div>

<p><strong>Ejercicio 30. Juego del n√∫mero secreto (optativo para ampliar)</strong>.</p>
<div style="background: #eee">En este programa, el ordenador elegir√° un n√∫mero al azar entre 1 y 100. El usuario ir√° introduciendo n√∫meros por teclado, y el ordenador le ir√° dando pistas: "mi n√∫mero es mayor" o "mi n√∫mero es menor", hasta que el usuario acierte. Entonces el ordenador le felicitar√° y le comunicar√° el n√∫mero de intentos que necesit√≥ para acertar el n√∫mero secreto**.</div>

<p><strong>Ejercicio 33. Juego de dados (optativo: solo para valientes)</strong>.</p>

<p>Escribe un programa para jugar a los dados con el ordenador. Las reglas del juego son las siguientes:</p>

<ul>
  <li>El jugador humano dispondr√° de una cantidad inicial de dinero que se introducir√° por teclado.</li>
  <li>El jugador apostar√° una cantidad de dinero (siempre igual o menor del que le queda)</li>
  <li>Despu√©s, se tirar√°n tres dados (lo cual se puede simular con el m√©todo azar())
    <ul>
      <li>Si en los tres dados sale la misma cantidad, el dinero apostado por el jugador:
        <ul>
          <li>Se multiplica por 5 si en los dados ha salido un 6</li>
          <li>Se multiplica por 3 si sale cualquier otra cantidad</li>
        </ul>
      </li>
      <li>Si en dos dados de los tres sale la misma cantidad, el dinero apostado se multiplica por 2</li>
    </ul>
  </li>
  <li>En cualquier otro caso, el dinero apostado se pierde</li>
  <li>El proceso se repite hasta que el jugador se queda sin dinero o hasta que decide dejar de jugar.</li>
</ul>
:ET