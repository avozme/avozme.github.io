/*
PROGRAMA:  Ajedrez 1.0
ARCHIVO:   ia.c
CONTENIDO: Funciones de inteligencia artificial
AUTOR:     Alfredo Moreno
*/

#include "ia.h"
#include "movs.h"

// Realiza una valoraci� num�ica del estado del juego y del tablero pasados como argumento
int valorar_estado(Tcasilla tablero[9][9], Testado* estado, char jugador)
{
   int x, y, i, j;
   int total, puntos;

   total = 0;
   for (x=1; x<=8; x++)
     for (y=1; y<=8; y++)
     {
	   puntos = 0;
	   switch (tablero[x][y].pieza)
	   {
	      case PEON:    puntos = 100;   // 100 puntos por cada pe�
	                    if (((x==4) || (x==5)) && ((y==4) || (y==5)))
			       puntos = 12;  // 12 puntos m� por tener un pe� en el centro
			    if (tablero[x][y].color_pieza == BLANCO)
			       puntos = puntos + (y-2)*2;   // M� puntos cuanto m� adelantado est�el pe�
			    if (tablero[x][y].color_pieza == NEGRO)
			       puntos = puntos + (8-(y+1))*2;
			    break;
	      case CABALLO: puntos = 315;   // 315 puntos por cada caballo
	                    if (((x==4) || (x==5)) && ((y==4) || (y==5)))
			       puntos = 15;  // 15 puntos m� por tener un caballo en el centro
			    if (((x==6) || (x==3)) && ((y>=3) && (y<=6)))
			       puntos = 5;   // 5 puntos m� por tener un caballo cerca del centro
			    if (((y==6) || (y==3)) && ((x>=3) && (x<=6)))
			       puntos = 5;   // 5 puntos m� por tener un caballo cerca del centro
			    if (((x==2) || (x==7)) && ((y>=2) && (y<=7)))
			       puntos = -5;   // 5 puntos menos por tener un caballo lejos del centro
			    if (((y==2) || (y==7)) && ((x>=2) && (x<=7)))
			       puntos = -5;   // 5 puntos menos por tener un caballo lejos del centro
			    if (((x==1) || (x==8) || (y==1) || (y==2)))
			       puntos = -15;  // 15 puntos menos por tener un caballo en los laterales
	                    break;
	      case ALFIL:   puntos = 330;   // 330 puntos por cada alfil
                            // Vamos a contar a cu�tas casillas puede moverse el alfil (ser� m� puntos positivos)
			    i = x+1; j = y+1;
			    while ((i<=8) && (y<=8)) {
			       if (tablero[i][j].pieza != NINGUNA) break; else puntos++;
			       i++; j++;
			    }
			    i = x+1; j = y-1;
			    while ((i<=8) && (y>=1)) {
			       if (tablero[i][j].pieza != NINGUNA) break; else puntos++;
			       i++; j--;
			    }
			    i = x-1; j = y+1;
			    while ((i>=1) && (y<=8)) {
			       if (tablero[i][j].pieza != NINGUNA) break; else puntos++;
			       i--; j++;
			    }
			    i = x-1; j = y-1;
			    while ((i>=1) && (y>=1)) {
			       if (tablero[i][j].pieza != NINGUNA) break; else puntos++;
			       i--; j--;
			    }
	                    break;
	      case TORRE:   puntos = 500;   // 500 puntos por cada torre
                            // Vamos a contar a cu�tas casillas puede moverse la torre (ser� m� puntos positivos)
			    for (i = x+1; i <= 8; i++)
			       if (tablero[i][y].pieza != NINGUNA) break; else puntos++;
			    for (i = x-1; i >= 1; i--)
			       if (tablero[i][y].pieza != NINGUNA) break; else puntos++;
			    for (j = y+1; j <= 8; j++)
			       if (tablero[x][j].pieza != NINGUNA) break; else puntos++;
			    for (i = y-1; j >= 1; j--)
			       if (tablero[x][j].pieza != NINGUNA) break; else puntos++;
	                    break;
	      case DAMA:    puntos = 940;   // 940 puntos por la dama
	                    if (((x==5) || (x==6)) && ((y==5) || (y==6)))
			       puntos = 4;   // 4 puntos m� por tener la dama en el centro
			    if (((x==6) || (x==3)) && ((y>=3) && (y<=6)))
			       puntos = 2;   // 2 puntos m� por tener la dama cerca del centro
			    if (((y==6) || (y==3)) && ((x>=3) && (x<=6)))
			       puntos = 2;   // 2 puntos m� por tener la dama cerca del centro
			    if (((x==2) || (x==7)) && ((y>=2) && (y<=7)))
			       puntos = -2;   // 2 puntos menos por tener la dama lejos del centro
			    if (((y==2) || (y==7)) && ((x>=2) && (x<=7)))
			       puntos = -2;   // 2 puntos menos por tener la dama lejos del centro
			    if (((x==1) || (x==8) || (y==1) || (y==2)))
			       puntos = -4;  // 4 puntos menos por tener la dama en los laterales
			    break;
	   }
	   if (tablero[x][y].color_pieza == jugador)
	     total = total + puntos;
	   else
	     total = total - puntos;
     }

  return total;
}

// Inicia el recorrido en el �bol de bsqueda MINIMAX.
// Devuelve la valoraci� del mejor nodo-hoja encontrado y el movimiento que hay que realizar
// y que representa el primer paso del camino hacia ese nodo-hoja.
Tmovimiento buscar_mejor_movimiento(Tcasilla tablero[9][9], Testado* estado, char jugador)
{
   int x1, x2, y1, y2, maximo, valoracion;
   Tcasilla nuevo_tablero[9][9];
   Testado nuevo_estado;
   Tmovimiento mejor;

   maximo = -30000;
   // Recorremos el tablero buscando el mejor de todos los posibles movimientos.
   // Primero localizaremos las piezas del color del jugador actual.
   for (x1=1; x1<=8; x1++)
     for (y1=1; y1<=8; y1++)
     {
	   if (tablero[x1][y1].color_pieza == estado->turno)
	   {
	        // Iniciamos otro recorrido del tablero mirando a d�de puede mover esta pieza
		for (x2=1; x2<=8; x2++)
		  for (y2=1; y2<=8; y2++)
		  {
		     if (comprobar_destino(x2, y2, x1, y1, tablero, estado) == VERDADERO)
		     {
		         // El movimiento de (x1,y1) a (x2,y2) es posible. Vamos a iniciar una rama de bsqueda por ah�
			 copiar_tablero(tablero, nuevo_tablero);	// Creamos copias del tablero y del estado
			 copiar_estado(estado, &nuevo_estado);
			 // Realizamos el movimiento sobre los nuevos tablero y estado
			 actualizar_tablero(x1, y1, x2, y2, nuevo_tablero, &nuevo_estado);
			 // Lanzamos la bsqueda por esa rama
			 valoracion = jugador_contrario(1, 0L, nuevo_tablero, &nuevo_estado, jugador);
			 // Comprobamos si esa rama nos lleva al mejor estado posible
			 if (valoracion > maximo)
			 {
			     maximo = valoracion;
			     mejor.valoracion = maximo;
			     mejor.x_orig = x1; mejor.y_orig = y1;
			     mejor.x_dest = x2; mejor.y_dest = y2;
			 }
		     } // if
		  } // for
           } // if
   } // for

   return mejor;
}


// Recorrido por el árbol de búsqueda del juego. Nivel MIN del MINIMAX (correspondiente al jugador contrario)
// Se lleva un control del nivel de profundidad y de la memoria ocupada para no sobrepasar los l�ites.
// Devuelve la valoración MINIMA de todos los nodos hijo.
int jugador_contrario(int profundidad, long int memoria_ocup, Tcasilla tablero[9][9], Testado* estado, char jugador)
{
   int x1, x2, y1, y2, minimo, valor_hijo;
   Tcasilla nuevo_tablero[9][9];
   Testado nuevo_estado;

   if ((profundidad == PROFUNDIDAD_MAX) || (memoria_ocup >= MEMORIA_MAX))    //  CASO BASE --------------------
   {
      minimo = valorar_estado(tablero, estado, jugador);
   }
   else                                                                      //  CASO GENERAL -----------------
   {
     minimo = 9999;
     // Recorremos el tablero buscando el mejor de todos los posibles movimientos.
     // Primero localizaremos las piezas del color del jugador actual.
     for (x1=1; x1<=8; x1++)
       for (y1=1; y1<=8; y1++)
       {
	   if (tablero[x1][y1].color_pieza == estado->turno)
	   {
	        // Iniciamos otro recorrido del tablero mirando a d�de puede mover esta pieza
		for (x2=1; x2<=8; x2++)
		  for (y2=1; y2<=8; y2++)
		  {
		     if (comprobar_destino(x2, y2, x1, y1, tablero, estado) == VERDADERO)
		     {
		         // El movimiento de (x1,y1) a (x2,y2) es posible. Vamos a iniciar una rama de bsqueda por ah�
			 copiar_tablero(tablero, nuevo_tablero);	// Creamos copias del tablero y del estado
			 copiar_estado(estado, &nuevo_estado);
			 // Realizamos el movimiento sobre los nuevos tablero y estado
			 actualizar_tablero(x1, y1, x2, y2, nuevo_tablero, &nuevo_estado);
			 // Lanzamos la búsqueda por esa rama. El próximo movimiento será MAX (del jugador activo)
			 memoria_ocup = memoria_ocup + sizeof(Tcasilla)*81 + sizeof(Testado) + sizeof(int) * 6;
			 valor_hijo = jugador_activo(profundidad+1, memoria_ocup, nuevo_tablero, &nuevo_estado, jugador);
			 if (valor_hijo < minimo)	// Nos quedamos con el menor valor encontrado
			     minimo = valor_hijo;
		     } // if
		  } // for
            } // if
      } // for
   } // else

   return minimo;
}


// Recorrido por el árbol de búsqueda del juego. Nivel MAX del MINIMAX (correspondiente al jugador activo)
// Se lleva un control del nivel de profundidad y de la memoria ocupada para no sobrepasar los l�ites.
// Devuelve la valoración MINIMA de todos los nodos hijo.
int jugador_activo(int profundidad, long int memoria_ocup, Tcasilla tablero[9][9], Testado* estado, char jugador)
{
   int x1, x2, y1, y2, maximo, valor_hijo;
   Tcasilla nuevo_tablero[9][9];
   Testado nuevo_estado;

   if ((profundidad == PROFUNDIDAD_MAX) || (memoria_ocup >= MEMORIA_MAX))    //  CASO BASE --------------------
   {
      maximo = valorar_estado(tablero, estado, jugador);
   }
   else                                                                      //  CASO GENERAL -----------------
   {
     maximo = -9999;
     // Recorremos el tablero buscando el mejor de todos los posibles movimientos.
     // Primero localizaremos las piezas del color del jugador actual.
     for (x1=1; x1<=8; x1++)
       for (y1=1; y1<=8; y1++)
       {
	   if (tablero[x1][y1].color_pieza == estado->turno)
	   {
	        // Iniciamos otro recorrido del tablero mirando a d�de puede mover esta pieza
		for (x2=1; x2<=8; x2++)
		  for (y2=1; y2<=8; y2++)
		  {
		     if (comprobar_destino(x2, y2, x1, y1, tablero, estado) == VERDADERO)
		     {
		         // El movimiento de (x1,y1) a (x2,y2) es posible. Vamos a iniciar una rama de bsqueda por ah�
			 copiar_tablero(tablero, nuevo_tablero);	// Creamos copias del tablero y del estado
			 copiar_estado(estado, &nuevo_estado);
			 // Realizamos el movimiento sobre los nuevos tablero y estado
			 actualizar_tablero(x1, y1, x2, y2, nuevo_tablero, &nuevo_estado);
			 // Lanzamos la búsqueda por esa rama. El próximo movimiento será MAX (del jugador activo)
			 memoria_ocup = memoria_ocup + sizeof(Tcasilla)*81 + sizeof(Testado) + sizeof(int) * 6;
			 valor_hijo = jugador_contrario(profundidad+1, memoria_ocup, nuevo_tablero, &nuevo_estado, jugador);
			 if (valor_hijo > maximo)	// Nos quedamos con el mayor valor encontrado
			     maximo = valor_hijo;
		     } // if
		  } // for
            } // if
      } // for
   } // else

   return maximo;
}


// Hace una copia del tablero
void copiar_tablero(Tcasilla tab_orig[9][9], Tcasilla tab_dest[9][9])
{
   int x,y;
   for (x=1; x<=8; x++)
    for (y=1; y<=8; y++)
      tab_dest[x][y] = tab_orig[x][y];
}

// Hace una copia del estado
void copiar_estado(Testado* est_orig, Testado* est_dest)
{
   *est_dest = *est_orig;
}

