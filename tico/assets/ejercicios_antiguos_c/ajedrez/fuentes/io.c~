/*
PROGRAMA:  Ajedrez 1.0
ARCHIVO:   io_txt.c
CONTENIDO: Funciones de entrada/salida
           Modos soportados:  - TXT_DOS: modo texto MS-DOS (usa librer�s DOS y CONIO)
	                      - TXT_LINUX: modo texto Linux (usa librer� Ncurses)
                              - GRAF_LINUX: modo gr�ico Linux (usa librer� SDL)
           En todas las funciones se encontrar�c�igo separado para cada uno de los modos soportados
	   mediante las directivas #ifdef ... #endif.
	   La constante que determina el modo actual del juego se declara en tipos.h
AUTOR:     Alfredo Moreno
*/

#include "io.h"

#ifdef GRAF_LINUX
SDL_Surface* scr;		// Puntero a la pantalla gr�ica
Uint32* posicion;		// Puntero a los p�els
SDL_Surface *fondo;		// Imagen de fondo (tablero)
SDL_Surface *cuadro1;		// Imagen del recuadro de selecci� de casillas
SDL_Surface *cuadro2;		// Imagen del segundo recuadro de selecci� de casillas
SDL_Surface *peon_bl, *peon_ne;	// Im�enes de las piezas
SDL_Surface *torre_bl, *torre_ne;
SDL_Surface *dama_bl, *dama_ne;
SDL_Surface *alfil_bl, *alfil_ne;
SDL_Surface *caballo_bl, *caballo_ne;
SDL_Surface *rey_bl, *rey_ne;
TTF_Font *fnt1, *fnt2;      // Fuentes para el texto del programa
#endif

// ---------------------------------------------------------------------------------------
// Funci�: inicializar_interfaz()
// Inicializa el interfaz. Invocar antes que cualquier otra funci� de i/o
// ---------------------------------------------------------------------------------------
int inicializar_interfaz()
{
// --------------------------------------
// MODO TEXTO MS-DOS
// --------------------------------------
#ifdef TXT_DOS		// Modo de texto de MS-DOS
  textcolor(WHITE);	// Restaurar colores por defecto
  textbackground(BLUE);
  clrscr();		// Borrar pantalla
#endif

// --------------------------------------
// MODO TEXTO LINUX
// --------------------------------------
#ifdef TXT_LINUX		// Modo de texto en LINUX
  initscr();			// Inicializar Ncurses
  signal(SIGINT, finalizar_interfaz);	// Si hay CTRL-C o similar, se llama a finalizar_interfaz()
  keypad(stdscr, 1);		// Activamos recepci� de teclas especiales
  if (has_colors()) start_color();
  init_pair(C_NEG_NEG, COLOR_BLACK, COLOR_BLACK);
  init_pair(C_NEG_BLA, COLOR_BLACK, COLOR_WHITE);
  init_pair(C_BLA_NEG, COLOR_WHITE, COLOR_BLACK);
  init_pair(C_BLA_BLA, COLOR_WHITE, COLOR_WHITE);
  init_pair(C_TXT, COLOR_YELLOW, COLOR_BLUE);
  init_pair(C_INV, COLOR_BLUE, COLOR_YELLOW);
  init_pair(C_SEL, COLOR_WHITE, COLOR_RED);
  init_pair(C_RES, COLOR_RED, COLOR_BLUE);
  bkgd(COLOR_PAIR(C_TXT));	// Establecemos color de fondo
  attron(A_BOLD);		// Activa negrita para que los caracteres se lean mejor
  refresh();			// Limpia la pantalla
#endif

// --------------------------------------
// MODO GR�ICO LINUX
// --------------------------------------
#ifdef GRAF_LINUX
  if (SDL_Init(SDL_INIT_VIDEO) == -1) {
    puts("Error en la inicializaci� del sistema de v�eo\n");
    SDL_Quit();
    exit(-1);
  }
  // Creamos la pantalla con doble buffer, para dibujar en el doble buffer y luego mandarlo a la memoria de v�eo
  scr = SDL_SetVideoMode(TAM_PANT_X,TAM_PANT_Y,16,SDL_ANYFORMAT | SDL_DOUBLEBUF);
  if (!scr) {
    puts("Fallo al establecer el modo de v�eo\n");
    SDL_Quit();
    exit(-1);
  }
  // Cargamos las im�enes del juego
  cargar_imagenes();
  
  // Inicializamos librer� de fuentes
  if(TTF_Init()==-1) {
    printf("Fallo al inicializar SDL_TTF: %s\n", TTF_GetError());
    exit(-1);
  }  
  // Cargamos fuentes  
  fnt1 = TTF_OpenFont("fonts//arialn.ttf", 14);
  if(!fnt1) {
    printf("Fallo al abrir la fuente: %s\n", TTF_GetError());
    exit(-1);
  }
  TTF_SetFontStyle(fnt1, TTF_STYLE_BOLD);
   
#endif
}

// ---------------------------------------------------------------------------------------
// Funci�: finalizar_interfaz()
// Finaliza el interfaz. Invocar antes de terminar el programa.
// ---------------------------------------------------------------------------------------
void finalizar_interfaz()
{
#ifdef TXT_DOS
  exit(0);
#endif

#ifdef TXT_LINUX
  endwin();	// En LINUX llamamos a la funci� de librer� de Ncurses
  exit(0);
#endif

#ifdef GRAF_LINUX
  TTF_CloseFont(fnt1);      // Primero liberamos las fuentes
  TTF_Quit();
  SDL_FreeSurface(fondo);	// Liberamos todas las superficies que contienen a los sprites del juego
  SDL_FreeSurface(cuadro1); SDL_FreeSurface(cuadro2);
  SDL_FreeSurface(peon_bl); SDL_FreeSurface(peon_ne);
  SDL_FreeSurface(alfil_bl); SDL_FreeSurface(alfil_ne);
  SDL_FreeSurface(torre_bl); SDL_FreeSurface(torre_ne);
  SDL_FreeSurface(caballo_bl); SDL_FreeSurface(caballo_ne);
  SDL_FreeSurface(dama_bl); SDL_FreeSurface(dama_ne);
  SDL_FreeSurface(rey_bl); SDL_FreeSurface(rey_ne);
  SDL_Quit();
  exit(0);
#endif
}


// ---------------------------------------------------------------------------------------
// Funci�: refrescar_pantalla()
// Dibuja en la pantalla el estado actual del tablero
// ---------------------------------------------------------------------------------------
void refrescar_pantalla(Tcasilla tablero[9][9])
{
  int x,y;

#ifdef GRAF_LINUX
  // Mostramos imagen del tablero
  SDL_Rect rect;
  rect = (SDL_Rect) {0, 0, TAM_PANT_X-ANCHO_TXT, TAM_PANT_Y};
  SDL_BlitSurface(fondo, NULL, scr, &rect);
#endif

  // Dibujamos todas las casillas con sus piezas
  for (x=1; x<=8; x++)
    for (y=1; y<=8; y++)
    {
        dibujar_casilla(x, y, tablero[x][y].pieza, tablero[x][y].color_pieza, tablero[x][y].color_casilla);
    }
#ifdef TXT_LINUX
  refresh();			// Actualizamos la pantalla
#endif
#ifdef GRAF_LINUX
  SDL_Flip(scr);		// Enviamos el buffer de pantalla a memoria de v�eo para visualizarlo
#endif
}


// ---------------------------------------------------------------------------------------
// Funci�: dibujar_casilla()
// Dibuja un escaque del tablero con la figura que contiene
// ---------------------------------------------------------------------------------------
void dibujar_casilla(int x, int y, char tipo, char color_pieza, char color_casilla)
{
// --------------------------------------
// MODO TEXTO MS-DOS
// --------------------------------------
#ifdef TXT_DOS
  gotoxy(x*2, y*2);
  if (color_casilla == BLANCO) textbackground(WHITE); else textbackground(BLACK);
  if (color_pieza == BLANCO) textcolor(WHITE); else textcolor(WHITE);

  switch (tipo)
  {
    case PEON: cprintf("P"); break;
    case CABALLO: cprintf("C"); break;
    case ALFIL: cprintf("A"); break;
    case DAMA: cprintf("D"); break;
    case REY: cprintf("R"); break;
    case TORRE: cprintf("T"); break;
    default: cprintf(" ");		// No hay figura en la casilla
  }
#endif

// --------------------------------------
// MODO TEXTO LINUX
// --------------------------------------
#ifdef TXT_LINUX
  // Establecemos los colores
  if ((color_pieza == BLANCO) && (color_casilla == BLANCO)) attron(COLOR_PAIR(C_BLA_BLA));
  if ((color_pieza == NEGRO)  && (color_casilla == BLANCO)) attron(COLOR_PAIR(C_NEG_BLA));
  if ((color_pieza == BLANCO) && (color_casilla == NEGRO)) attron(COLOR_PAIR(C_BLA_NEG));
  if ((color_pieza == NEGRO)  && (color_casilla == NEGRO)) attron(COLOR_PAIR(C_NEG_NEG));
  if ((color_pieza == NINGUNO) && (color_casilla == BLANCO)) attron(COLOR_PAIR(C_NEG_BLA));
  if ((color_pieza == NINGUNO) && (color_casilla == NEGRO)) attron(COLOR_PAIR(C_NEG_NEG));

  // Dibujamos el escaque
  int i, j;
  y = 9-y;	// Le damos la vuelta a la fila porque en la pantalla est� al rev� (la 1 abajo)
  for (j = y*3 - 1; j <= y*3 + 1; j++)
    for (i = x*5 - 2; i <= x*5 + 2; i++)
    {
      move(j, i); printw(" ");
    }

  // Dibujamos la pieza
  move(y*3, x*5);
  switch (tipo)
  {
    case PEON: printw("P"); break;
    case CABALLO: printw("C"); break;
    case ALFIL: printw("A"); break;
    case DAMA: printw("D"); break;
    case REY: printw("R"); break;
    case TORRE: printw("T"); break;
    default: printw(" ");		// No hay figura en la casilla
  }
#endif

// --------------------------------------
// MODO GR�ICO LINUX
// --------------------------------------
#ifdef GRAF_LINUX
  SDL_Rect rect;
  int px, py;

  // No hay que pintar la casilla (ya viene dibujada en la imagen de fondo), s�o la pieza.

  y = 9-y;	// Le damos la vuelta a la y porque en la pantalla las filas est� al rev� (fila 1 abajo)
  // Generamos el rect�gulo adecuado para enviar el sprite a esa posici� de la pantalla
  px =((x-1)*TAM_CASILLA) + DESPLZ_ORIG_X;
  py = ((y-1)*TAM_CASILLA) + DESPLZ_ORIG_Y;
  rect = (SDL_Rect) { px, py, TAM_CASILLA, TAM_CASILLA };

  // Seleccionamos el sprite adecuado segn el tipo y el color de la pieza
  switch (tipo)
  {
     case PEON:   if (color_pieza == BLANCO) SDL_BlitSurface(peon_bl, NULL, scr, &rect);
                  else SDL_BlitSurface(peon_ne, NULL, scr, &rect);
		  break;
     case TORRE:  if (color_pieza == BLANCO) SDL_BlitSurface(torre_bl, NULL, scr, &rect);
                  else SDL_BlitSurface(torre_ne, NULL, scr, &rect);
		  break;
     case ALFIL:  if (color_pieza == BLANCO) SDL_BlitSurface(alfil_bl, NULL, scr, &rect);
                  else SDL_BlitSurface(alfil_ne, NULL, scr, &rect);
		  break;
     case CABALLO:if (color_pieza == BLANCO) SDL_BlitSurface(caballo_bl, NULL, scr, &rect);
                  else SDL_BlitSurface(caballo_ne, NULL, scr, &rect);
		  break;
     case DAMA:   if (color_pieza == BLANCO) SDL_BlitSurface(dama_bl, NULL, scr, &rect);
                  else SDL_BlitSurface(dama_ne, NULL, scr, &rect);
		  break;
     case REY:    if (color_pieza == BLANCO) SDL_BlitSurface(rey_bl, NULL, scr, &rect);
                  else SDL_BlitSurface(rey_ne, NULL, scr, &rect);
		  break;
  }

#endif

}


// ---------------------------------------------------------------------------------------
// Funci�: seleccionar_casilla()
// Permite seleccionar una casilla del tablero usando las teclas del cursor. Devuelve
// las coordenadas de la casilla seleccionada en (col,fila). Ser� (0,0) si se pulsa ESC
// (x_orig, y_orig) son corrdenadas de origen, si es que ya se eligieron. Si no, ser� (0,0)
// ---------------------------------------------------------------------------------------
void seleccionar_casilla(int* col, int* fila, int x_orig, int y_orig, Tcasilla tablero[9][9], Testado* estado)
{

// --------------------------------------
// MODO TEXTO DOS
// --------------------------------------
#ifdef TXT_DOS
  int x,y;
  puts("Introduzca FILA (1-8) ");
  do { scanf("%i", &y); } while ((y < 1) || (y > 8));
  puts("Introduzca COLUMNA (1-8 ");
  do { scanf("%i", &x); } while ((x < 1) || (x > 8));
  // XXX Sustituir por version interactiva
  // XXX y a�dir la llamada a actualizar_tiempo()
  // XXX y al men de opciones
#endif

// --------------------------------------
// MODO TEXTO LINUX
// --------------------------------------
#ifdef TXT_LINUX
  int x, y;		// Coordenadas de la casilla seleccionada
  int ax= 1, ay= 1;	// Coordenadas de la anterior casilla seleccionada
  int terminar = 0;
  int i, j, tecla;

  // Si ya se eligi�casilla de origen, empezamos la selecci� del destino en esas coordenadas
  if (x_orig > 0) { y_orig = 9-y_orig; x = x_orig; y = y_orig; }
  else {x = 1; y = 1; }

  cbreak();		// Para leer las teclas pulsadas inmediatamente
  noecho();		// Desactivar eco
  do
  {
    actualizar_tiempo(estado);
    // Borrar contorno de la casilla anterior
    dibujar_casilla(ax, 9-ay, tablero[ax][9-ay].pieza, tablero[ax][9-ay].color_pieza, tablero[ax][9-ay].color_casilla);
    attron(COLOR_PAIR(C_SEL));

    // Si ya se eligi�casilla de origen (y ahora estamos eligiendo el destino), primero mostramos el
    // recuadro de casilla de origen
    if (x_orig > 0) {
      for (i = x_orig * 5 - 2; i <= x_orig * 5 + 2; i++)
      {
        move(y_orig*3-1, i); printw(" ");
        move(y_orig*3+1, i); printw(" ");
      }
      move (y_orig*3, x_orig*5-2); printw(" ");
      move (y_orig*3, x_orig*5+2); printw(" ");
    }

    // Ahora dibujamos el contorno de la casilla actual
    for (i = x * 5 - 2; i <= x * 5 + 2; i++)
    {
      move(y*3-1, i); printw(" ");
      move(y*3+1, i); printw(" ");
    }
    move (y*3, x*5-2); printw(" ");
    move (y*3, x*5+2); printw(" ");
    refresh();

    // Leer teclado
    tecla = getch();
    switch (tecla)
    {
       case KEY_UP:   if (y > 1) { ay = y; ax = x; y--; } break;
       case KEY_DOWN: if (y < 8) { ay = y; ax = x; y++; } break;
       case KEY_LEFT: if (x > 1) { ax = x; ay = y; x--; } break;
       case KEY_RIGHT:if (x < 8) { ax = x; ay = y; x++; } break;
       case 10: terminar = 1; break;		// Return (aceptar)
       case 27:    // ESC y 'm' llaman al men principal del juego
       case 'm':   menu_juego(tablero, estado);
           		   terminar = -1;				// Al entrar en el men se aborta este movimiento
                   break;
    }
  }
  while (terminar == 0);
  echo();		// Volver a activar el eco
  nocbreak();		// Volver a activar el env� habitual de teclas

  // Guardar el resultado de la selecci� en los par�etros pasados por referencia
  if (terminar == 1) 	
  {              // Se puls�Intro: aceptar selecci�
    *col = x;
    *fila = 9-y;	// Recuerda: en la pantala las filas est� al rev� (abajo el 1)
  }
  else			// Se puls�Esc = cancelar selecci�
  {
    *col = 0;
    *fila = 0;
  }
#endif

// --------------------------------------
// MODO GRAFICO LINUX
// --------------------------------------
#ifdef GRAF_LINUX
  int x, y;		// Coordenadas de la casilla seleccionada
  int px, py;		// Coordenadas de la casilla en la pantalla (coordenadas gr�icas)
  int ax= 1, ay= 1;	// Coordenadas de la anterior casilla seleccionada
  int terminar = 0;
  int tecla;
  SDL_Event evento;	// Para leer el teclado
  SDL_Rect rect;

  // Si ya se eligi�casilla de origen, empezamos la selecci� del destino en esas coordenadas
  if (x_orig > 0) { y_orig = 9-y_orig; x = x_orig; y = y_orig; }
  else {x = 1; y = 1; }

  do
  {
    // Borramos el recuadro de su posici� anterior redibujando toda la pantalla
    refrescar_pantalla(tablero);
    actualizar_tiempo(estado);

    // Si ya se ha seleccionado casilla de origen del movimiento, le dibujamos un recuadro de tipo "cuadro1"
    if (x_orig > 0) {
       px = ((x_orig-1)*TAM_CASILLA) + DESPLZ_ORIG_X;
       py = ((y_orig-1)*TAM_CASILLA) + DESPLZ_ORIG_Y;
       rect = (SDL_Rect) { px, py, TAM_CASILLA, TAM_CASILLA };
       SDL_BlitSurface(cuadro1, NULL, scr, &rect);	// El sprite "cuadro1.bmp" es para marcar la casilla origen
    }

    // Mostramos el recuadro de selecci� actual. Las coordenadas son (x,y)
    px = ((x-1)*TAM_CASILLA) + DESPLZ_ORIG_X;
    py = ((y-1)*TAM_CASILLA) + DESPLZ_ORIG_Y;
    rect = (SDL_Rect) { px, py, TAM_CASILLA, TAM_CASILLA };
    if (x_orig==0)	// Usamos un sprite distinto segn se est�eligiendo casilla origen o destino
       SDL_BlitSurface(cuadro1, NULL, scr, &rect);	// Sprite "cuadro1.bmp" (para seleccionar origen)
    else
       SDL_BlitSurface(cuadro2, NULL, scr, &rect);	// Sprite "cuadro2.bmp (para seleccionar destino)

    // Enviamos la imagen del recuadro a la memoria de v�eo para que se vea
    SDL_Flip(scr);

    // Leer teclado --> esperar evento
    if (SDL_PollEvent(&evento))             // Comprobar si se ha pulsado una tecla
    {
      if (evento.type == SDL_KEYDOWN)			// Efectivamente, se ha pulsado una tecla
      {
         switch (evento.key.keysym.sym)			// Vamos a mirar qu�tecla es
         {
           case SDLK_UP:   if (y > 1) { ay = y; ax = x; y--; } break;	// Flecha arriba
           case SDLK_DOWN: if (y < 8) { ay = y; ax = x; y++; } break;	// Flecha abajo
           case SDLK_LEFT: if (x > 1) { ax = x; ay = y; x--; } break;	// Felcha izquierda
           case SDLK_RIGHT:if (x < 8) { ax = x; ay = y; x++; } break;	// Flecha derecha
           case SDLK_RETURN: terminar = 1; break;			// Intro (aceptar)
           case SDLK_m:      // Men principal del juego      
           case SDLK_ESCAPE: menu_juego(tablero, estado);
           		             terminar = -1;				// Al entrar en el men se aborta este movimiento
                             break;
         }
       }
    }
  }
  while (terminar == 0);

  // Guardar el resultado de la selecci� en los par�etros pasados por referencia
  if (terminar == 1)	
  {                 // Se puls�Intro = aceptar selecci�
    *col = x;
    *fila = 9-y;	// Recuerda: en la pantala las filas est� al rev� (abajo el 1)
  }
  else			    // Se puls�ESC (=cancelar) o se elegi�SALIR DEL JUEGO
  {
    *col = 0;
    *fila = 0;
  }
#endif

}

// ---------------------------------------------------------------------------------------
// Funci�: escribir()
// Escribe una cadena en el lugar de la pantalla destinado a mensajes al usuario
// Hay que especificar la fila donde debe aparecer el texto. Si la fila contiene
// algn texto previo, se borra. El atributo puede ser 0 (normal) o 1 (resaltado)
// ---------------------------------------------------------------------------------------
void escribir(char* texto, int fila, int atrib)
{
#ifdef TXT_DOS
  textbackground(BLUE);
  textcolor(WHITE);
  gotoxy(1,19+fila);
  cprintf(texto);
#endif

#ifdef TXT_LINUX
  switch (atrib) {
     case TXT_NORMAL: attron(COLOR_PAIR(C_TXT)); break;
     case TXT_RESALTADO: attron(COLOR_PAIR(C_RES)); break;
     case TXT_INVERSO: attron(COLOR_PAIR(C_INV)); break;
  }
  move(1+fila,50);
  printw("                                    ");
  move(1+fila,50);
  printw(texto);
  refresh();
#endif

#ifdef GRAF_LINUX
  SDL_Surface *txt_scr;
  SDL_Color color_txt;
  Uint32 color_fnd;
  SDL_Rect rect;

  // Establecemos el color del texto y el de fondo
  switch (atrib) {
    case TXT_NORMAL: color_txt = (SDL_Color) {200,200,200,255};      // Texto normal
                     color_fnd = SDL_MapRGB(scr->format, 0, 0, 0);  
                     break;
    case TXT_RESALTADO: color_txt = (SDL_Color) {255,100,100,255};   // Texto resaltado
                        color_fnd = SDL_MapRGB(scr->format, 0, 0, 0);  
                        break;
    case TXT_INVERSO: color_txt = (SDL_Color) {0,0,0,0};             // V�eo inverso     
                      color_fnd = SDL_MapRGB(scr->format, 200, 200, 200);  
                      break;
  }

  // Primero borramos lo que hubiera escrito antes en la fila
  rect = (SDL_Rect) { TAM_PANT_X - ANCHO_TXT , DESPLZ_ORIG_TXT + (fila*ALTO_TXT), ANCHO_TXT-5, ALTO_TXT };
  SDL_FillRect(scr, &rect, color_fnd);

  // Renderizaci� del texto  
  txt_scr = TTF_RenderText_Blended(fnt1, texto, color_txt);	// Convierte el texto en una superficie gráfica
  if(!txt_scr)
  {
	printf("Fallo en TTF_Render: %s\n", TTF_GetError());
	exit(-1);
  }
  
  // Se muestra la superficie
  SDL_BlitSurface(txt_scr, NULL, scr, &rect);			// Muestra la superficie en la pantalla
  SDL_Flip(scr);
#endif
}


// ---------------------------------------------------------------------------------------
// Funci�: leer()
// Lee una cadena en el lugar de la pantalla destinado a mensajes al usuario
// ---------------------------------------------------------------------------------------
void leer(char* texto, int fila)
{
#ifdef TXT_DOS
  textbackground(BLUE);
  textcolor(WHITE);
  gotoxy(1,20+fila);
  cscanf("%s",texto);
#endif

#ifdef TXT_LINUX
  nocbreak();
  nodelay(stdscr, 0);
  echo();
  attron(COLOR_PAIR(C_TXT));
  move(2+fila,50);
  printw("                                    ");
  move(2+fila,50);
  getstr(texto);
  noecho();
  nodelay(stdscr, 1);
  cbreak();
#endif

#ifdef GRAF_LINUX
  char txt[100] = "";   // Texto de entrada
  int ncars = 0;        // N de caracteres leidos
  SDL_Event evento;	    // Para leer el teclado
  int terminar = 0;     // Centinela
  
  while (!terminar)
  {
    if (SDL_WaitEvent(&evento))             // Esperar a que se pulse una tecla
    {
      if (evento.type == SDL_KEYDOWN)			// Efectivamente, se ha pulsado una tecla
      {
         // Si la tecla es BACKSPACE, se borra el ltimo car�ter almacenado
         if (evento.key.keysym.sym == SDLK_BACKSPACE)
         {
             ncars=ncars-1; if (ncars<0) ncars = 0;
             txt[ncars] = '\0';
             if (ncars>0) escribir(txt, fila, TXT_NORMAL); else escribir(" ", fila, TXT_NORMAL);
         }
         // Si la tecla es un car�ter o un nmero, se almacena como texto de entrada
         else if (((evento.key.keysym.sym >= SDLK_a) && (evento.key.keysym.sym <= SDLK_z)) ||
             ((evento.key.keysym.sym >= SDLK_0) && (evento.key.keysym.sym <= SDLK_9)) )
         {
            txt[ncars] = evento.key.keysym.sym;    // Almacenamos el car�ter
            txt[ncars+1] = '\0';                   // Colocamos el nulo a continuaci�
            escribir(txt, fila, TXT_NORMAL);       // Mostramos el texto en la pantalla
            ncars++;
         }
         // Si la tecla es RETURN, se acepta la entrada y se termina el procedimiento
         else if ((evento.key.keysym.sym == SDLK_RETURN) || (ncars > 98))
         {
            strcpy(texto, txt);
            terminar = 1;
         }
         // Cualquier otra tecla es ignorada
      }
    }
  } // while
#endif
}

// ---------------------------------------------------------------------------------------
// Funci�: leer_tecla()
// Lee el teclado y devuelve el c�igo de la primera tecla pulsada
// ---------------------------------------------------------------------------------------
int leer_tecla(void)
{
   int tecla = -1;
   
#ifdef TXT_DOS
  // XXX implementar
#endif
#ifdef TXT_LINUX
    nodelay(stdscr, 0);
    tecla = getch();
    // En las teclas especiales vamos a asignar nuestros propios c�igos
    switch (tecla)
    {
       case KEY_UP:   tecla = FLECHA_ARRIBA; break;
       case KEY_DOWN: tecla = FLECHA_ABAJO; break;
       case KEY_LEFT: tecla = FLECHA_IZQUIERDA; break;
       case KEY_RIGHT:tecla = FLECHA_DERECHA; break;
       case 10: tecla = RETURN; break;
       case 27: tecla = ESCAPE; break;
    }
    nodelay(stdscr, 1);
#endif
#ifdef GRAF_LINUX
    SDL_Event evento;
    if (SDL_WaitEvent(&evento))             // Esperar a que se pulse una tecla
    {
      if (evento.type == SDL_KEYDOWN)			// Efectivamente, se ha pulsado una tecla
      {
         // Para las teclas especiales vamos a asignar nuestros propios c�igos
         tecla = evento.key.keysym.sym;
         switch (evento.key.keysym.sym)
         {
            case SDLK_RETURN: tecla = RETURN; break;
            case SDLK_UP:     tecla = FLECHA_ARRIBA; break;
            case SDLK_DOWN:   tecla = FLECHA_ABAJO; break;
            case SDLK_LEFT:   tecla = FLECHA_IZQUIERDA; break;
            case SDLK_RIGHT:  tecla = FLECHA_DERECHA; break;
            case SDLK_ESCAPE: tecla = ESCAPE; break;
         }
      }
    }
#endif

   return tecla;
}   

// ---------------------------------------------------------------------------------------
// Funci�: borrar()
// Limpia una l�ea de la zona de la pantalla dedicada a mensajes al usuario.
// Si fila = 0 limpia toda la zona.
// ---------------------------------------------------------------------------------------
void borrar(int fila)
{
#ifdef TXT_LINUX
   attron(COLOR_PAIR(C_TXT));
   if (fila == 0)
   {
     int y;
     for (y = 1; y<=25; y++)
     {
       move(y, 50);
       printw("                                    ");
     }
   }
   else
   {
     move(fila, 50);
     printw("                                     ");
   }
   refresh();
#endif

#ifdef GRAF_LINUX
  Uint32 negro = SDL_MapRGB(cuadro1->format, 0, 0, 0);  
  SDL_Rect rect;
  if (fila != 0)
    rect = (SDL_Rect) { TAM_PANT_X - ANCHO_TXT, DESPLZ_ORIG_TXT + (fila*ALTO_TXT), ANCHO_TXT, ALTO_TXT };
  else
    rect = (SDL_Rect) { TAM_PANT_X - ANCHO_TXT, DESPLZ_ORIG_TXT, ANCHO_TXT, TAM_PANT_Y - DESPLZ_ORIG_TXT};
  SDL_FillRect(scr, &rect, negro);
#endif
}

// ---------------------------------------------------------------------------------------
// Funci�: pausa()
// Detiene la ejecuci� durante los milisegundos indicados
// ---------------------------------------------------------------------------------------
void pausa(int ms)
{
#ifdef TXT_DOS
   // XXX implementar
#endif
#ifdef TXT_LINUX
   time_t t1, t2;
   t2 = time(NULL);
   t1 = time(NULL) + (ms/1000);
   while (t2 < t1) t2 = time(NULL);
#endif
#ifdef GRAF_LINUX
   SDL_Delay(ms);
#endif
}

#ifdef GRAF_LINUX
// ---------------------------------------------------------------------------------------
// Funci�: cargar_imagenes()
// Carga las im�enes BMP del juego en las diferentes superficies
// ---------------------------------------------------------------------------------------
void cargar_imagenes()
{
  Uint32 color;		// Para definir el color de transparencia (donde proceda)
  
  // Cargamos la imagen de fondo (TABLERO)
  fondo = SDL_LoadBMP("imgs//tablero0.bmp");
  if (!fondo) error_imagen("tablero0.bmp");

  // Cargamos la imagen del RECUADRO de selecci� 1
  cuadro1 = SDL_LoadBMP("imgs//cuadro1.bmp");
  if (!cuadro1) error_imagen("cuadro1.bmp");
  color = SDL_MapRGB(cuadro1->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(cuadro1, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del RECUADRO de selecci� 1
  cuadro2 = SDL_LoadBMP("imgs//cuadro2.bmp");
  if (!cuadro2) error_imagen("cuadro2.bmp");
  color = SDL_MapRGB(cuadro2->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(cuadro2, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del PEON BLANCO
  peon_bl = SDL_LoadBMP("imgs//peon_bl.bmp");
  if (!peon_bl) error_imagen("peon_bl.bmp");
  color = SDL_MapRGB(peon_bl->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(peon_bl, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del PEON NEGRO
  peon_ne = SDL_LoadBMP("imgs//peon_ne.bmp");
  if (!peon_ne) error_imagen("peon_ne.bmp");
  color = SDL_MapRGB(peon_ne->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(peon_ne, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del TORRE BLANCA
  torre_bl = SDL_LoadBMP("imgs//torre_bl.bmp");
  if (!torre_bl) error_imagen("torre_bl.bmp");
  color = SDL_MapRGB(torre_bl->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(torre_bl, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del TORRE NEGRA
  torre_ne = SDL_LoadBMP("imgs//torre_ne.bmp");
  if (!torre_ne) error_imagen("torre_ne.bmp");
  color = SDL_MapRGB(torre_ne->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(torre_ne, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del CABALLO BLANCO
  caballo_bl = SDL_LoadBMP("imgs//caballo_bl.bmp");
  if (!caballo_bl) error_imagen("caballo_bl.bmp");
  color = SDL_MapRGB(caballo_bl->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(caballo_bl, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del CABALLO NEGRO
  caballo_ne = SDL_LoadBMP("imgs//caballo_ne.bmp");
  if (!caballo_ne) error_imagen("caballo_ne.bmp");
  color = SDL_MapRGB(caballo_ne->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(caballo_ne, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del ALFIL BLANCO
  alfil_bl = SDL_LoadBMP("imgs//alfil_bl.bmp");
  if (!alfil_bl) error_imagen("alfil_bl.bmp");
  color = SDL_MapRGB(alfil_bl->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(alfil_bl, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del ALFIL NEGRO
  alfil_ne = SDL_LoadBMP("imgs//alfil_ne.bmp");
  if (!alfil_ne) error_imagen("alfil_ne.bmp");
  color = SDL_MapRGB(alfil_ne->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(alfil_ne, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen de la DAMA BLANCA
  dama_bl = SDL_LoadBMP("imgs//dama_bl.bmp");
  if (!dama_bl) error_imagen("dama_bl.bmp");
  color = SDL_MapRGB(dama_bl->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(dama_bl, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen de la DAMA NEGRA
  dama_ne = SDL_LoadBMP("imgs//dama_ne.bmp");
  if (!dama_ne) error_imagen("dama_ne.bmp");
  color = SDL_MapRGB(dama_ne->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(dama_ne, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del REY BLANCO
  rey_bl = SDL_LoadBMP("imgs//rey_bl.bmp");
  if (!rey_bl) error_imagen("rey_bl.bmp");
  color = SDL_MapRGB(rey_bl->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(rey_bl, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);

  // Cargamos la imagen del REY NEGRO
  rey_ne = SDL_LoadBMP("imgs//rey_ne.bmp");
  if (!rey_ne) error_imagen("rey_ne.bmp");
  color = SDL_MapRGB(rey_ne->format, 0, 0, 0);	// Definimos la transparencia (color negro)
  SDL_SetColorKey(rey_ne, SDL_SRCCOLORKEY | SDL_RLEACCEL, color);
}


// ---------------------------------------------------------------------------------------
// Funci�: error_imagen()
// Gestiona los errores durante la carga de las im�enes
// ---------------------------------------------------------------------------------------
void error_imagen(char* archivo)
{
    printf("Fallo al cargar la imagen %s\n", archivo);
    SDL_Quit();
    exit(-1);
}


#endif

