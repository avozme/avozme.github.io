#include "ajedrez.h"


int presentacion(void)
{
	int i,j,x,y,aux;
	x=12;
	y=12;
	initscr();
	keypad(stdscr,1);
	cbreak();
	if (has_colors())
	{
		start_color();
	}
	init_pair(1,COLOR_WHITE,COLOR_WHITE);
	init_pair(2,COLOR_BLACK,COLOR_BLACK);
	init_pair(3,COLOR_BLACK,COLOR_WHITE);
	init_pair(4,COLOR_WHITE,COLOR_BLACK);
	init_pair(5,COLOR_BLACK,COLOR_CYAN);
	init_pair(6,COLOR_WHITE,COLOR_GREEN);
	init_pair(7,COLOR_RED,COLOR_CYAN);
	init_pair(8,COLOR_WHITE,COLOR_CYAN);
	init_pair(9,COLOR_BLACK,COLOR_CYAN);
	init_pair(10,COLOR_RED,COLOR_GREEN);

	bkgd(COLOR_PAIR(5));
	
	
	attron(A_BOLD);
	attron(COLOR_PAIR(9));
	move (1,15);
	printw("                                =||=");
	move (2,15);
	printw("                         o   |\\ ,'`. /||\\ ,'`. /|    o");
	move (3,15);
	printw(" _   _   _   |\\__      /\\^/\\ | `'`'`' || `'`'`' |  /\\^/\\   |\\__     _   _   _ ");
	move (4,15);
	printw("| |_| |_| | /   o\\__  |  /  ) \\      /  \\      /  |  /  ) /   o\\__ | |_| |_| | ");
	move (5,15);
	printw(" \\       / |    ___=' | /  /   |    |    |    |   | /  / |    ___=' \\       / ");
	move (6,15);
	printw("  |     |  |    \\      Y  /    |    |    |    |    Y  /  |    \\      |     | ");
	move (7,15);
	printw("  |     |   \\    \\     |  |    |    |    |    |    |  |   \\    \\     |     | ");
	move (8,15);
	printw("  |     |    >    \\    |  |    |    |    |    |    |  |    >    \\    |     | ");
	move (9,15);
	printw(" /       \\  /      \\  /    \\  /      \\  /      \\  /    \\  /      \\  /       \\ ");
	move (10,15);
	printw("|_________||________||______||________||________||______||________||_________| ");
	move (11,15);
	printw("    __         __       __       __        __       __       __         __ ");
	move (12,15);
	printw("   (  )       (  )     (  )     (  )      (  )     (  )     (  )       (  ) ");
	move (13,15);
	printw("    ><         ><       ><       ><        ><       ><       ><         >< ");
	move (14,15);
	printw("   |  |       |  |     |  |     |  |      |  |     |  |     |  |       |  | ");
	move (15,15);
	printw("  /    \\     /    \\   /    \\   /    \\    /    \\   /    \\   /    \\     /    \\ ");
	move (16,15);
	printw(" |______|   |______| |______| |______|  |______| |______| |______|   |______| ");
	attron(COLOR_PAIR(8));
	move (23,15);
	printw("    __         __       __       __        __       __       __         __ ");
	move (24,15);
	printw("   (  )       (  )     (  )     (  )      (  )     (  )     (  )       (  ) ");
	move (25,15);
	printw("    ><         ><       ><       ><        ><       ><       ><         >< ");
	move (26,15);
	printw("   |  |       |  |     |  |     |  |      |  |     |  |     |  |       |  | ");
	move (27,15);
	printw("  /    \\     /    \\   /    \\   /    \\    /    \\   /    \\   /    \\     /    \\ ");
	move (28,15);
	printw(" |______|   |______| |______| |______|  |______| |______| |______|   |______| ");
	move (29,15);
	printw("                                =||=");
	move (30,15);
	printw("                         o   |\\ ,'`. /||\\ ,'`. /|    o");
	move (31,15);
	printw(" _   _   _   |\\__      /\\^/\\ | `'`'`' || `'`'`' |  /\\^/\\   |\\__     _   _   _ ");
	move (32,15);
	printw("| |_| |_| | /   o\\__  |  /  ) \\      /  \\      /  |  /  ) /   o\\__ | |_| |_| | ");
	move (33,15);
	printw(" \\       / |    ___=' | /  /   |    |    |    |   | /  / |    ___=' \\       / ");
	move (34,15);
	printw("  |     |  |    \\      Y  /    |    |    |    |    Y  /  |    \\      |     | ");
	move (35,15);
	printw("  |     |   \\    \\     |  |    |    |    |    |    |  |   \\    \\     |     | ");
	move (36,15);
	printw("  |     |    >    \\    |  |    |    |    |    |    |  |    >    \\    |     | ");
	move (37,15);
	printw(" /       \\  /      \\  /    \\  /      \\  /      \\  /    \\  /      \\  /       \\ ");
	move (38,15);
	printw("|_________||________||______||________||________||______||________||_________| ");
	
	attron(COLOR_PAIR(2));
	for (i=0;i<=3;i++)
	{
		move(19+i,38);
		printw("                                   ");
	}
	attron(COLOR_PAIR(6));
	for (i=0;i<=3;i++)
	{
		move(18+i,37);
		printw("                                   ");
	}




	move (19,39);
	printw ("Bienvenido al juego del ajedrez");
	move (20,39);
	printw ("Pulse una tecla para continuar");
	return 0;
}

int pintar_pantalla (struct s_casilla tablero[9][9],struct s_estado estado)
{
	int i,j,px,py,x,y,k;
	//attron(A_BOLD);
	attron(COLOR_PAIR(7));
	py = 3; px = 4;
	for (i=1;i<=8;i++) //colocamos las letras y los numeros del marco del tablero
	{
		move (py,1);	
		printw ("%c",tablero[i][0].pieza);
		move (26,px);
		printw ("%c",tablero[0][i].pieza);
		px = px + 5;
		py = py + 3;
	}
	for (i=1;i<=8;i++)
		for (j=1;j<=8;j++)
		{
			if ((tablero[i][j].color_casilla == BLANCAS)&&((tablero[i][j].color_pieza == BLANCAS)||(tablero[i][j].pieza== ' ')))
			{
				attron(COLOR_PAIR(1));
				px = 2 + ((i-1)*5); //calculamos las coordenadas que posee el array en la pantalla
				py = 2 + ((j-1)*3);
				for (k=0; k<=2;k++) {
					move (py+k,px);
					printw("     ");
				}
			}
			if ((tablero [i][j].color_casilla == NEGRAS)&&((tablero[i][j].color_pieza == NEGRAS)||(tablero[i][j].pieza== ' ')))
			{
				attron(COLOR_PAIR(2));
				px = 2 + ((i-1)*5);
				py = 2 + ((j-1)*3);
				for (k=0; k<=2;k++) {
					move (py+k,px);
					printw("     ");
				}
			}
			if ((tablero[i][j].color_casilla == BLANCAS)&&((tablero[i][j].color_pieza == NEGRAS)||(tablero[i][j].pieza== ' ')))
			{
				attron(COLOR_PAIR(3));
				px = 2 + ((i-1)*5);
				py = 2 + ((j-1)*3);
				for (k=0; k<=2;k++) {
					move (py+k,px);
					printw("     ");
				}
			}
			if ((tablero[i][j].color_casilla == NEGRAS)&&((tablero[i][j].color_pieza == BLANCAS)||(tablero[i][j].pieza== ' ')))
			{
				attron(COLOR_PAIR(4));
				px = 2 + ((i-1)*5);
				py = 2 + ((j-1)*3);
				for (k=0; k<=2;k++) {
					move (py+k,px);
					printw("     ");
				}
			}
			move((j*3)-0, (i*5)-1);
	     		if (tablero[i][j].pieza != ' ')
	     		 	printw("%c", tablero[i][j].pieza);
		}
	attron (COLOR_PAIR(6));
	move (35,85);
	printw ("Pulse m para lanzar el menu");
	attron(COLOR_PAIR(2));
	for (i=0;i<=20;i++)
	{
		move(1+i,75);
		printw("                                             ");
	}
	attron(COLOR_PAIR(6));
	for (i=0;i<=20;i++)
	{
		move(2+i,74);
		printw("                                             ");
	}
	if (estado.turno == BLANCAS)
	{
		move (3,87);
		printw ("Turno de las blancas");
	}
	else
	{
		move (3,87);
		printw ("Turno de las negras");
	}
	move (6,79);
	printw ("ORIGEN");
	move (11,79);
	printw ("DESTINO");
	refresh();
	return 0;
}


void borrar_pantalla (void)
{
	clear();
	//int i;
	//for (i=0; i<50;i++)
	//	printw ("\n\n");
}

/*void pintar_ventana(struct s_estado estado)
{
	int i;
	attron(COLOR_PAIR(2));
	for (i=0;i<=20;i++)
	{
		move(1+i,75);
		printw("                                             ");
	}
	attron(COLOR_PAIR(6));
	for (i=0;i<=20;i++)
	{
		move(2+i,74);
		printw("                                             ");
	}
	if (estado.turno == BLANCAS)
	{
		move (3,87);
		printw ("Turno de las blancas");
	}
	else
	{
		move (3,87);
		printw ("Turno de las negras");
	}
}*/

int lanzar_menu (struct s_casilla tablero [9][9], struct s_estado *estado, int *salir)
{
	int tecla,yp,y,i;
	int terminar = 0;
	int bucle = 0;
	y = 0;
	yp=17;
	do
	{
		clear ();
		attron(COLOR_PAIR(2));
		for (i=0;i<=7;i++)
		{
			move(15+i,35);
			printw("                                   ");
		}
		attron(COLOR_PAIR(6));
		for (i=0;i<=7;i++)
		{
			move(16+i,34);
			printw("                                   ");
		}
		move (17,37);
		printw ("Guardar Partida");
		move (19,37);
		printw ("Cargar Partida");
		move (21,37);
		printw ("Inicializar el juego");
		move (23,37);
		printw ("Salir");
		attron (COLOR_PAIR(10));
		move (yp,35);
		printw ("->");
		refresh();
		tecla = getch();
		switch (tecla)
		{
			case KEY_UP:
					if(y>0){
						yp=yp-2;
						y=y-1;
					}
					break;
			case KEY_DOWN: 
					if(y<3){
						yp=yp+2;
						y=y+1;
					}
					break;
			case 10: terminar = 1;
				
		}
	}
	while (terminar == 0);
	switch (y)
	{
		case 0:{         //guardamos el tablero de la partida
				FILE *f;
				f=fopen ("partida.bin" , "w+b");
   				if (f == NULL)
				{
					move (26,37);
					printw ("Error al abrir el archivo");
				}
				else
				{
					fwrite (tablero,sizeof (struct s_casilla),81,f);
					fwrite (estado,sizeof (struct s_estado),1,f);
				}
				fclose(f);
			}break;
		case 1:{        //guardamos el estado de la partida
				FILE *f;
				f=fopen ("partida.bin" , "r+b");
   				if (f == NULL)
				{
					move (26,37);
					printw ("Error al abrir el archivo");
				}
				else
				{
					fread (tablero,sizeof (struct s_casilla),81,f);
					fread (estado, sizeof (struct s_estado),1,f);
				}
				fclose (f);
		 }break;
		case 2:inicializar_tablero(tablero); inicializar_estado(estado); break; //inicializamos el juego
		case 3: *salir = 1;bucle=1;;break; // provocamos el fin del juego
	}
	clear();
	return bucle;
}
