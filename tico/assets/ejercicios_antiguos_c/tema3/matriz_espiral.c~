#include <string.h>
#include <stdio.h>

/* Tamaño de la matriz */
#define N 3

/* Prototipos de las funciones */
void mostrar_matriz(int m[N][N]);
void perimetro(int m[N][N]);
void espiral(int m[N][N]);


int main()
{
    int m[N][N], f, c, opc;
    
    /* Inicialización de la matriz con números al azar */
    for (f = 0; f < N; f++)
	for (c = 0; c < N; c++)
		m[c][f] = rand() % 10;

    /* Menú de opciones */
    do
    {
	printf("\n");
	printf("1. Mostrar matriz\n");
	printf("2. Perímetro\n");
	printf("3. Espiral\n");
	printf("4. Salir\n");
	scanf("%i", &opc);

	switch (opc) {
		case 1: mostrar_matriz(m); break;
		case 2: perimetro(m); break;
		case 3: espiral(m); break;
	}
    }
    while (opc != 4);

    return 0;
}
    

/* Esta función muestra por la pantalla la matriz pasada como parámetro */
void mostrar_matriz(int m[N][N])
{
	int f,c;

	printf("Mostrar matriz:\n");
	for (f = 0; f < N; f++)
	{
		for (c = 0; c < N; c++)
		{
			printf("%i ", m[c][f]);
		}
		printf("\n");
	}
}


/* Esta función muestra el perímetro de la matriz pasada como parámetro */
void perimetro(int m[N][N])
{
	int f,c;

	printf("Perímetro:\n");

	/* Mostramos fila superior (de izquierda a derecha) */
	for (c = 0; c < N; c++)
		printf("%i ", m[c][0]);

	/* Mostramos columna derecha (de arriba a abajo) */
	for (f = 1; f < N; f++)
		printf("%i ", m[N-1][f]);

	/* Mostramos fila inferior (de derecha a izquierda) */
	for (c = N-1; c > 0; c--)
		printf("%i ", m[c][N-1]);

	/* Mostramos columna izquierda (de abajo a arriba) */
	for (f = N-1; f > 0; f--)
		printf("%i ", m[0][f]);

}


/* Esta función muestra la espiral de la matriz pasada como parámetro.
   Para lograrlo, hacemos un perímetro de la matriz completa y luego
   vamos acotando los límites para hacer un perímetro de la matriz
   interna. */
void espiral(int m[N][N])
{
	int f, c, limit_arriba, limit_abajo, limit_der, limit_izq;

	printf("Espiral: \n");

	limit_arriba = 0;
	limit_abajo = N-1;
	limit_der = N-1;
	limit_izq = 0;

	do
	{
		/* Mostramos fila superior (de izquierda a derecha) */
		for (c = limit_izq; c <= limit_der; c++)
			printf("%i ", m[c][limit_arriba]);

		/* Mostramos columna derecha (de arriba a abajo) */
		for (f = limit_arriba+1; f <= limit_abajo; f++)
			printf("%i ", m[limit_der][f]);

		/* Mostramos fila inferior (de derecha a izquierda) */
		for (c = limit_der-1; c >= limit_izq; c--)
			printf("%i ", m[c][limit_abajo]);

		/* Mostramos columna izquierda (de abajo a arriba) */
		for (f = limit_abajo-1; f > limit_arriba; f--)
			printf("%i ", m[limit_izq][f]);

		limit_arriba++;
		limit_abajo--;
		limit_der--;
		limit_izq++;
	}
	while ((limit_arriba <= limit_abajo) && (limit_izq <= limit_der));
}




